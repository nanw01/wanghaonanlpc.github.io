<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个老白 | 野厨</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanghaonanlpc.github.io/"/>
  <updated>2017-02-27T13:21:53.000Z</updated>
  <id>http://wanghaonanlpc.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Android 6.0 设备上动态获取权限</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/27/%E5%9C%A8Android-6-0-%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/27/在Android-6-0-设备上动态获取权限/</id>
    <published>2017-02-27T13:15:00.000Z</published>
    <updated>2017-02-27T13:21:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Android-6-0-设备上动态获取权限"><a href="#在Android-6-0-设备上动态获取权限" class="headerlink" title="在Android 6.0 设备上动态获取权限"></a>在Android 6.0 设备上动态获取权限</h1><p>众所周知，Android 6.0 相比之前的Android版本有一个很大的不同点，就是动态获取权限。最近要修改原来的程序适配安卓6.0+。以记录下在Android 6.0 上如何动态获取权限。</p>
<p>下面从自己一开始的问题入手</p>
<h3 id="实现拨号功能"><a href="#实现拨号功能" class="headerlink" title="实现拨号功能"></a>实现拨号功能</h3><p>说到拨号，一个 Intent 就搞定，代码如下，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void callDirectly(String mobile)&#123;</div><div class="line">     Intent intent = new Intent();</div><div class="line">     intent.setAction(&quot;android.intent.action.CALL&quot;);</div><div class="line">     intent.setData(Uri.parse(&quot;tel:&quot; + mobile));</div><div class="line">     mContext.startActivity(intent);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当然 你可别忘了在 Manifest 文件中去声明拨号的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果在 Android 6.0 以前的设备上，上面的代码都是没有问题的，但是如果是在 Android 6.0 设备上，并且项目的 targetSdkVersion 你设置的是23，那么 当你执行上面的拨号代码时，程序将会奔溃掉。</p>
<p>此时你肯定想到了 如果 targetSdkVersion 值设置的小于23是不是就不会奔溃了，恩，确实如此， 此时即使使用Android6.0的设备，程序也不会奔溃，原因显而易见，Android 的权限机制是 Android M 后才加入的。从 Android M 开始 应用程序申请的权限是在运行时动态赋给用户的。</p>
<p>关于动态分配权限，一些同学可能不是很清楚。这里稍稍提一下 Android 6.0 的权限动态分配。 如果你只对最终的解决方案感兴趣，可以跳过下面这节，直接去看解决方案</p>
<h3 id="权限动态分配"><a href="#权限动态分配" class="headerlink" title="权限动态分配"></a>权限动态分配</h3><p>在 Android6.0 之前，下载好一个应用程序，点击安装我们看到的大都是像这样的界面。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_install.jpg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_install.jpg" alt="img"></a></p>
<p>上图分别是Nexus6和小米手机在安装软件时的界面。</p>
<p>在安装时你会发现，手机操作系统会提示，这个软件会索要了你手机的那些权限，并且给用一个列表进行展示，但是这些提示只是在安装是提示，只要你点击接受或者安装， 表示你允许这个应用在可以获取它申明的所有权限。一般很少有人在安装时，会因为看到某个应用因为申请了某一个敏感权限而放弃安装应用。因为这个权限虽然敏感， 但是对于当前的用户是不可感知的，因为他现在并没有立即去查看你的最近通话、短信记录…</p>
<p>说到这里，我们自然而然的会想到，其实最好的方式是，当这个应用在用户使用过程中，正准备使用某个权限时，比如说读取短信列表，系统能及时的弹出一个提示框，说这个应用要读取您的短信内容， 您是否允许。然后用户结合当前应用的执行动作，依据当前条件判断，是不是应该授予应用读取短信记录的权限。这绝对的最完美的。 因为在具体的使用过程中，用户可以结合当前应用的使用场景，去思考、判断是不是应该给这个应用相应的权限。不给能怎样，给了会怎样， 这样对用户而言，完全是主动的，相比安装时那种选择，这样的做法无疑是对用户莫大的尊重，同时这也保证了用户的个人隐私。</p>
<p>说到这里，不得不插一句，其实 MIUI 早就实现了这个系统特性，在这一点上 MIUI 确实走到了 Android团队的前面，恩，给 MIUI 点个赞。</p>
<p>然而直到 Android 6.0 这个版本开始，上面的假设终于得到了谷歌的实践，除了在应用安装时，操作系统会提示应用会获取那些权限，在运行过程中，当应用去真的获取一些敏感 权限时，系统还会弹出一个提示框，询问用户是不是授予应用相应的权限。如下图所示。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_sms.jpeg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_sms.jpeg" alt="img"></a></p>
<p>这就是 Android 6.0 的运行时权限检查机制。下面是Google官方对此的解释，只截取介绍部分</p>
<blockquote>
<p>Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not when they install the app. This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app. It also gives the user more control over the app’s functionality; for example, a user could choose to give a camera app access to the camera but not to the device location. The user can revoke the permissions at any time, by going to the app’s Settings screen.</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>其实上面已经说了一种取巧的方案，将 targetSdkVersion 设为小于23的值，程序将不会奔溃， 但是在Android 6.0 上你的应用程序依旧拨不了电话，这是真的。所以要想兼容6.0版本，必须通过下面的方式进行代码层面的兼容。</p>
<p>对Android版本做判断，然后对Android 6.0 做特殊处理，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">final public static int REQUEST_CODE_ASK_CALL_PHONE = 123;</div><div class="line"></div><div class="line">public void onCall(String mobile)&#123;</div><div class="line">       this.mMobile = mobile;</div><div class="line">       if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">           int checkCallPhonePermission = ContextCompat.checkSelfPermission(mContext,Manifest.permission.CALL_PHONE);</div><div class="line">           if(checkCallPhonePermission != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">               ActivityCompat.requestPermissions(mContext,new String[]&#123;Manifest.permission.CALL_PHONE&#125;,REQUEST_CODE_ASK_CALL_PHONE);</div><div class="line">               return;</div><div class="line">           &#125;else&#123;</div><div class="line">               //上面已经写好的拨号方法</div><div class="line">               callDirectly(mobile);</div><div class="line">           &#125;</div><div class="line">       &#125; else &#123;</div><div class="line">           //上面已经写好的拨号方法</div><div class="line">           callDirectly(mobile);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>此时，如果一个Android6.0的用户触发拨号动作，执行上面的代码，那么他将会看到一个很好看的MaterialDialog，如下图所示。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_permission.jpeg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_permission.jpeg" alt="img"></a></p>
<p>那么用户点击拒绝或者允许，我们怎么才能拿到回调呢，如果能拿到回调，我们就可以根据用户的选择来执行不同的操作了。</p>
<p>这里应该会看到在 ActivityCompat 的 requestPermissions 方法中，最后一个参数是一个requestCode，看到它自然而然想到了经常用到的onActivityResult， 这里当执行 ActivityCompat 的 requestPermissions 方法后有一个回调机制，需要我们在当前 Activity 中实现 onRequestPermissionsResult 这个方法，具体如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">    switch (requestCode) &#123;</div><div class="line">        case REQUEST_CODE_ASK_CALL_PHONE:</div><div class="line">            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                // Permission Granted</div><div class="line">                callDirectly(mobile);</div><div class="line">            &#125; else &#123;</div><div class="line">                // Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;CALL_PHONE Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会对提供了一个对用户点击做判断的入口，开发者可以根据 grantResults[0] 的类型，来判断用户点击的是允许还是拒绝，接着就可以执行相应的逻辑了。</p>
<h3 id="有用的链接"><a href="#有用的链接" class="headerlink" title="有用的链接"></a>有用的链接</h3><p>关于AndroidM上权限的动态获取，这里只给出了一个最简单的示例，如果你还没有尽兴，那么下面这篇国外的博文，一定会让你满足。</p>
<p><a href="https://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en" target="_blank" rel="external">Everything every Android Developer must know about new Android’s Runtime Permission</a></p>
<p>这篇英文博文内容很长、内容也比较多，十足的干货。您慢用~</p>
<p>后记：偶然发现已经有哥们把上面的这篇文章做了翻译，真是极好的，这里给大家也摘录过来了，附上<strong>翻译链接</strong>，给翻译者同学点赞，辛苦！</p>
<p>另外，最近看到一个Github上的开源项目 <a href="https://github.com/k0shk0sh/PermissionHelper" target="_blank" rel="external">PermissionHelper</a> ，专门用于处理 Android 6.0 的权限兼容问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在Android-6-0-设备上动态获取权限&quot;&gt;&lt;a href=&quot;#在Android-6-0-设备上动态获取权限&quot; class=&quot;headerlink&quot; title=&quot;在Android 6.0 设备上动态获取权限&quot;&gt;&lt;/a&gt;在Android 6.0 设备上动态获取
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 6.0+新的运行时权限[转载]</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/27/Android-6-0-%E6%96%B0%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90-%E5%BC%80%E5%8F%91%E8%80%85%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/27/Android-6-0-新的运行时权限-开发者需要知道的一切/</id>
    <published>2017-02-27T13:13:24.000Z</published>
    <updated>2017-02-27T13:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-6-0-新的运行时权限-开发者需要知道的一切"><a href="#Android-6-0-新的运行时权限-开发者需要知道的一切" class="headerlink" title="Android 6.0+新的运行时权限 开发者需要知道的一切"></a>Android 6.0+新的运行时权限 开发者需要知道的一切</h1><p>android M 的名字官方刚发布不久，最终正式版即将来临！<br>android在不断发展，最近的更新 M 非常不同，一些主要的变化例如运行时权限将有颠覆性影响。惊讶的是android社区鲜有谈论这事儿，尽管这事很重要或许在不远的将来会引发很严重的问题。<br>这是今天我写<a href="http://ocnyang.com/2016/08/16/AndroidMPermission/#more" target="_blank" rel="external">这篇博客</a>的原因。这里有一切关于android运行时权限你需要知道的，包括如何在代码中实现。现在亡羊补牢还不晚。</p>
<h2 id="新运行时权限"><a href="#新运行时权限" class="headerlink" title="新运行时权限"></a>新运行时权限</h2><p>android的权限系统一直是首要的安全概念，因为这些权限只在安装的时候被询问一次。一旦安装了，app可以在用户毫不知晓的情况下访问权限内的所有东西。<br>难怪一些坏蛋利用这个缺陷恶意收集用户数据用来做坏事了！<br>android小组也知道这事儿。7年了！权限系统终于被重新设计了。在android6.0棉花糖，app将不会在安装的时候授予权限。取而代之的是，app不得不在运行时一个一个询问用户授予权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-0180c3c006b72f69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>注意权限询问对话框不会自己弹出来。开发者不得不自己调用。如果开发者要调用的一些函数需要某权限而用户又拒绝授权的话，函数将抛出异常直接导致程序崩溃。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-469ca2e40633a306.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>另外，用户也可以随时在设置里取消已经授权的权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-266590a23f9a9bc9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>你或许已经感觉到背后生出一阵寒意。。。如果你是个android开发者，意味着要完全改变你的程序逻辑。你不能像以前那样直接调用方法了，你不得不为每个需要的地方检察权限，否则app就崩溃了！<br>是的。我不能哄你说这是简单的事儿。尽管这对用户来说是好事，但是对开发者来说就是噩梦。我们不得不修改编码不然不论短期还是长远来看都是潜在的问题。<br>这个新的运行时权限仅当我们设置targetSdkVersion to 23（这意味着你已经在23上测试通过了）才起作用，当然还要是M系统的手机。app在6.0之前的设备依然使用旧的权限系统。</p>
<h2 id="已经发布了的app会发生什么"><a href="#已经发布了的app会发生什么" class="headerlink" title="已经发布了的app会发生什么"></a>已经发布了的app会发生什么</h2><blockquote>
<p>新运行时权限可能已经让你开始恐慌了。<strong>“hey，伙计！我三年前发布的app可咋整呢。如果他被装到android 6.0上，我的app会崩溃吗？！？”</strong><br>莫慌张，放轻松。android小队又不傻，肯定考虑到了这情况。<strong>如果app的targetSdkVersion 低于 23，那将被认为app没有用23新权限测试过，那将被继续使用旧有规则：用户在安装的时候不得不接受所有权限，安装后app就有了那些权限咯！</strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-9ebfcbb36dff38b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>然后app像以前一样奔跑！注意，此时用户依然可以取消已经同意的授权！用户取消授权时，android 6.0系统会警告，但这不妨碍用户取消授权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-c6424f0b749605c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>问题又来了，这时候你的app崩溃吗？<br>善意的主把这事也告诉了android小组，当我们在targetSdkVersion 低于23的app调用一个需要权限的函数时，这个权限如果被用户取消授权了的话，不抛出异常。但是他将啥都不干，结果导致函数返回值是null或者0.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-486ba9bdb91de1a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>别高兴的太早。尽管app不会调用这个函数时崩溃，返回值null或者0可能接下来依然导致崩溃。<br>好消息（至少目前看来）是这类取消权限的情况比较少，我相信很少用户这么搞。如果他们这么办了，后果自负咯。<br>但从长远看来，我相信还是会有大量用户会关闭一些权限。我们app不能在新设备完美运行这是不可接受的。<br>怎样让他完美运行呢，你最好修改代码支持最新的权限系统，而且我建议你立刻着手搞起！<br>代码没有成功改为支持最新运行时权限的app,不要设置targetSdkVersion 23 发布，否则你就有麻烦了。只有当你测试过了，再改为targetSdkVersion 23 。</p>
<blockquote>
<p><strong>警告：现在你在android studio新建项目，targetSdkVersion 会自动设置为 23。如果你还没支持新运行时权限，我建议你首先把targetSdkVersion 降级到22</strong></p>
</blockquote>
<h2 id="PROTECTION-NORMAL类权限"><a href="#PROTECTION-NORMAL类权限" class="headerlink" title="PROTECTION_NORMAL类权限"></a>PROTECTION_NORMAL类权限</h2><p>当用户安装或更新应用时，系统将授予应用所请求的属于 PROTECTION_NORMAL 的所有权限（安装时授权的一类基本权限）。这类权限包括：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</div><div class="line">android.permission.ACCESS_NETWORK_STATE</div><div class="line">android.permission.ACCESS_NOTIFICATION_POLICY</div><div class="line">android.permission.ACCESS_WIFI_STATE</div><div class="line">android.permission.ACCESS_WIMAX_STATE</div><div class="line">android.permission.BLUETOOTH</div><div class="line">android.permission.BLUETOOTH_ADMIN</div><div class="line">android.permission.BROADCAST_STICKY</div><div class="line">android.permission.CHANGE_NETWORK_STATE</div><div class="line">android.permission.CHANGE_WIFI_MULTICAST_STATE</div><div class="line">android.permission.CHANGE_WIFI_STATE</div><div class="line">android.permission.CHANGE_WIMAX_STATE</div><div class="line">android.permission.DISABLE_KEYGUARD</div><div class="line">android.permission.EXPAND_STATUS_BAR</div><div class="line">android.permission.FLASHLIGHT</div><div class="line">android.permission.GET_ACCOUNTS</div><div class="line">android.permission.GET_PACKAGE_SIZE</div><div class="line">android.permission.INTERNET</div><div class="line">android.permission.KILL_BACKGROUND_PROCESSES</div><div class="line">android.permission.MODIFY_AUDIO_SETTINGS</div><div class="line">android.permission.NFC</div><div class="line">android.permission.READ_SYNC_SETTINGS</div><div class="line">android.permission.READ_SYNC_STATS</div><div class="line">android.permission.RECEIVE_BOOT_COMPLETED</div><div class="line">android.permission.REORDER_TASKS</div><div class="line">android.permission.REQUEST_INSTALL_PACKAGES</div><div class="line">android.permission.SET_TIME_ZONE</div><div class="line">android.permission.SET_WALLPAPER</div><div class="line">android.permission.SET_WALLPAPER_HINTS</div><div class="line">android.permission.SUBSCRIBED_FEEDS_READ</div><div class="line">android.permission.TRANSMIT_IR</div><div class="line">android.permission.USE_FINGERPRINT</div><div class="line">android.permission.VIBRATE</div><div class="line">android.permission.WAKE_LOCK</div><div class="line">android.permission.WRITE_SYNC_SETTINGS</div><div class="line">com.android.alarm.permission.SET_ALARM</div><div class="line">com.android.launcher.permission.INSTALL_SHORTCUT</div><div class="line">com.android.launcher.permission.UNINSTALL_SHORTCUT</div></pre></td></tr></table></figure>
<p>只需要在AndroidManifest.xml中简单声明这些权限就好，安装时就授权。不需要每次使用时都检查权限，而且用户不能取消以上授权。</p>
<h2 id="让你的app支持新运行时权限"><a href="#让你的app支持新运行时权限" class="headerlink" title="让你的app支持新运行时权限"></a>让你的app支持新运行时权限</h2><p>是时候让我们的app支持新权限模型了，从设置<strong>compileSdkVersion</strong> and <strong>targetSdkVersion</strong> 为 23开始吧.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    ...</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        targetSdkVersion 23</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>例子，我想用以下方法添加联系人。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">privatestaticfinal String TAG = &quot;Contacts&quot;;</div><div class="line">privatevoid insertDummyContact() &#123;</div><div class="line">// Two operations are needed to insert a new contact.</div><div class="line">    ArrayList operations = new ArrayList(2);</div><div class="line"></div><div class="line">// First, set up a new raw contact.</div><div class="line">    ContentProviderOperation.Builder op =</div><div class="line">            ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)</div><div class="line">                    .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)</div><div class="line">                    .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);</div><div class="line">    operations.add(op.build());</div><div class="line"></div><div class="line">// Next, set the name for the contact.</div><div class="line">    op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)</div><div class="line">            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)</div><div class="line">            .withValue(ContactsContract.Data.MIMETYPE,</div><div class="line">                    ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)</div><div class="line">            .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,</div><div class="line">&quot;__DUMMY CONTACT from runtime permissions sample&quot;);</div><div class="line">    operations.add(op.build());</div><div class="line"></div><div class="line">// Apply the operations.</div><div class="line">    ContentResolver resolver = getContentResolver();</div><div class="line">try &#123;</div><div class="line">        resolver.applyBatch(ContactsContract.AUTHORITY, operations);</div><div class="line">    &#125; catch (RemoteException e) &#123;</div><div class="line">        Log.d(TAG, &quot;Could not add a new contact: &quot; + e.getMessage());</div><div class="line">    &#125; catch (OperationApplicationException e) &#123;</div><div class="line">        Log.d(TAG, &quot;Could not add a new contact: &quot; + e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码需要WRITE_CONTACTS权限。如果不询问授权，app就崩了。<br>下一步像以前一样在AndroidManifest.xml添加声明权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission  android:name=&quot;android.permission.WRITE_CONTACTS&quot;/&gt;</div></pre></td></tr></table></figure>
<p>下一步，不得不再写个方法检查有没有权限。如果没有弹个对话框询问用户授权。然后你才可以下一步创建联系人。<br>权限被分组了，如下表：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-52d385bb509f5ba1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>同一组的任何一个权限被授权了，其他权限也自动被授权。例如，一旦WRITE_CONTACTS被授权了，app也有READ_CONTACTS和GET_ACCOUNTS权限了。<br>源码中被用来检查和请求权限的方法分别是Activity的checkSelfPermission和requestPermissions。这些方法在api23引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">finalprivateint REQUEST_CODE_ASK_PERMISSIONS = 123;</div><div class="line"></div><div class="line">privatevoid insertDummyContactWrapper() &#123;</div><div class="line">int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果已有权限，insertDummyContact()会执行。否则，requestPermissions被执行来弹出请求授权对话框，如下：</p>
<p>不论用户同意还是拒绝，activity的onRequestPermissionsResult会被回调来通知结果（通过第三个参数），grantResults,如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">publicvoid onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">switch (requestCode) &#123;</div><div class="line">caseREQUEST_CODE_ASK_PERMISSIONS:</div><div class="line">if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">// Permission Granted</div><div class="line">                insertDummyContact();</div><div class="line">            &#125; else &#123;</div><div class="line">// Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;WRITE_CONTACTS Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">break;</div><div class="line">        default:</div><div class="line">super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是新权限模型工作过程。代码真复杂但是只能去习惯它。。。为了让app很好兼容新权限模型，你不得不用以上类似方法处理所有需要的情况。<br>如果你想捶墙，现在是时候了。。。</p>
<h2 id="处理-“不再提醒”"><a href="#处理-“不再提醒”" class="headerlink" title="处理 “不再提醒”"></a>处理 “不再提醒”</h2><p>如果用户拒绝某授权。下一次弹框，用户会有一个“不再提醒”的选项的来防止app以后继续请求授权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-c79ef49ce512ed84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>如果这个选项在拒绝授权前被用户勾选了。下次为这个权限请求requestPermissions时，对话框就不弹出来了，结果就是，app啥都不干。<br>这将是很差的用户体验，用户做了操作却得不到响应。这种情况需要好好处理一下。在请求requestPermissions前，我们通过activity的shouldShowRequestPermissionRationale方法来检查是否需要弹出请求权限的提示对话框，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">final private int REQUEST_CODE_ASK_PERMISSIONS = 123;</div><div class="line"></div><div class="line">private void insertDummyContactWrapper() &#123;</div><div class="line">int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_CONTACTS)) &#123;</div><div class="line">                showMessageOKCancel(&quot;You need to allow access to Contacts&quot;,</div><div class="line">new DialogInterface.OnClickListener() &#123;</div><div class="line">@Override</div><div class="line">publicvoid onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                                requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                                        REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">return;</div><div class="line">            &#125;</div><div class="line">        requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) &#123;</div><div class="line">new AlertDialog.Builder(MainActivity.this)</div><div class="line">            .setMessage(message)</div><div class="line">            .setPositiveButton(&quot;OK&quot;, okListener)</div><div class="line">            .setNegativeButton(&quot;Cancel&quot;, null)</div><div class="line">            .create()</div><div class="line">            .show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个权限第一次被请求和用户标记过不再提醒的时候,我们写的对话框被展示。<br>最后一种情况，onRequestPermissionsResult 会收到PERMISSION_DENIED ，系统询问对话框不展示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-4b5fe5ae89720b96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>搞定！</p>
<h2 id="一次请求多个权限"><a href="#一次请求多个权限" class="headerlink" title="一次请求多个权限"></a>一次请求多个权限</h2><p>当然了有时候需要好多权限，可以用上面方法一次请求多个权限。不要忘了为每个权限检查“不再提醒”的设置。<br>修改后的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;</div><div class="line"></div><div class="line">private void insertDummyContactWrapper() &#123;</div><div class="line">    List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))</div><div class="line">        permissionsNeeded.add(&quot;GPS&quot;);</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))</div><div class="line">        permissionsNeeded.add(&quot;Read Contacts&quot;);</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.WRITE_CONTACTS))</div><div class="line">        permissionsNeeded.add(&quot;Write Contacts&quot;);</div><div class="line"></div><div class="line">    if (permissionsList.size() &gt; 0) &#123;</div><div class="line">        if (permissionsNeeded.size() &gt; 0) &#123;</div><div class="line">            // Need Rationale</div><div class="line">            String message = &quot;You need to grant access to &quot; + permissionsNeeded.get(0);</div><div class="line">            for (int i = 1; i &lt; permissionsNeeded.size(); i++)</div><div class="line">                message = message + &quot;, &quot; + permissionsNeeded.get(i);</div><div class="line">            showMessageOKCancel(message,</div><div class="line">                    new DialogInterface.OnClickListener() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),</div><div class="line">                                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),</div><div class="line">                REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean addPermission(List&lt;String&gt; permissionsList, String permission) &#123;</div><div class="line">    if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        permissionsList.add(permission);</div><div class="line">        // Check for Rationale Option</div><div class="line">        if (!shouldShowRequestPermissionRationale(permission))</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果所有权限被授权，依然回调onRequestPermissionsResult，我用hashmap让代码整洁便于阅读。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">publicvoid onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">switch (requestCode) &#123;</div><div class="line">caseREQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:</div><div class="line">            &#123;</div><div class="line">            Map perms = new HashMap();</div><div class="line">// Initial</div><div class="line">            perms.put(Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);</div><div class="line">            perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);</div><div class="line">            perms.put(Manifest.permission.WRITE_CONTACTS, PackageManager.PERMISSION_GRANTED);</div><div class="line">// Fill with results</div><div class="line">for (int i = 0; i &lt; permissions.length; i++)</div><div class="line">                perms.put(permissions[i], grantResults[i]);</div><div class="line">// Check for ACCESS_FINE_LOCATION</div><div class="line">if (perms.get(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED</div><div class="line">                    &amp;&amp; perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED</div><div class="line">                    &amp;&amp; perms.get(Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">// All Permissions Granted</div><div class="line">                insertDummyContact();</div><div class="line">            &#125; else &#123;</div><div class="line">// Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;Some Permission is Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">break;</div><div class="line">        default:</div><div class="line">super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>条件灵活的，你自己设置。有的情况，一个权限没有授权，就不可用；但是也有情况，能工作，但是表现的是有所限制的。对于这个我不做评价，你自己设计吧。</p>
<h2 id="用兼容库使代码兼容旧版"><a href="#用兼容库使代码兼容旧版" class="headerlink" title="用兼容库使代码兼容旧版"></a>用兼容库使代码兼容旧版</h2><p>以上代码在android 6.0以上运行没问题，但是23 api之前就不行了，因为没有那些方法。<br>粗暴的方法是检查版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">// Marshmallow+</div><div class="line">&#125; else &#123;</div><div class="line">// Pre-Marshmallow</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是太复杂，我建议用v4兼容库，已对这个做过兼容，用这个方法代替：</p>
<ul>
<li>ContextCompat.checkSelfPermission()<br>被授权函数返回PERMISSION_GRANTED，否则返回PERMISSION_DENIED ，在所有版本都是如此。</li>
<li>ActivityCompat.requestPermissions()<br>这个方法在M之前版本调用，OnRequestPermissionsResultCallback 直接被调用，带着正确的 PERMISSION_GRANTED或者 PERMISSION_DENIED 。</li>
<li>ActivityCompat.shouldShowRequestPermissionRationale()<br>在M之前版本调用，永远返回false。<br>用v4包的这三方法，完美兼容所有版本！这个方法需要额外的参数，Context or Activity。别的就没啥特别的了。下面是代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private void insertDummyContactWrapper()&#123;</div><div class="line">int hasWriteContactsPermission = ContextCompat.checkSelfPermission(MainActivity.this,</div><div class="line">            Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">if (!ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,Manifest.permission.WRITE_CONTACTS)) &#123;</div><div class="line">            showMessageOKCancel(&quot;You need to allow access to Contacts&quot;,new DialogInterface.OnClickListener() &#123;</div><div class="line">@Override</div><div class="line">public void onClick (DialogInterface dialog, int which)&#123;</div><div class="line">                            ActivityCompat.requestPermissions(MainActivity.this,new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                                    REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">return;</div><div class="line">        &#125;</div><div class="line">        ActivityCompat.requestPermissions(MainActivity.this,</div><div class="line">new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后两个方法，我们也可以在Fragment中使用，用v13兼容包：FragmentCompat.requestPermissions() and FragmentCompat.shouldShowRequestPermissionRationale()和activity效果一样。</p>
<h2 id="第三方库简化代码"><a href="#第三方库简化代码" class="headerlink" title="第三方库简化代码"></a>第三方库简化代码</h2><p>以上代码真尼玛复杂。为解决这事，有许多第三方库已经问世了，真66溜真有速度。我试了很多最终找到了个满意的<a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">hotchemi’s PermissionsDispatcher</a>。<br>他和我上面做的一样，只是简化了代码。灵活易扩展，试一下吧。如果不满足你可以找些其他的。</p>
<h2 id="如果我的app还开着呢，权限被撤销了，会发生生么"><a href="#如果我的app还开着呢，权限被撤销了，会发生生么" class="headerlink" title="如果我的app还开着呢，权限被撤销了，会发生生么"></a>如果我的app还开着呢，权限被撤销了，会发生生么</h2><p>权限随时可以被撤销。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-f7bd9b68fd7bf84a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>当app开着的时候被撤消了会发生什么呢？我试过了发现这时app会突然终止 terminated。app中的一切都被简单粗暴的停止了，因为terminated！对我来说这可以理解，因为系统如果允许它继续运行（没有某权限），这会召唤弗雷迪到我的噩梦里。或许更糟…</p>
<h2 id="结论建议"><a href="#结论建议" class="headerlink" title="结论建议"></a>结论建议</h2><p>我相信你对新权限模型已经有了清晰的认识。我相信你也意识到了问题的严峻。<br>但是你没得选择。新运行时权限已经在棉花糖中被使用了。我们没有退路。我们现在唯一能做的就是保证app适配新权限模型.<br>欣慰的是只有少数权限需要运行时权限模型。大多数常用的权限，例如，网络访问，属于Normal Permission 在安装时自动会授权，当然你要声明，以后无需检查。因此，只有少部分代码你需要修改。<br>两个建议：</p>
<ol>
<li>严肃对待新权限模型</li>
<li>如果你代码没支持新权限，不要设置targetSdkVersion 23 。尤其是当你在Studio新建工程时，不要忘了修改！</li>
</ol>
<p>说一下代码修改。这是大事，如果代码结构被设计的不够好，你需要一些很蛋疼的重构。每个app都要被修正。如上所说，我们没的选择。。。<br>列出所有你需要请求的权限所有情形，如果A被授权，B被拒绝，会发生什么。blah，blah。<br>祝重构顺利。把它列为你需要做的大事，从现在就开始着手做，以保证M正式发布的时候没有问题。<br>希望本文对你有用，快乐编码！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-6-0-新的运行时权限-开发者需要知道的一切&quot;&gt;&lt;a href=&quot;#Android-6-0-新的运行时权限-开发者需要知道的一切&quot; class=&quot;headerlink&quot; title=&quot;Android 6.0+新的运行时权限 开发者需要知道的一切&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Material主题Github博客</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/%E5%9F%BA%E4%BA%8EHexo%E5%88%9B%E5%BB%BAMaterial%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/基于Hexo创建Material主题的博客网站/</id>
    <published>2017-02-26T14:48:27.000Z</published>
    <updated>2017-02-27T12:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前文中刚有提到怎样基于Hexo搭建github博客，在此不赘述。本文主要讲解安装Material主题。</p>
</blockquote>
<h3 id="强烈建议点击看原文，原文排版及内容都优于本文！！！"><a href="#强烈建议点击看原文，原文排版及内容都优于本文！！！" class="headerlink" title="强烈建议点击看原文，原文排版及内容都优于本文！！！"></a>强烈建议点击看原文，原文排版及内容都优于本文！！！</h3><h3 id="原文地址-https-material-viosey-com"><a href="#原文地址-https-material-viosey-com" class="headerlink" title="原文地址:https://material.viosey.com/"></a><strong><a href="https://material.viosey.com/" target="_blank" rel="external">原文地址:https://material.viosey.com/</a></strong></h3><p>在 Hexo 中，通常有两份配置文件，一个是站点根目录下的 <code>_config.yml</code>；另外一个是主题目录下的 <code>_config.yml</code>。为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</p>
<h2 id="安装「Material」"><a href="#安装「Material」" class="headerlink" title="安装「Material」"></a>安装「Material」</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件放置于站点目录的 <code>themes</code> 目录下，然后修改下配置文件即可。<br>具体到 Material 来说，有 <code>Github</code> 和 <code>NPM</code> 两种方式。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote>
<p>可以选择 克隆 或者 下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="external">稳定的发布版本</a>。</p>
</blockquote>
<p>为了方便之后的更新，建议使用 <strong>克隆</strong> 的方式。克隆命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site/themes</div><div class="line">$ git clone https://github.com/viosey/hexo-theme-material.git material</div></pre></td></tr></table></figure>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-material</div></pre></td></tr></table></figure>
<p>该方式会把 Material 主题下载到 <code>hexo</code> 目录下的 <code>node_modules</code> 文件夹中。<br>找到 <code>hexo-material</code> 文件夹，然后把文件复制到 <code>themes</code> 目录中的 <code>Material</code> 主题文件夹里。</p>
<h2 id="启用「Material」"><a href="#启用「Material」" class="headerlink" title="启用「Material」"></a>启用「Material」</h2><p>克隆完成后，修改主题文件夹名称，将其改为 <code>material</code> 。<br>然后打开 <strong>站点配置文件</strong>，找到 <code>theme</code> 字段，并将其值更改为 <code>material</code> 。</p>
<blockquote>
<p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code> 字段与之对应即可。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code>，并访问 <code>http://localhost:4000</code>，确保站点正确运行。</p>
<h2 id="更新「Material」"><a href="#更新「Material」" class="headerlink" title="更新「Material」"></a>更新「Material」</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>即可拉取最新版本。</p>
<h3 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h3><p>NPM 更新有两种方式：</p>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm-update"></a>npm-update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update hexo-material</div></pre></td></tr></table></figure>
<p>然后将文件复制到 <code>Material</code> 主题文件夹中。</p>
<h4 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h4><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="external">npm-check</a> 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。</p>
<p>安装 npm-check：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npm-check</div></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm-check hexo-material</div></pre></td></tr></table></figure>
<p>使用空格键可以选择需要处理的包，回车直接进行处理。</p>
<h2 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>编辑 <strong>站点配置文件</strong>，将 <code>language</code> 设置成你所需要的语言。<br>可用的语言如下：</p>
<ul>
<li>العَرَبِيَّة (ar)</li>
<li>English (en)</li>
<li>Español (es)</li>
<li>Français (fr)</li>
<li>Deutsche (de)</li>
<li>日本語 (ja)</li>
<li>Malay (ms)</li>
<li>简体中文 (zh-CN)</li>
<li>繁體中文 (zh-TW)</li>
</ul>
<blockquote>
<p>例如：选用繁體中文，则配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; language: zh-TW</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>编辑 <strong>站点配置文件</strong>，<code>url</code> 填写主域名，<code>root</code> 填写 子目录/根域名</p>
<blockquote>
<p>例如：站点域名为 <code>http://example.com/hexo</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; url: http://example.com</div><div class="line">&gt; root: /hexo</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>若你的站点没有运行在子目录中，则 <code>root</code> 填写为 <code>/</code>。</p>
<h3 id="作者名称"><a href="#作者名称" class="headerlink" title="作者名称"></a>作者名称</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述设置"><a href="#站点描述设置" class="headerlink" title="站点描述设置"></a>站点描述设置</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>，配置方式如插件 <code>README.md</code> 所示。<br>然后在 <a href="https://material.viosey.com/intro/#url" target="_blank" rel="external">url: rss</a> 中添加生成的 feed 路径。</p>
<h2 id="分支「Scheme」介绍"><a href="#分支「Scheme」介绍" class="headerlink" title="分支「Scheme」介绍"></a>分支「Scheme」介绍</h2><p>Material 主题提供了多种分支主题外观，亦称「Scheme」。<br>目前 Material 支持三种 Scheme：</p>
<h3 id="Nexus（开发中）"><a href="#Nexus（开发中）" class="headerlink" title="Nexus（开发中）"></a>Nexus（开发中）</h3><p>最为标准的 Material Design 样式。</p>
<h3 id="Paradox"><a href="#Paradox" class="headerlink" title="Paradox"></a>Paradox</h3><p>默认 Scheme，是 Material 的最初样式。居中布局，图文并茂。</p>
<h3 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h3><p>Paradox 的至简样式，简洁明了。</p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 <code>scheme</code> 关键字。 你会看到有几行 scheme 的配置，将你需用启用的 scheme 去掉前面注释 <code>#</code> 即可。</p>
<blockquote>
<p>例如 - 选择 Paradox Scheme</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; #scheme: Nexus</div><div class="line">&gt; scheme: Paradox</div><div class="line">&gt; #scheme: Isolation</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="主题配置文件介绍"><a href="#主题配置文件介绍" class="headerlink" title="主题配置文件介绍"></a>主题配置文件介绍</h2><h3 id="Site-Information"><a href="#Site-Information" class="headerlink" title="Site Information"></a>Site Information</h3><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>用于配置生成的 HTML 文件的头部信息。</p>
<ul>
<li>favicon</li>
<li>high_res_favicon: 高清 favicon</li>
<li>high_res_favicon: iOS 主屏按钮图标</li>
<li>keywords: 网站关键词</li>
</ul>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>用于设置跳转链接。</p>
<ul>
<li>rss: 设置生成的 rss 或 atom url。</li>
<li>daily_pic: 设置 <code>daily_pic</code> 模块 跳转 url。</li>
<li>logo: 设置 logo 的跳转 url。</li>
</ul>
<h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><h4 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h4><p>如果要使用其中一个主题，将前面的注释 <code>#</code> 去掉即可。</p>
<p>比如，选择使用 Paradox Scheme，只需要这样配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#scheme: Nexus</div><div class="line">scheme: Paradox</div><div class="line">#scheme: Isolation</div></pre></td></tr></table></figure>
<h4 id="uiux"><a href="#uiux" class="headerlink" title="uiux"></a>uiux</h4><p>用于设置主题 UI 与 UX。</p>
<ul>
<li>slogan: 显示在 <code>blog_info</code> 模块中的标语，现在可以设置多行标语：</li>
</ul>
<blockquote>
<p>单行标语使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; slogan: 标语</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>多行标语使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; slogan:</div><div class="line">&gt;  - &quot;标语第一行&quot;</div><div class="line">&gt;  - &quot;标语第二行&quot;</div><div class="line">&gt;  - &quot;标语第三行&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<ul>
<li>theme_color: 主题主要颜色。大部分地方使用此颜色。</li>
<li>theme_sub_color: 主题辅助颜色。</li>
<li>hyperlink_color: 超链接颜色。</li>
<li>button_color: 按钮颜色，例如 <code>toTop</code> 或 <code>menu_button</code>。</li>
<li>android_chrome_color: 安卓 Chrome 浏览器地址栏颜色。</li>
<li>nprogress_color: 页面加载时顶部加载进度条的颜色。</li>
<li>nprogress_buffer: 页面加载时顶部加载进度条的缓冲。</li>
</ul>
<h4 id="js-effect"><a href="#js-effect" class="headerlink" title="js_effect"></a>js_effect</h4><p>用来控制 Material 主题中自带的多种 js 特性。</p>
<ul>
<li>fade: 页面加载时部分模块的渐显效果。默认为 true。</li>
<li>smoothscroll: 页面平滑滚动特效。默认为 false。</li>
</ul>
<h4 id="reading"><a href="#reading" class="headerlink" title="reading"></a>reading</h4><p>用于设置阅读体验。</p>
<ul>
<li>entry_excerpt: 首页文章输出摘要的字符长度。默认为80。</li>
</ul>
<h4 id="thumbnail"><a href="#thumbnail" class="headerlink" title="thumbnail"></a>thumbnail</h4><p>用于设置文章缩略图相关。</p>
<ul>
<li>purecolor: 填入颜色代码。如果文章内无设置缩略图，此项又不为空，则使用纯色缩略图。</li>
<li>random_amount: 随机图片数量，根据 <code>主题文件夹 -&gt; source -&gt; img -&gt; random</code> 中的图片数量设置。</li>
</ul>
<h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><p>用于设置站点背景。</p>
<ul>
<li>purecolor: 填入颜色代码。则站点使用纯色背景。</li>
<li>bgimg: 背景地址，默认调用 <code>主题文件夹 -&gt; source -&gt; img</code> 中的 <code>bg.png</code>。可更换此图片或者自己填入 url。</li>
<li>bing: 用于启用 bing 图片。<ul>
<li><code>parameter</code> 参数可用：<code>new</code>, <code>color=</code>, <code>type=</code>。</li>
<li><code>color=</code>: black, blue, brown, green, multi, orange, pink, purple, red, white, yellow。</li>
<li><code>type=</code>: A (animal), C (culture), N (nature), S (space), T (travel)。</li>
</ul>
</li>
</ul>
<h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><p>用于设置站点图片。</p>
<ul>
<li>logo: 显示于 <code>blog_info</code> 模块中。</li>
<li>avatar: 你的头像设置。</li>
<li>daily_pic: 显示于 <code>daily_pic</code> 模块中。</li>
<li>sidebar_header: 显示于 <code>sidebar</code> 顶部。</li>
<li>footerico: 设置 <code>footer</code> 中 SNS 图标的路径。</li>
<li>random_thumbnail: 随机缩略图的路径。</li>
<li>footer_image: 你可以在侧边栏底部放置任何你想要的图片。</li>
</ul>
<p>比如，你可以这样配置 又拍云 Logo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">footer_image:</div><div class="line">    upyun_logo:</div><div class="line">        link: &quot;https://www.upyun.com/&quot;</div><div class="line">        src: &quot;/img/upyun_logo.png&quot;</div></pre></td></tr></table></figure>
<h4 id="fonts"><a href="#fonts" class="headerlink" title="fonts"></a>fonts</h4><p>用于设置站点的字体。</p>
<p>默认值为 <code>Roboto, &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;, Arial, sans-serif</code></p>
<blockquote>
<p>该字体设定较为规范，如无特殊要求 无需额外修改。</p>
</blockquote>
<h4 id="card-elevation"><a href="#card-elevation" class="headerlink" title="card_elevation"></a>card_elevation</h4><p>用于设置文章列表的卡片阴影，如无特殊要求 无需额外修改。</p>
<h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><h4 id="sns"><a href="#sns" class="headerlink" title="sns"></a>sns</h4><p>用于填写你的 SNS 信息，除了 <code>email</code>，其他信息会以按钮的形式显示在 <code>footer</code>。</p>
<ul>
<li>email: 显示在侧边栏中。</li>
<li>twitter</li>
<li>facebook</li>
<li>googleplus</li>
<li>weibo</li>
<li>instagram</li>
<li>tumblr</li>
<li>github</li>
<li>linkedin</li>
<li>facebook</li>
</ul>
<h4 id="sns-share"><a href="#sns-share" class="headerlink" title="sns_share"></a>sns_share</h4><p>用于定义分享菜单中的项目， <code>false</code> 的项将不会显示在分享菜单中。</p>
<ul>
<li>twitter</li>
<li>googleplus</li>
<li>weibo</li>
<li>linkedin</li>
<li>qq</li>
<li>telegram</li>
</ul>
<h4 id="dropdown"><a href="#dropdown" class="headerlink" title="dropdown"></a>dropdown</h4><p>用于设置 Paradox 侧边栏用户下拉菜单，默认为空。</p>
<p>以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	link: &quot;/link/&quot;</div><div class="line">	icon: icon</div></pre></td></tr></table></figure>
<p>作为一个单位。</p>
<p><code>Name</code> 是该独立页面的名称，请自行修改。<br><code>link</code> 的参数为相对路径，对应 hexo 目录下的 <code>source</code> 文件夹内的相应文件夹。<br><code>icon</code> 的参数为自定义的 Material 图标，可用图标可在 <a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a> 查询。</p>
<blockquote>
<p>参考配置样式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dropdown:</div><div class="line">    Email Me:</div><div class="line">        link: &quot;#&quot;</div><div class="line">        icon: email</div></pre></td></tr></table></figure>
<h5 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h5><p>设置 “主页” 按钮</p>
<ul>
<li><code>use</code>: 设置 <code>true</code> 时会在侧边栏显示 “主页” 按钮.</li>
<li><code>icon</code>: 在 “主页” 前面显示一个 Material 图标。为空和被注释时则不显示.</li>
<li><code>divider</code>: 设置成 <code>true</code></li>
</ul>
<h5 id="archives"><a href="#archives" class="headerlink" title="archives"></a>archives</h5><p>用来设置归档下拉菜单。</p>
<ul>
<li><code>use</code>: 设置成 <code>true</code> 时在侧边栏显示归档。</li>
<li><code>icon</code>: 为归档添加一个 Material Icon，注释掉或为空则不显示 Icon</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在归档按钮底部增加一条分割线。</li>
</ul>
<h5 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h5><p>用来设置分类显示按钮。</p>
<ul>
<li><code>use</code>: 设为 <code>true</code> 在侧边栏显示分类按钮。</li>
<li><code>icon</code>: 在分类按钮前显示一个 Material Icon，注释掉或为空则不显示 Icon</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在归档按钮底部增加一条分割线。</li>
</ul>
<h5 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h5><p>用于设置独立页面，默认为空。填写条目后独立页面入口将显示在：</p>
<ul>
<li><code>logo card</code> <code>Page</code> 按钮的下拉菜单中。(Scheme Paradox)</li>
<li>侧边栏中。(Scheme Paradox)</li>
<li>站点左侧。(Scheme Isolation)</li>
</ul>
<p>请按照如下样例添加个人独立页面。 <code>divider</code> 设置成 <code>true</code> 后会在该条目底部增加一条分割线。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pages:</div><div class="line">    About:</div><div class="line">        link: &quot;#about&quot;</div><div class="line">        icon: person</div><div class="line">        divider: false</div><div class="line">    timeline archive:</div><div class="line">        link: &quot;/timeline/&quot;</div><div class="line">        icon:</div><div class="line">        divider: false</div></pre></td></tr></table></figure>
<h5 id="article-num"><a href="#article-num" class="headerlink" title="article_num"></a>article_num</h5><p>Used to display the number of articles.</p>
<ul>
<li><code>use</code>: 设置成 <code>true</code> 时会在侧边栏显示文章总数。</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在该条目底部增加一条分割线。</li>
</ul>
<h5 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h5><p>Used to customize the sidebar footer.</p>
<ul>
<li><code>divider</code>: 设置成 <code>true</code> 后会在侧边栏底部之前增加一条分割线。</li>
<li><code>theme</code>: 设置成 <code>true</code> 后会在侧边栏底部增加一个指向 Material 主题的链接。</li>
</ul>
<h4 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a>qrcode</h4><p>用于在文章页中显示二维码，扫描二维码即可直接打开文章。<br>需要 hexo-helper-qrcode 支持，使用 <code>npm install hexo-helper-qrcode --save</code> 进行安装。</p>
<h4 id="topPost（开发中）"><a href="#topPost（开发中）" class="headerlink" title="topPost（开发中）"></a>topPost（开发中）</h4><p>使用该插件可以将指定文章置顶。<br>如果您需要这个功能，请使用 <code>npm install hexo-helper-post-top --save</code> 安装支持插件，然后将这个开关设置为 <code>true</code>。<br>之后在您需要置顶文章的 <code>front-matter</code> 中，添加 <code>top: true</code> 即可置顶。</p>
<h3 id="Integrated-Services"><a href="#Integrated-Services" class="headerlink" title="Integrated Services"></a>Integrated Services</h3><h4 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h4><p>用于于设置评论系统。</p>
<p>具体设置参考 <a href="https://material.viosey.com/services/#评论系统" target="_blank" rel="external">评论系统</a></p>
<p>目前可使用 <code>duoshuo</code> <code>disqus</code> 和 <code>disqus_click</code>。</p>
<blockquote>
<p>使用 Disqus_Click 时，页面不会主动加载 Disqus 评论，直到按下按钮。这项设置有助于改善处在 <code>公开、平等、有序 的中国互联网环境</code> 下的浏览者体验。</p>
</blockquote>
<ul>
<li>use:</li>
<li>shortname:</li>
<li>duoshuo_thread_key_type: 用于设置多说 tread key 的使用，默认为 <code>path</code>，可设置为 <code>id</code>。</li>
<li>duoshuo_embed_js_url: 多说 js。</li>
</ul>
<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>用于设置搜索系统。</p>
<p>具体设置参考 <a href="https://material.viosey.com/services/#搜索系统" target="_blank" rel="external">搜索系统</a></p>
<p>目前可使用 <code>google</code> <code>swiftype</code> <code>local</code>。</p>
<ul>
<li>use</li>
<li>swiftype_key</li>
</ul>
<h4 id="analytics"><a href="#analytics" class="headerlink" title="analytics"></a>analytics</h4><p>用于设置访客分析服务，支持 <code>Google Analysis</code> 和 <code>百度站长工具</code></p>
<ul>
<li><code>baidu_id</code>: 百度 ID</li>
<li><code>google_id</code>: Google Analysis 密钥</li>
</ul>
<h4 id="leancloud"><a href="#leancloud" class="headerlink" title="leancloud"></a>leancloud</h4><p>具体设置参考 <a href="https://material.viosey.com/services/#Leancloud" target="_blank" rel="external">设置 Leancloud 浏览次数统计</a></p>
<ul>
<li>enable: 默认为 false。</li>
<li>app_id: APP ID。</li>
<li>app_key: APP Key。</li>
<li>av_core_mini: 统计 js。</li>
</ul>
<h4 id="busuanzi"><a href="#busuanzi" class="headerlink" title="busuanzi"></a>busuanzi</h4><p>具体设置参考 <a href="https://material.viosey.com/services/#不蒜子" target="_blank" rel="external">不蒜子</a></p>
<ul>
<li>enable: 默认为 false。</li>
<li>all_site_uv: 默认为 false。</li>
<li>post_pv: 默认为 false。</li>
<li>busuanzi_pure_mini_js: 统计 js。</li>
</ul>
<h2 id="主要协助开发者"><a href="#主要协助开发者" class="headerlink" title="主要协助开发者"></a>主要协助开发者</h2><p><a href="https://github.com/viosey/hexo-theme-material/graphs/contributors" target="_blank" rel="external">Github - Contributors</a></p>
<ul>
<li><a href="https://github.com/neoFelhz" target="_blank" rel="external">neoFelhz</a></li>
<li><a href="https://github.com/pidupuis" target="_blank" rel="external">pidupuis</a></li>
<li><a href="https://github.com/cubesky" target="_blank" rel="external">cubesky</a></li>
<li><a href="https://github.com/AkarinServer" target="_blank" rel="external">AkarinServer</a></li>
</ul>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><h3 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &lt;title&gt;</div></pre></td></tr></table></figure>
<h3 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h3><p>在 hexo 主目录下 <code>source -&gt; _posts</code> 新建以 <code>.md</code> 为后缀的文件。</p>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter - 官方介绍</a></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
<td>post</td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td>文件名</td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
<tr>
<td><code>thumbnail</code></td>
<td>缩略图地址</td>
<td></td>
</tr>
<tr>
<td><code>toc</code></td>
<td>显示 TOC 按钮</td>
<td>true</td>
</tr>
<tr>
<td><code>comment</code></td>
<td>显示评论</td>
<td>true</td>
</tr>
<tr>
<td><code>notag</code></td>
<td>不生成标签按钮</td>
<td>false</td>
</tr>
<tr>
<td><code>top</code></td>
<td>置顶</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>注1：置顶功能请参考 <a href="https://material.viosey.com/intro/#topPost" target="_blank" rel="external">topPost</a></p>
<h3 id="缩略图功能"><a href="#缩略图功能" class="headerlink" title="缩略图功能"></a>缩略图功能</h3><p>在 Material 主题中，每个 Scheme 都有缩略图功能。<br>只需要在 <code>Front-matter</code> 中添加参数 <code>thumbnail:</code>，然后填入缩略图地址即可。</p>
<h4 id="Paradox-1"><a href="#Paradox-1" class="headerlink" title="Paradox"></a>Paradox</h4><p>此 Scheme 如果没有自定义缩略图，则使用默认随机缩略图，随机缩略图目录位于主题文件夹下 <code>source -&gt; img -&gt; random</code>。<br>随机缩略图可添加自己喜好的图片，格式为 <code>.png</code> 。然后在 <strong>主题配置文件</strong> 中 <code>thumbnail:random_amount</code> 修改缩略图数量。</p>
<h4 id="Isolation-1"><a href="#Isolation-1" class="headerlink" title="Isolation"></a>Isolation</h4><p>此 Scheme 只会显示已自定义缩略图。</p>
<h2 id="创建「关于我」页面"><a href="#创建「关于我」页面" class="headerlink" title="创建「关于我」页面"></a>创建「关于我」页面</h2><p>新建一个 <code>about</code> 页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;about&quot;</div></pre></td></tr></table></figure>
<p>如果想添加「关于我」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h2 id="创建「友情链接」页面"><a href="#创建「友情链接」页面" class="headerlink" title="创建「友情链接」页面"></a>创建「友情链接」页面</h2><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>links</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: links</div><div class="line">date:</div><div class="line">layout: links</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「友情链接」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>同样在在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件。</p>
<p>单个友情链接的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">    link: http://example.com</div><div class="line">    avatar: http://example.com/avatar.png</div><div class="line">    descr: &quot;这是一个描述&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加多个友情链接，只需要根据上面的格式重复填写即可。</p>
</blockquote>
<ul>
<li>将 <code>Name</code> 改为友情链接的名字，例如 <code>Viosey</code>。</li>
<li><code>http://example.com</code> 为友情链接的地址。</li>
<li><code>http://example.com/avatar.png</code> 为友情链接的头像。</li>
<li><code>这是一个描述</code> 为友情链接描述。</li>
</ul>
<h2 id="创建「图库」页面"><a href="#创建「图库」页面" class="headerlink" title="创建「图库」页面"></a>创建「图库」页面</h2><h3 id="创建页面-1"><a href="#创建页面-1" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>gallery</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: gallery</div><div class="line">date:</div><div class="line">layout: gallery</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「图库」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h3 id="添加数据-1"><a href="#添加数据-1" class="headerlink" title="添加数据"></a>添加数据</h3><p>同样在在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>gallery.yml</code> 的文件。</p>
<p>单个图片的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	full_link: http://example.com/full-image.png</div><div class="line">	thumb_link: http://example.com/thumb-image.png</div><div class="line">	descr: &quot;这是一个描述&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加多张图片，只需要根据上面的格式重复填写即可。</p>
</blockquote>
<ul>
<li>将 <code>Name</code> 改为图片名字，例如 <code>Material</code>。</li>
<li><code>http://example.com/full-image.png</code> 为完整图片的地址。</li>
<li><code>http://example.com/thumb-image.png</code> 为图片缩略图的地址，如果没有缩略图也可使用完整图片的地址。</li>
<li><code>这是一个描述</code> 为图片描述。</li>
</ul>
<h2 id="创建「标签云」页面"><a href="#创建「标签云」页面" class="headerlink" title="创建「标签云」页面"></a>创建「标签云」页面</h2><h3 id="创建页面-2"><a href="#创建页面-2" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>tags</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date:</div><div class="line">layout: tags</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「标签云」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h2 id="创建「私有」页面"><a href="#创建「私有」页面" class="headerlink" title="创建「私有」页面"></a>创建「私有」页面</h2><p>如果某篇文章不想显示在站点中，只需要在 <code>front-matter</code> 中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">layout: private</div></pre></td></tr></table></figure>
<h2 id="添加自定义代码"><a href="#添加自定义代码" class="headerlink" title="添加自定义代码"></a>添加自定义代码</h2><p>如果想要在站点添加自定义 <code>font-face</code> 或者统计代码（例如 <code>Google Analytics</code>）。</p>
<p>需要在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 head.yml 的文件。</p>
<p>单个代码格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	&quot;put your code here&quot;</div></pre></td></tr></table></figure>
<p>代码将显示在 <code>` 之前，</code>Name` 将作为注释显示在代码上方。</p>
<h2 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h2><p><a href="https://material.google.com/style/color.html#color-color-palette" target="_blank" rel="external">Color palette</a></p>
<h2 id="Material-图标"><a href="#Material-图标" class="headerlink" title="Material 图标"></a>Material 图标</h2><p>用于自定义例如 <code>dropdown: icon</code> 的图标。</p>
<p><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a></p>
<h2 id="代码高亮样式"><a href="#代码高亮样式" class="headerlink" title="代码高亮样式"></a>代码高亮样式</h2><p>从 <code>1.3.0</code> 版本开始，您可以使用 <code>hexo-prism-plugin</code> 进行代码染色，具体文档请参阅<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="external">Hexo-Prism-Plugin 插件文档</a></p>
<p>在 <strong>主题配置文件</strong> 中定位到 <code>Integrated Services</code> 即可进行第三方服务的配置。</p>
<h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><h3 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h3><p>Material 内置了一套 多说 的 Material Design 样式。</p>
<p>使用 <a href="https://duoshuo.com/" target="_blank" rel="external">多说</a>，仅需在 <strong>主题配置文件</strong> 中填写 <code>comment: use:</code> 字段，值设置为 <code>&quot;duoshuo&quot;</code>。</p>
<p>然后在 <code>comment: shortname:</code> 填入你的多说 shortname</p>
<blockquote>
<p>主题的多说评论使用两种 <code>tread key</code>，使用方式参考：<a href="https://material.vss.im/intro/#comment" target="_blank" rel="external">comment</a>。<br>默认为文章的相对路径。<br>另一种为 id，需要在 <code>front-matter</code> 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; id: id_number</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<p>如果是从其他博客系统迁移过来，需要和多说后台的 Thread_Key 保持一致。</p>
<h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><p>使用 <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a>，仅需在 <strong>主题配置文件</strong> 中填写 <code>comment: use:</code> 字段，值设置为 <code>&quot;disqus&quot;</code> 或者 <code>&quot;disqus_click&quot;</code>。</p>
<p>然后在 <code>comment: shortname:</code> 填入你的 Disqus shortname</p>
<hr>
<p>需要注意的是此处的 <code>shortname</code> 不是你的登录的 id，是你的评论二级域名去掉 <code>.duoshuo.com</code> 或 <code>.disqus.com</code> 部分</p>
<blockquote>
<p>例如：多说域名 <code>example.duoshuo.com</code> / Disqus 域名 <code>example.disqus.com</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; shortname: example</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><p>阅读 <a href="https://material.viosey.com/intro/#comment" target="_blank" rel="external">Intro-comment</a> 搜索系统配置介绍。</p>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>调用 Google 搜索引擎对您的站点进行搜索。</p>
<p>在 <strong>主题配置文件</strong> 中修改 <code>search: use</code> 的值为 <code>google</code> 即可。</p>
<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>使用本地搜索需要安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 插件。<br>然后在 <code>站点配置</code> 文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">	path: search.xml</div><div class="line">	field: post</div></pre></td></tr></table></figure>
<h3 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h3><p>注册 <a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a>，然后在 <strong>主题配置文件</strong> 中修改 <code>search: use</code> 的值为 <code>swiftype</code>，并填入你的 <code>swiftype_key</code>。</p>
<blockquote>
<p>在你的 Swiftype Install Code 中，有这么一行代码 <code>_st(&#39;install&#39;,&#39;*****&#39;,&#39;2.0.0&#39;);</code></p>
<p><code>*****</code> 即为 <code>swiftype_key</code></p>
</blockquote>
<h2 id="浏览统计"><a href="#浏览统计" class="headerlink" title="浏览统计"></a>浏览统计</h2><h3 id="Leancloud"><a href="#Leancloud" class="headerlink" title="Leancloud"></a>Leancloud</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>打开 LeanCloud 官网，进入<a href="https://leancloud.cn/login.html#/signup" target="_blank" rel="external">注册页面</a>注册。完成邮箱激活后，点击头像，进入控制台页面，如下：</p>
<p><img src="https://qiniu.viosey.com/img/leancloud-config-1.png" alt="img"></p>
<h4 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h4><p>创建一个新应用 (默认类型为JavaScript SDK)，点击应用进入；</p>
<p>创建名称为 <code>Counter</code> 的 Class<br>注意：<code>ACL 权限</code> 必须为 <code>无限制</code><br><img src="https://qiniu.viosey.com/img/leancloud-config-2.png" alt="img"><br><img src="https://qiniu.viosey.com/img/leancloud-config-3.png" alt="img"></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>编辑 <code>主题配置文件</code> ，修改 <code>leancloud</code> 条目<br>将 <code>enable</code> 改为 <code>true</code>，再填入 <code>app_id</code> 与 <code>app_key</code>。</p>
<blockquote>
<p>在 <code>应用-&gt;设置-&gt;应用 Key</code> 可看到 <code>APP ID</code> 与 <code>APP Key</code>，</p>
</blockquote>
<h4 id="Web-安全性"><a href="#Web-安全性" class="headerlink" title="Web 安全性"></a>Web 安全性</h4><p>为了保证应用的统计计数功能仅应用于自己的博客系统，你可以在 <code>应用-&gt;设置-&gt;安全中心</code> 的Web安全域名中加入自己的博客域名，以保证数据的调用安全。</p>
<h3 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h3><p>使用 不蒜子 浏览次数统计，仅需在 <strong>主题配置文件</strong> 中将 <code>busuanzi: enable:</code> 的值设置为 <code>true</code>。</p>
<p>其中：</p>
<ul>
<li><code>all_site_uv</code> 可统计全站的独立访客人数，即可在 <code>blog_info</code> 模块的 <code>Menu</code> 菜单中看到。</li>
<li><code>post_pv</code> 统计每篇文章的页面浏览次数，在文章页的 <code>分享按钮</code> 菜单中可看到。</li>
<li><code>busuanzi_pure_mini_js</code> 调用不蒜子统计 js 文件，可将改文件放到自己的 CDN 然后修改值。</li>
</ul>
<h2 id="捐赠是什么？"><a href="#捐赠是什么？" class="headerlink" title="捐赠是什么？"></a>捐赠是什么？</h2><p>捐赠是国外用来支持开发者和资源贡献者的一种常见的方式。这些开发者不通过加入广告或者进行第三方推广获得收入，仅通过使用的用户自己主动捐赠来表达对开发者的感谢。</p>
<h2 id="为什么要捐赠？"><a href="#为什么要捐赠？" class="headerlink" title="为什么要捐赠？"></a>为什么要捐赠？</h2><p>我（viosey）把开发 Material 主题作为我的业余爱好，同时我对此乐此不疲。但是，这毕竟让我付出了时间成本、设备成本，同时为了 Material 文档和 Demo 的稳定访问也使用了 CDN。为了平衡宽带，服务器，CDN 的使用费用，因此，我希望使用捐赠的方式来平衡以上活动之中的投入。</p>
<p>所以如果您觉得我制作的 主题、我写的教程、我维护的项目或者提供的其它资源对你有帮助，您可以对我进行捐赠。捐赠是自愿的，非强制性的，捐赠多少也都没关系；您的支持就是对我最大的支持！</p>
<h2 id="捐赠的作用？"><a href="#捐赠的作用？" class="headerlink" title="捐赠的作用？"></a>捐赠的作用？</h2><p>当一个非盈利项目仅仅依靠兴趣的支撑，很难确定它还能走多远。所有的捐赠都将用于提升我的环境配置，维持网站的运行和提高我的积极性。</p>
<h2 id="捐赠的渠道？"><a href="#捐赠的渠道？" class="headerlink" title="捐赠的渠道？"></a>捐赠的渠道？</h2><p><a href="https://www.paypal.me/viosey" target="_blank" rel="external">PayPal</a></p>
<p><strong>支付宝：</strong><br><img src="https://material.viosey.com/images/donate/AliPayQR.png" alt="img"></p>
<p><strong>微信支付：</strong><br><img src="https://material.viosey.com/images/donate/WeChanQR.png" alt="img"></p>
<p><strong>比特币：</strong><br><img src="https://material.viosey.com/images/donate/BTCQR.png" alt="img"></p>
<h2 id="捐赠者名单"><a href="#捐赠者名单" class="headerlink" title="捐赠者名单"></a>捐赠者名单</h2><p>十分感谢以下捐赠者给予的打赏：</p>
<ul>
<li>$ 20.00 SGD — Sun Ximeng</li>
<li>￥ 10.00 CNY — 佚名 (微信捐赠）</li>
<li>￥ 5.00 CNY — 神楽坂立音</li>
<li>￥ 5.00 CNY — Before_summ</li>
</ul>
<h2 id="捐赠前要考虑什么-？"><a href="#捐赠前要考虑什么-？" class="headerlink" title="捐赠前要考虑什么 ？"></a>捐赠前要考虑什么 ？</h2><p>这个渠道的存在并不意味着你必须捐赠。你也可以继续使用而不做任何事。</p>
<p>你的捐赠意味着你对我过去所做的表示感谢，而不是表达对未来的期望。但你的捐赠会提高我的积极性和设备配置让我努力把手头上的事做的更好。</p>
<p>我会维护一份名单以感谢所有的捐赠者。正如我所说，捐赠是一个向我表示感谢的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前文中刚有提到怎样基于Hexo搭建github博客，在此不赘述。本文主要讲解安装Material主题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;强烈建议点击看原文，原文排版及内容都优于本文！！！&quot;&gt;&lt;a href=&quot;#强烈建议点击看原文
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级Hexo出现ERROR Deployer not found: git 解决方案</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/%E5%8D%87%E7%BA%A7Hexo%E5%87%BA%E7%8E%B0ERROR-Deployer-not-found-git/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/升级Hexo出现ERROR-Deployer-not-found-git/</id>
    <published>2017-02-26T13:21:04.000Z</published>
    <updated>2017-02-26T13:22:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>执行以下代码即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>重新deploy即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行以下代码即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre
    
    </summary>
    
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>mac下查找端口是否占用及关闭占用端口进程</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/mac%E4%B8%8B%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/mac下查找端口是否占用及关闭占用端口进程/</id>
    <published>2017-02-26T11:34:32.000Z</published>
    <updated>2017-02-26T11:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何查找某个端口是否被占用:</p>
<p>我们查找下 4000 端口当前被谁占用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexdeMacBook-Air:Hexo_Material apple$ lsof -i:4000</div></pre></td></tr></table></figure>
<p>结果显示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">COMMAND  PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</div><div class="line">node    1341 apple   28u  IPv4 0x72e37ef4542a1f31      0t0  TCP *:terabase (LISTEN)</div><div class="line">node    1341 apple   35u  IPv4 0x72e37ef454cfc449      0t0  TCP localhost:terabase-&gt;localhost:53866 (CLOSE_WAIT)</div><div class="line">node    1341 apple   36u  IPv4 0x72e37ef44b50d259      0t0  TCP localhost:terabase-&gt;localhost:53867 (CLOSE_WAIT)</div><div class="line">node    1341 apple   37u  IPv4 0x72e37ef44b87e259      0t0  TCP localhost:terabase-&gt;localhost:53868 (CLOSE_WAIT)</div><div class="line">node    1341 apple   38u  IPv4 0x72e37ef447e55f31      0t0  TCP localhost:terabase-&gt;localhost:53869 (CLOSE_WAIT)</div><div class="line">node    1341 apple   39u  IPv4 0x72e37ef448b52b51      0t0  TCP localhost:terabase-&gt;localhost:53870 (CLOSE_WAIT)</div></pre></td></tr></table></figure>
<p>可以看到一个node进程占用了 4000 端口.</p>
<p>如何关闭此进程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexdeMacBook-Air:Hexo_Material apple$ kill -9 1341</div></pre></td></tr></table></figure>
<p>ok,这样就结束了占用 4000 端口的进程.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何查找某个端口是否被占用:&lt;/p&gt;
&lt;p&gt;我们查找下 4000 端口当前被谁占用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo主题Material的使用</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/Material%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/Material的使用/</id>
    <published>2017-02-26T11:19:29.000Z</published>
    <updated>2017-02-26T13:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装Hexo后，运行以下命令在目标中初始化Hexo ``。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>一旦初始化，这里是你的项目文件夹将是什么样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h2 id="安装「Material」"><a href="#安装「Material」" class="headerlink" title="安装「Material」"></a>安装「Material」</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件放置于站点目录的 <code>themes</code> 目录下，然后修改下配置文件即可。<br>具体到 Material 来说，有 <code>Github</code> 和 <code>NPM</code> 两种方式。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote>
<p>可以选择 克隆 或者 下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="external">稳定的发布版本</a>。</p>
</blockquote>
<p>为了方便之后的更新，建议使用 <strong>克隆</strong> 的方式。克隆命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site/themes</div><div class="line">$ git clone https://github.com/viosey/hexo-theme-material.git material</div></pre></td></tr></table></figure>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-material</div></pre></td></tr></table></figure>
<p>该方式会把 Material 主题下载到 <code>hexo</code> 目录下的 <code>node_modules</code> 文件夹中。<br>找到 <code>hexo-material</code> 文件夹，然后把文件复制到 <code>themes</code> 目录中的 <code>Material</code> 主题文件夹里。</p>
<h2 id="启用「Material」"><a href="#启用「Material」" class="headerlink" title="启用「Material」"></a>启用「Material」</h2><p>克隆完成后，修改主题文件夹名称，将其改为 <code>material</code> 。<br>然后打开 <strong>站点配置文件</strong>，找到 <code>theme</code> 字段，并将其值更改为 <code>material</code> 。</p>
<blockquote>
<p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code> 字段与之对应即可。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code>，并访问 <code>http://localhost:4000</code>，确保站点正确运行。</p>
<h2 id="更新「Material」"><a href="#更新「Material」" class="headerlink" title="更新「Material」"></a>更新「Material」</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>即可拉取最新版本。</p>
<h3 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h3><p>NPM 更新有两种方式：</p>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm-update"></a>npm-update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update hexo-material</div></pre></td></tr></table></figure>
<p>然后将文件复制到 <code>Material</code> 主题文件夹中。</p>
<h4 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h4><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="external">npm-check</a> 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。</p>
<p>安装 npm-check：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npm-check</div></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm-check hexo-material</div></pre></td></tr></table></figure>
<p>使用空格键可以选择需要处理的包，回车直接进行处理。</p>
<h2 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>编辑 <strong>站点配置文件</strong>，将 <code>language</code> 设置成你所需要的语言。<br>可用的语言如下：</p>
<ul>
<li>العَرَبِيَّة (ar)</li>
<li>English (en)</li>
<li>Español (es)</li>
<li>Français (fr)</li>
<li>Deutsche (de)</li>
<li>日本語 (ja)</li>
<li>Malay (ms)</li>
<li>简体中文 (zh-CN)</li>
<li>繁體中文 (zh-TW)</li>
</ul>
<blockquote>
<p>例如：选用繁體中文，则配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; language: zh-TW</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>编辑 <strong>站点配置文件</strong>，<code>url</code> 填写主域名，<code>root</code> 填写 子目录/根域名</p>
<blockquote>
<p>例如：站点域名为 <code>http://example.com/hexo</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; url: http://example.com</div><div class="line">&gt; root: /hexo</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>若你的站点没有运行在子目录中，则 <code>root</code> 填写为 <code>/</code>。</p>
<h3 id="作者名称"><a href="#作者名称" class="headerlink" title="作者名称"></a>作者名称</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述设置"><a href="#站点描述设置" class="headerlink" title="站点描述设置"></a>站点描述设置</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>，配置方式如插件 <code>README.md</code> 所示。<br>然后在 <a href="https://material.viosey.com/intro/#url" target="_blank" rel="external">url: rss</a> 中添加生成的 feed 路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装Hexo后，运行以下命令在目标中初始化Hexo ``。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=
    
    </summary>
    
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/hello-world/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/hello-world/</id>
    <published>2017-02-26T10:55:46.000Z</published>
    <updated>2017-02-26T10:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新产品开发过程（一）</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/25/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/25/新产品开发过程/</id>
    <published>2017-02-25T14:14:40.000Z</published>
    <updated>2017-02-24T15:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- 定义</div><div class="line">- 阶段回顾法</div><div class="line">- 阶段关卡发</div><div class="line">- 瀑布式开发法</div><div class="line">- 敏捷式开发法</div><div class="line">- 精益生产开发法</div><div class="line">- 设计思考</div><div class="line">- 过程拥有者</div></pre></td></tr></table></figure>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><h5 id="过程定义："><a href="#过程定义：" class="headerlink" title="-过程定义："></a>-过程定义：</h5><p>新产品开发过程</p>
<ol>
<li>一组严谨定义的任务与步骤，用以描述一家公司将初期构想各自转换成可以销售的产品与或服务的正规方法。</li>
<li>新产品开发词汇表。<strong><em>（存疑）</em></strong></li>
</ol>
<p>步骤、活动、决策、目标的组合</p>
<p>如果执行得当将会产生出组织需要的新产品</p>
<h5 id="为什么需要过程"><a href="#为什么需要过程" class="headerlink" title="-为什么需要过程"></a>-为什么需要过程</h5><p>10项能赢的重要成功因素</p>
<ol>
<li>独特优越的产品</li>
<li>强力的市场导向</li>
<li>更多前期的研究</li>
<li>在开发前敏锐而提早的产品定义</li>
<li>正确的组织架构 —— 团队合作</li>
<li>创新而又支持性的环境</li>
<li>领导阶层支持</li>
<li>创建一个漏斗而非隧道</li>
<li>将产品管理视为过程</li>
<li>给予产品开发足够的资源</li>
</ol>
<h5 id="前期多做研究是否意味上市时间落后？"><a href="#前期多做研究是否意味上市时间落后？" class="headerlink" title="- 前期多做研究是否意味上市时间落后？"></a>- 前期多做研究是否意味上市时间落后？</h5><p>​    在前期话费较多时间和金钱可以大幅改善成功的机会 - 对此有明显的证据</p>
<p>​    更多的黄钻被工作会导致更好更敏捷的产品和项目定义 - 这会加速开发阶段（较少不断地浪费时间）</p>
<p>​    完成前期准备工作可以预先考虑到产品问题和设计改更 - 这些产品设计变更可以在这过程早起完成，而不是等产品上市才做</p>
<h5 id="各种过程的演化"><a href="#各种过程的演化" class="headerlink" title="-各种过程的演化"></a>-各种过程的演化</h5><p>​    大多数公司修改新产品开发过程以符合所需</p>
<p>​    任何种类的新产品开发过程都比没有任何过程要有生产力</p>
<p>​    其他一致的系统有：</p>
<ul>
<li>阶段回顾</li>
<li>阶段关卡</li>
</ul>
<h4 id="阶段回顾法"><a href="#阶段回顾法" class="headerlink" title="阶段回顾法"></a>阶段回顾法</h4><h5 id="阶段回顾法-1"><a href="#阶段回顾法-1" class="headerlink" title="阶段回顾法"></a>阶段回顾法</h5><p>​    在阶段性的产品开发过程中，首先，一项功能完成一组任务，然后将产生的信息持续不断地传递给其他功能，在逐次地完成西一组任务并将所有信息传递给下一功能。</p>
<p>在这种产品开发过程中，非常缺乏多功能的团队合作。</p>
<p>也称为接力过程</p>
<p>大多数公司已从这种流程转移至使用多功能软对的阶段关卡发</p>
<p><br></p>
<p>阶段一：识别机会、选择</p>
<p>阶段二：产生概念</p>
<p>阶段三：概念项目评量</p>
<p>阶段四：开发</p>
<p>阶段五：上市</p>
<h5 id="模糊的的前端"><a href="#模糊的的前端" class="headerlink" title="模糊的的前端"></a>模糊的的前端</h5><p>阶段1~3成为模糊的前端</p>
<p>当产品概念仍然很模糊的时候，产品呢开发的刚起步时期会很混乱</p>
<p>在更正式的产品开发过程之前，一般包括三项任务</p>
<ul>
<li>策略规则</li>
<li>概念产生</li>
<li>预做技术评量</li>
</ul>
<p>这些活动通常杂乱无章，不可预期，毫无组织</p>
<p>比较起来，后来的新产品开发过程典型的有组织、可预期以及有条理，具有一组规定的活动，应回答的问题以及该做的决定</p>
<h4 id="阶段关卡法"><a href="#阶段关卡法" class="headerlink" title="阶段关卡法"></a>阶段关卡法</h4><p>阶段关卡过程是为了将一种新产品的项目从想法逐渐转变成上市产品的一种概念</p>
<p>阶段关卡法讲所要付出的努力以管理决策关卡区分成不同的阶段</p>
<p>跨功能团队在管理层批准进行下一阶段的产品开发之前，必须成功地完成每一阶段所规定的一组跨功能任务</p>
<p><img src="./process_icons.gif" alt="process_icons"></p>
<h5 id="阶段-1-2"><a href="#阶段-1-2" class="headerlink" title="阶段(1/2)"></a>阶段(1/2)</h5><p>阶段是跨功能的（其中没有研究和开发或营销阶段）以及为了提升上市的速度，每一项活动是并行的</p>
<p>每一阶段的成本都高于前一阶段，结果是渐进的承诺。一旦不确定性降低，可以提高支出，风险也可管控（As uncertainties decrease, expenditures are allowed to rise and risk is managed.）</p>
<p><img src="./stages-diagram.gif" alt="stages-diagram"></p>
<h5 id="阶段-2-2"><a href="#阶段-2-2" class="headerlink" title="阶段(2/2)"></a>阶段(2/2)</h5><p>活动：团队必须根据项目计划进行工作</p>
<p>集成分析：所有功能性活动结果的团队集成分析可以藉由跨功能互动推衍</p>
<p>集成物：代表集成分析的结果</p>
<p>活动 + 分析 = 交付物</p>
<p><img src="./stages.gif" alt="stages"></p>
<h5 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h5><p>交付物：关卡查验的输入 - 项目领导者和团队交付至会议的东西</p>
<p>标准：为了能做出继续/终止以及优先序的决策，项目在接受评判时所需的条件</p>
<p>输出：关卡查验的结果。关卡必须清楚地表达结果，须包括：一项决策（继续、终止、暂停、循环）以及下一步怎么走（核准的项目计划，日期以及下一关卡所同意的交付物）</p>
<p><img src="./gates.gif" alt="gates"></p>
<h5 id="关卡通过标准"><a href="#关卡通过标准" class="headerlink" title="关卡通过标准"></a>关卡通过标准</h5><h6 id="必须符合"><a href="#必须符合" class="headerlink" title="必须符合"></a>必须符合</h6><p>​    有是非题，一个NO表示终止的决定，检查清单是用来表示必须符合条目最平常的格式</p>
<h6 id="应该符合"><a href="#应该符合" class="headerlink" title="应该符合"></a>应该符合</h6><p>​    有高度渴望的项目特性，但是对问题回答NO并不会终止该项目；确切的地说是对这些问题加以评分并决定项目的分数，评分模型将‘应该符合’的问题处理得很好</p>
<h5 id="关卡会议"><a href="#关卡会议" class="headerlink" title="关卡会议"></a>关卡会议</h5><p>把关者（守门人）包括技术和商业人民</p>
<p>可以透过鄙视来对比评量标准以审核关于项目的想法</p>
<p>这一份必须符合标准的清单会以“是”、“否”来给分，并且所有的答案必须是“是”；只要有一个“否”便会终止此项目</p>
<p>当高层主管在关卡会议批准团队的行动计划，表示他们也愿意拨出资源：金钱，人力以及给予项目领导者和团队时间</p>
<h5 id="阶段0：探索发现-Discovery"><a href="#阶段0：探索发现-Discovery" class="headerlink" title="阶段0：探索发现 Discovery"></a>阶段0：探索发现 Discovery</h5><p>设计前置工作一发现并揭露机会以及产生想法（点子）</p>
<p>关键活动</p>
<pre><code>1. 想法的捕捉和处理系统
2. 在顾客产业中策略性分裂
3. 产生剧本
4. 顾客声音的研究
5. 和领先用户一同工作
6. 趋势导向的技术开发
</code></pre><h5 id="探索发现Discovery（阶段0）（1-2）"><a href="#探索发现Discovery（阶段0）（1-2）" class="headerlink" title="探索发现Discovery（阶段0）（1/2）"></a>探索发现Discovery（阶段0）（1/2）</h5><p>这是任何产品开发的第一部分，无论是否为阶段关卡模型都会使用</p>
<p>开发团队决定哪些项目是公司想要的并有能力追求的</p>
<p>对公司而言，在这阶段参与想法产生活动，例如头脑风暴或其他团队思考阶段，是很普通的</p>
<p>一旦点子产生团队选定一个他们想要进行的项目，此项目通过由组织决策选的第一关卡</p>
<h5 id="探索发现Discovery（阶段0）（2-2）"><a href="#探索发现Discovery（阶段0）（2-2）" class="headerlink" title="探索发现Discovery（阶段0）（2/2）"></a>探索发现Discovery（阶段0）（2/2）</h5><p>当寻找产品点子时，为了能启发商业机会，组织能去看看外面的世界是有益的</p>
<p>与顾客沟通以了解他们如何使用产品后，对于点子产生会有很大的突破。特别是和领先用户沟通可以对开发者提供极大的反馈，领先用户是最有可能对陈品感到热情的顾客</p>
<p>除了和领先用户沟通，和供货商沟通也许会有帮助。了解所有商业种类如何运用原料或许可以据此发现之前尚未被开发的可能性</p>
<h5 id="阶段0：主要输出"><a href="#阶段0：主要输出" class="headerlink" title="阶段0：主要输出"></a>阶段0：主要输出</h5><h6 id="机会概念"><a href="#机会概念" class="headerlink" title="机会概念"></a>机会概念</h6><p>一家公司的技能和资源，或顾客问题。技术驱动或者市场驱动或者两者都是</p>
<h6 id="产品创新章程"><a href="#产品创新章程" class="headerlink" title="产品创新章程"></a>产品创新章程</h6><p>组织努力的中心是将新产品推向市场，这包括项目开始的原因、目标、目的，指导方针以及项目的范围，章程要包括市场喜好，顾客需求，以及潜在销售和利润的假设。</p>
<h5 id="关卡-1：筛选点子"><a href="#关卡-1：筛选点子" class="headerlink" title="关卡 1：筛选点子"></a>关卡 1：筛选点子</h5><p>筛选点子是讲资源投入项目的第一项选择，项目就此诞生</p>
<p>假设在发现阶段获得很多点子，接着的任务便是筛选并排列出值得话费时间和金钱的点子</p>
<p>关卡1是一般性筛选，奖项木透过少数关键的“必须符合”以及“应该符合”的标准作判断</p>
<p>财务标准并非典型第一步筛选的一部分</p>
<blockquote>
<p>以下晚点更新</p>
</blockquote>
<h5 id="关卡-1-评估标准（1-2）"><a href="#关卡-1-评估标准（1-2）" class="headerlink" title="关卡 1 评估标准（1/2）"></a>关卡 1 评估标准（1/2）</h5><h5 id="关卡-1-评估标准（2-2）"><a href="#关卡-1-评估标准（2-2）" class="headerlink" title="关卡 1 评估标准（2/2）"></a>关卡 1 评估标准（2/2）</h5><h5 id="阶段1：定义范围"><a href="#阶段1：定义范围" class="headerlink" title="阶段1：定义范围"></a>阶段1：定义范围</h5><h5 id="阶段1：定义范围-1"><a href="#阶段1：定义范围-1" class="headerlink" title="阶段1：定义范围"></a>阶段1：定义范围</h5><h5 id="关卡2：二次筛选"><a href="#关卡2：二次筛选" class="headerlink" title="关卡2：二次筛选"></a>关卡2：二次筛选</h5><h5 id="关卡2：评估标准"><a href="#关卡2：评估标准" class="headerlink" title="关卡2：评估标准"></a>关卡2：评估标准</h5><h5 id="阶段2：建立商业论证"><a href="#阶段2：建立商业论证" class="headerlink" title="阶段2：建立商业论证"></a>阶段2：建立商业论证</h5><h5 id="主要输出"><a href="#主要输出" class="headerlink" title="主要输出"></a>主要输出</h5><h5 id="关卡3：开始开发"><a href="#关卡3：开始开发" class="headerlink" title="关卡3：开始开发"></a>关卡3：开始开发</h5><h5 id="关卡3：必须满足的评估标准"><a href="#关卡3：必须满足的评估标准" class="headerlink" title="关卡3：必须满足的评估标准"></a>关卡3：必须满足的评估标准</h5><h5 id="关卡3：应该满足的评估标准（1-2）"><a href="#关卡3：应该满足的评估标准（1-2）" class="headerlink" title="关卡3：应该满足的评估标准（1/2）"></a>关卡3：应该满足的评估标准（1/2）</h5><h5 id="关卡3：应该满足的评估标准（2-2）"><a href="#关卡3：应该满足的评估标准（2-2）" class="headerlink" title="关卡3：应该满足的评估标准（2/2）"></a>关卡3：应该满足的评估标准（2/2）</h5><h5 id="阶段3：开发"><a href="#阶段3：开发" class="headerlink" title="阶段3：开发"></a>阶段3：开发</h5><h5 id="关卡4：开始测试"><a href="#关卡4：开始测试" class="headerlink" title="关卡4：开始测试"></a>关卡4：开始测试</h5><h5 id="阶段4：测试与验证"><a href="#阶段4：测试与验证" class="headerlink" title="阶段4：测试与验证"></a>阶段4：测试与验证</h5><h5 id="阶段4：主要活动与输出"><a href="#阶段4：主要活动与输出" class="headerlink" title="阶段4：主要活动与输出"></a>阶段4：主要活动与输出</h5><h5 id="测试与验证（阶段4）"><a href="#测试与验证（阶段4）" class="headerlink" title="测试与验证（阶段4）"></a>测试与验证（阶段4）</h5><h5 id="关卡5：上市"><a href="#关卡5：上市" class="headerlink" title="关卡5：上市"></a>关卡5：上市</h5><h5 id="阶段5：上市"><a href="#阶段5：上市" class="headerlink" title="阶段5：上市"></a>阶段5：上市</h5><h5 id="产品上市（阶段5）"><a href="#产品上市（阶段5）" class="headerlink" title="产品上市（阶段5）"></a>产品上市（阶段5）</h5><h5 id="决策"><a href="#决策" class="headerlink" title="决策"></a>决策</h5><h5 id="过程例外"><a href="#过程例外" class="headerlink" title="过程例外"></a>过程例外</h5><h5 id="先产品开发是每个人的责任"><a href="#先产品开发是每个人的责任" class="headerlink" title="先产品开发是每个人的责任"></a>先产品开发是每个人的责任</h5><h4 id="瀑布式开发法"><a href="#瀑布式开发法" class="headerlink" title="瀑布式开发法"></a>瀑布式开发法</h4><blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="npdp" scheme="http://wanghaonanlpc.github.io/tags/npdp/"/>
    
  </entry>
  
  <entry>
    <title>支持NFC的手机（2016）</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/24/%E6%94%AF%E6%8C%81NFC%E7%9A%84%E6%89%8B%E6%9C%BA%EF%BC%882016%EF%BC%89/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/24/支持NFC的手机（2016）/</id>
    <published>2017-02-24T06:15:32.000Z</published>
    <updated>2017-02-24T06:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><p>华为Mate 9(64GB/全网通)<br>华为Mate S臻逸版(128GB/双4G)<br>华为Mate S压感屏版(128GB/电信4G)<br>华为Mate S臻享版(64GB/移动4G)<br>华为Mate S臻享版(32GB/电信4G)<br>华为Mate 8(64GB/全网通)<br>华为Mate 8(32GB/全网通)<br>华为Mate 8(64GB/电信4G)<br>华为Mate 8(32GB/电信4G)<br>华为Mate 8(32GB/移动4G)<br>华为Mate S臻享版(64GB/电信4G)<br>华为Mate S臻享版(64GB/双4G)<br>华为Nexus 7(移动4G)<br>华为Mate 7标准版(16GB/移动4G)</p>
<h4 id="荣耀"><a href="#荣耀" class="headerlink" title="荣耀"></a>荣耀</h4><p>荣耀V9标准版(64GB/全网通)<br>荣耀V9尊享版(128GB/全网通)<br>荣耀V9高配版(64GB/全网通)<br>荣耀8吴亦凡定制版(64GB/全网通)<br>荣耀8(32GB/双4G)<br>荣耀8高配版(32GB/全网通)<br>荣耀8高配版(64GB/全网通)<br>荣耀7超女定制版(64GB/全网通)<br>荣耀8(32GB/全网通)<br>荣耀V8(32GB/全网通)<br>荣耀畅玩4C 增强版(16GB/电信4G)<br>荣耀畅玩5X Plus(64GB/移动4G)<br>荣耀7(16GB/双4G)<br>荣耀7(16GB/电信4G)<br>荣耀7(64GB/全网通)<br>荣耀畅玩4C 标准版(8GB/电信4G)<br>荣耀6(32GB/移动4G)<br>荣耀6(16GB/移动4G)<br>荣耀6(16GB/联通4G)</p>
<h4 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h4><p>小米MIX(128GB/全网通)<br>小米5S(64GB/全网通)<br>小米5(32GB/全网通)<br>小米5S Plus(64GB/全网通)<br>小米5S(32GB/全网通)<br>小米5高配版(64GB/全网通)<br>小米5S Plus(128GB/全网通)<br>小米5S(128GB/全网通)<br>小米5尊享版(128GB/全网通)<br>小米Max(32GB/全网通)<br>小米MIX尊享版(256GB/全网通)<br>小米5尊享3D玻璃版(128GB/全网通)</p>
<h4 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h4><p>三星GALAXY S7 Edge皇帝版(128GB/全网通)<br>三星GALAXY C9 Pro(64GB/全网通)<br>三星GALAXY S7 Edge奥运典藏版(32GB/全网通)<br>三星GALAXY S7 Edge蝙蝠侠特别版(32GB/全网通)<br>三星2016版GALAXY J7(16GB/电信4G)<br>三星GALAXY S7 Edge(64GB/全网通)<br>三星GALAXY Note 5(64GB/全网通)<br>三星2016版Galaxy A5(16GB/移动4G)<br>三星GALAXY S7移动定制(32GB/移动4G)<br>三星GALAXY A9高配版(32GB/全网通)<br>三星2016版GALAXY J7(16GB/双4G)<br>三星2016版GALAXY J5(16GB/双4G)<br>三星2016版Galaxy A5(16GB/全网通)</p>
<p>三星GALAXY Note 7(64GB/全网通)<br>三星GALAXY A8升级版(32GB/移动4G)<br>三星SM-A310(16GB/全网通)<br>三星SM-A510(16GB/移动4G)<br>三星GALAXY S7 Edge(32GB/全网通)<br>三星Galaxy S6 Edge+(64GB/全网通)<br>三星Galaxy S6 Edge+(32GB/全网通)<br>三星GALAXY A8(32GB/全网通)<br>三星GALAXY S6 Mini(16GB/移动4G)<br>三星Project Zero 2(移动4G)<br>三星G430(移动4G)<br>三星GALAXY S6 Edge(64GB/全网通)<br>三星GALAXY S7(32GB/全网通)<br>三星GALAXY S6(32GB/电信4G)<br>三星GALAXY A8(16GB/全网通)<br>三星2016版Galaxy A9(32GB/全网通)</p>
<p>三星Galaxy S6 Active(移动4G)<br>三星GALAXY J3(8GB/电信4G)<br>三星GALAXY J5(16GB/移动4G)<br>三星GALAXY J7(16GB/移动4G)<br>三星GALAXY S6(32GB/移动4G)<br>三星GALAXY S6 Edge(32GB/全网通)<br>三星GALAXY Note 5(32GB/全网通)<br>三星W2015(16GB/电信4G)<br>三星GALAXY Note 4公开版(16GB/双4G)<br>三星Galaxy Note Edge(64GB/双4G)<br>三星GALAXY Note 4(16GB/联通4G)<br>三星GALAXY Note 4 N9109W(16GB/电信4G)<br>三星GALAXY S5 G9009W(16GB/电信4G)<br>三星GALAXY S6(32GB/全网通)<br>三星GALAXY S5 G9008W(16GB/移动4G)<br>三星GALAXY S5 G9008V(16GB/移动4G)</p>
<p>三星GALAXY S5 G9009D(16GB/电信3G)<br>三星GALAXY Note 4(16GB/移动4G)<br>三星GALAXY S5 G9006V(16GB/联通4G)<br>三星N9006 Galaxy Note 3(64GB/联通3G)<br>三星GALAXY S4 粉色版<br>三星GALAXY S4 棕色版<br>三星GALAXY S4 I9500(64GB/联通3G)</p>
<h4 id="OPPO"><a href="#OPPO" class="headerlink" title="OPPO"></a>OPPO</h4><p>OPPO A37(16GB/全网通)<br>OPPO Find 9<br>OPPO N3(32GB/移动4G)<br>OPPO N1 Mini(16GB/移动4G)<br>OPPO N3(32GB/双4G)<br>OPPO N1 Mini(16GB/联通4G)</p>
<h4 id="vivo"><a href="#vivo" class="headerlink" title="vivo"></a>vivo</h4><p>vivo Xplay 5美国队长定制版(128GB/全网通)<br>vivo Xplay 5旗舰版(128GB/全网通)<br>vivo X5Pro V(16GB/电信4G)<br>vivo X5Pro D 3G运存版(16GB/双4G)<br>vivo Xplay3S X520A(32GB/双4G)</p>
<h4 id="LG"><a href="#LG" class="headerlink" title="LG"></a>LG</h4><p>LG X300(16GB/双4G)<br>LG G4 DUAL皮质版(32G/移动4G)<br>LG V20(64GB/双4G)<br>LG G5 Lite(32GB/移动4G)<br>LG H740<br>LG G4s(8GB/移动4G)<br>LG V10(64GB/双4G)<br>LG G4国际版(32GB/双4G)<br>LG G4 Stylus(4G版)<br>LG VW820(移动4G)<br>LG G3 Beat D729(8GB/电信4G)<br>LG G4(32GB/电信4G)<br>LG G3 D859(32GB/电信3G)<br>LG G3 D858(32GB/移动4G)<br>LG G2 D820(16GB/电信3G)<br>LG G2(16GB/联通3G)<br>LG G2(32GB/联通3G)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;华为&quot;&gt;&lt;a href=&quot;#华为&quot; class=&quot;headerlink&quot; title=&quot;华为&quot;&gt;&lt;/a&gt;华为&lt;/h4&gt;&lt;p&gt;华为Mate 9(64GB/全网通)&lt;br&gt;华为Mate S臻逸版(128GB/双4G)&lt;br&gt;华为Mate S压感屏版(128GB/电信4
    
    </summary>
    
    
      <category term="NFC" scheme="http://wanghaonanlpc.github.io/tags/NFC/"/>
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>献给写作者的markdown新手指南</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/22/%E5%85%88%E7%BB%99%E5%86%99%E4%BD%9C%E8%80%85%E7%9A%84markdown%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/22/先给写作者的markdown新手指南/</id>
    <published>2017-02-22T14:58:59.000Z</published>
    <updated>2017-02-22T15:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hello-world！"><a href="#Hello-world！" class="headerlink" title="Hello world！"></a>Hello world！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Hello-world！&quot;&gt;&lt;a href=&quot;#Hello-world！&quot; class=&quot;headerlink&quot; title=&quot;Hello world！&quot;&gt;&lt;/a&gt;Hello world！&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>那些你听到的前端名词</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/22/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%90%AC%E5%88%B0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%90%8D%E8%AF%8D/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/22/那些你听到的前端名词/</id>
    <published>2017-02-22T12:55:04.000Z</published>
    <updated>2017-02-22T13:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>那些你听到的前端名词</p>
</blockquote>
<h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><blockquote>
<p>Node.js是JavaScript在服务器端的一个运行环境，也是一个工具库，用来和服务器端其他软件互动。它的JavaScript解释器，采用了Google公司的V8引擎。</p>
</blockquote>
<p>nodejs是由<a href="https://github.com/ry" target="_blank" rel="external">Ryan Dahl</a>写的。他做nodejs的初衷是为了做一个高性能是web服务器。<br>为了实现高性能服务器，实现要点是：</p>
<ul>
<li>事件驱动</li>
<li>非阻塞I / O（异步I / O）</li>
</ul>
<h4 id="nodejs的特点"><a href="#nodejs的特点" class="headerlink" title="nodejs的特点"></a>nodejs的特点</h4><ul>
<li>异步I / O</li>
<li>事件与回调函数</li>
<li>单线程</li>
</ul>
<h4 id="nodejs优缺点"><a href="#nodejs优缺点" class="headerlink" title="nodejs优缺点"></a>nodejs优缺点</h4><p>优点</p>
<ul>
<li>高并发（最重要的优点）</li>
<li>适合I / O密集型应用</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>不适合CPU密集型应用; CPU密集型应用给节点带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I / O无法发起<br>解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I / O调用的发起</li>
<li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃<br>解决方案：Nnigx反向代理，负载均衡，开多个进程，绑定多个端口;开多个进程监听同一个端口，使用集群模块;也可以使用forever或pm2模块</li>
<li>开源组件库质量参差不齐，更新快，向下不兼容</li>
</ul>
<h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><blockquote>
<p>Vue.js（读音 /vjuː/, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用<a href="http://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="external">单文件组件</a>和 <a href="http://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="external">Vue 生态系统支持的库</a>开发的复杂单页应用。</p>
</blockquote>
<h4 id="Vue-js-主要是干啥的？"><a href="#Vue-js-主要是干啥的？" class="headerlink" title="Vue.js 主要是干啥的？"></a>Vue.js 主要是干啥的？</h4><p>​    它是一个 MVVM 前端框架<br>​    Model / View / ViewModel<br>​    我们不需要撰写任何 DOM 操作代码：被绑定增强的 HTML 模板是底层数据状态的声明式的映射，    数据不过是普通 JavaScript 对象。我们的视图完全由数据驱动。</p>
<h4 id="为什么要用Vue-js"><a href="#为什么要用Vue-js" class="headerlink" title="为什么要用Vue.js"></a>为什么要用Vue.js</h4><pre><code>1.  清晰简单的API让业务代码更好的组织
2.  解决了前端交互复杂而带来的性能问题
3.  健全、颜值高的官⽅⽂档
4.  完整的开发生态链
</code></pre><h4 id="哪些公司在用Vue-js"><a href="#哪些公司在用Vue-js" class="headerlink" title="哪些公司在用Vue.js"></a>哪些公司在用Vue.js</h4><p>​    Google，Facebook，Airbnb，微博 小米 阿里巴巴，百度，饿了么，58</p>
<h3 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h3><blockquote>
<p>待整理</p>
</blockquote>
<h3 id="Angular-js"><a href="#Angular-js" class="headerlink" title="Angular.js"></a>Angular.js</h3><blockquote>
<p>待整理</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;那些你听到的前端名词&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;NodeJs&quot;&gt;&lt;a href=&quot;#NodeJs&quot; class=&quot;headerlink&quot; title=&quot;NodeJs&quot;&gt;&lt;/a&gt;NodeJs&lt;/h3&gt;&lt;blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端app内置浏览器优化</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/移动端app内置浏览器优化/</id>
    <published>2017-02-21T13:01:06.000Z</published>
    <updated>2017-02-22T12:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>未总结完，待续</p>
</blockquote>
<h5 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h5><p>Blink内核与Webkit内核</p>
<p>Blink内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blink内核是由谷歌开发，chromium/chrome浏览器的内核，实际上也是由webkit衍生而来。</div></pre></td></tr></table></figure>
<p>Webkit内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webkit是通用内核，适合各种各样的平台，chromium只是其中一个。开源，有专门团队维护。苹果的safari浏览器脱自webkit内核，话语权中。后来Google chromium的理念与webkit有分歧，谷歌自立门户，开始Blink。</div></pre></td></tr></table></figure>
<h5 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安卓的好像是UC的，ios的应该是Safar</div></pre></td></tr></table></figure>
<p>安卓app替换webview</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">低于android 4.4 的webview 是蹩脚的Android WebKit浏览器内核（android版本越低性能就越差,android 4.4以上已经使用了Chromium ）</div></pre></td></tr></table></figure>
<h5 id="几款web引擎"><a href="#几款web引擎" class="headerlink" title="几款web引擎"></a>几款web引擎</h5><ol>
<li>Crosswalk</li>
<li>Tencent X5</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;未总结完，待续&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;微信&quot;&gt;&lt;a href=&quot;#微信&quot; class=&quot;headerlink&quot; title=&quot;微信&quot;&gt;&lt;/a&gt;微信&lt;/h5&gt;&lt;p&gt;Blink内核与Webkit内核&lt;/p&gt;
&lt;p&gt;Blin
    
    </summary>
    
      <category term="移动端" scheme="http://wanghaonanlpc.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="ios" scheme="http://wanghaonanlpc.github.io/tags/ios/"/>
    
      <category term="浏览器" scheme="http://wanghaonanlpc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo与github搭建个人博客(二)</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/Hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/Hexo与github搭建个人博客-二/</id>
    <published>2017-02-21T11:25:48.000Z</published>
    <updated>2017-02-22T12:58:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍本地Hexo博客网站与Github叠加</p>
</blockquote>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效）。</p>
<p>注意事项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 注册的邮箱一定要验证，否则不会成功；</div><div class="line">2. 仓库名字必须是：username.github.io，其中username是你的用户名；</div><div class="line">3. 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</div></pre></td></tr></table></figure>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><blockquote>
<p>此部分以后在介绍</p>
</blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h3><p>首先，<code>ssh key</code>必须要配置好</p>
<p>然后，配置<code>_config.yml</code>中有关deploy的部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:wanghaonanlpc/wanghaonanlpc.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>此时直接执行<code>hexo d</code>的话一般会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Deployer not found: github 或者 Deployer not found: git</div></pre></td></tr></table></figure>
<p>原因是还需要安装一个插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>
<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p>
<h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #部署到GitHub</div><div class="line">hexo help  # 查看帮助</div><div class="line">hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure>
<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s -g #生成并本地预览</div><div class="line">hexo d -g #生成并上传</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此已经可以完成Hexo与Github搭建个人博客。</p>
<blockquote>
<p>相关文章<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#绑定域名" target="_blank" rel="external">小茗同学的博客园</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍本地Hexo博客网站与Github叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="前端" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/tags/hexo/"/>
    
      <category term="node.js" scheme="http://wanghaonanlpc.github.io/tags/node-js/"/>
    
      <category term="gtihub" scheme="http://wanghaonanlpc.github.io/tags/gtihub/"/>
    
      <category term="markdown" scheme="http://wanghaonanlpc.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo与github搭建个人博客(一)</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/Hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/Hexo与github搭建个人博客-一/</id>
    <published>2017-02-21T11:19:41.000Z</published>
    <updated>2017-02-22T12:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍Hexo</p>
</blockquote>
<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p>Hexo是一个快速，简单和强大的博客框架。你写的帖子在<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>（或其他语言）和Hexo生成静态文件与美丽的主题在几秒钟内。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>它只需要几分钟来设置Hexo。如果你遇到一个问题，在这里找不到解决方案，请<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">提交一个GitHub问题</a>，我会尽力解决它。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>安装Hexo非常容易。但是，你需要先安装几个其他的东西：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果你的电脑已经有这些，恭喜你！只需用npm安装Hexo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>如果没有，请按照以下说明安装所有要求。</p>
<blockquote>
<p><strong>对于Mac用户</strong>编译时可能会遇到一些问题。请先从App Store安装Xcode。安装Xcode后，打开Xcode并转到<strong>首选项 - &gt;下载 - &gt;命令行工具 - &gt;安装</strong>以安装命令行工具。</p>
</blockquote>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul>
<li>Windows：下载并安装<a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a>。</li>
<li>苹果：用它安装<a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">自制</a>，<a href="http://www.macports.org/" target="_blank" rel="external">MacPorts的</a>或<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a>。</li>
<li>Linux（Ubuntu，Debian）： <code>sudo apt-get install git-core</code></li>
<li>Linux（Fedora，Red Hat，CentOS）： <code>sudo yum install git-core</code></li>
</ul>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>安装Node.js的最好方法是使用<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>。</p>
<p>卷曲：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | 嘘</div></pre></td></tr></table></figure>
<p>Wget：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | 嘘</div></pre></td></tr></table></figure>
<p>安装nvm后，重新启动终端并运行以下命令以安装Node.js.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install stable</div></pre></td></tr></table></figure>
<p>或者，下载并运行<a href="http://nodejs.org/" target="_blank" rel="external">安装程序</a>。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>一旦所有要求都安装完毕，您可以使用npm安装Hexo。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Once Hexo is installed, run the following commands to initialise Hexo in the target <folder>.</folder></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>Once initialised, here’s what your project folder will look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h2 id="组态"><a href="#组态" class="headerlink" title="组态"></a>组态</h2><p>**</p>
<p>您可以<code>_config.yml</code>在<a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config" target="_blank" rel="external">备用配置文件</a>中或其中修改站点设置。</p>
<h3 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>您网站的标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>您网站的字幕</td>
</tr>
<tr>
<td><code>description</code></td>
<td>您网站的描述</td>
</tr>
<tr>
<td><code>author</code></td>
<td>你的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>您网站的语言。使用<a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" target="_blank" rel="external">2个字母ISO-639-1代码</a>。默认为<code>en</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>您网站的时区。Hexo默认情况下使用计算机上的设置。您可以在<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">这里</a>找到可用的时区列表。一些实例是<code>America/New_York</code>，<code>Japan</code>，和<code>UTC</code>。</td>
</tr>
</tbody>
</table>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>您网站的网址</td>
<td></td>
</tr>
<tr>
<td><code>root</code></td>
<td>您网站的根目录</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>文章的<a href="https://hexo.io/docs/permalinks.html" target="_blank" rel="external">永久链接</a>格式</td>
<td><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td><code>permalink_default</code></td>
<td>固定链接中每个段的默认值</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>网站在子目录</strong>如果您的网站位于<code>http://example.org/blog</code>设置<code>url</code>为<code>http://example.org/blog</code>并设置<code>root</code>为的子目录（如）中<code>/blog/</code>。</p>
</blockquote>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>source_dir</code></td>
<td>源文件夹。您的内容存储在哪里</td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>public_dir</code></td>
<td>公共文件夹。将生成静态站点的位置</td>
<td><code>public</code></td>
</tr>
<tr>
<td><code>tag_dir</code></td>
<td>标记目录</td>
<td><code>tags</code></td>
</tr>
<tr>
<td><code>archive_dir</code></td>
<td>存档目录</td>
<td><code>archives</code></td>
</tr>
<tr>
<td><code>category_dir</code></td>
<td>类别目录</td>
<td><code>categories</code></td>
</tr>
<tr>
<td><code>code_dir</code></td>
<td>包括代码目录</td>
<td><code>downloads/code</code></td>
</tr>
<tr>
<td><code>i18n_dir</code></td>
<td>i18n目录</td>
<td><code>:lang</code></td>
</tr>
<tr>
<td><code>skip_render</code></td>
<td>不要渲染的路径。您可以使用<a href="https://github.com/isaacs/minimatch" target="_blank" rel="external">glob表达式</a>进行路径匹配</td>
</tr>
</tbody>
</table>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>new_post_name</code></td>
<td>新帖子的文件名格式</td>
<td><code>:title.md</code></td>
</tr>
<tr>
<td><code>default_layout</code></td>
<td>默认布局</td>
<td><code>post</code></td>
</tr>
<tr>
<td><code>titlecase</code></td>
<td>将标题转换为标题大小写？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>external_link</code></td>
<td>在新标签页中打开外部链接？</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>filename_case</code></td>
<td>将文件名转换为<code>1</code>小写; <code>2</code>大写</td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>render_drafts</code></td>
<td>显示草稿？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>post_asset_folder</code></td>
<td>启用<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="external">资产文件夹</a>？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>relative_link</code></td>
<td>相对于根文件夹创建链接？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>future</code></td>
<td>显示未来帖子？</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>代码块设置</td>
</tr>
</tbody>
</table>
<h3 id="类别和标签"><a href="#类别和标签" class="headerlink" title="类别和标签"></a>类别和标签</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>default_category</code></td>
<td>默认类别</td>
<td><code>uncategorized</code></td>
</tr>
<tr>
<td><code>category_map</code></td>
<td>类别lug。</td>
<td></td>
</tr>
<tr>
<td><code>tag_map</code></td>
<td>标签lug。</td>
</tr>
</tbody>
</table>
<h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期/时间格式"></a>日期/时间格式</h3><p>Hexo使用<a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a>处理日期。</p>
<table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>date_format</code></td>
<td>日期格式</td>
<td><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td><code>time_format</code></td>
<td>时间格式</td>
<td><code>HH:mm:ss</code></td>
</tr>
</tbody>
</table>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>per_page</code></td>
<td>单个页面上显示的帖子数量。<code>0</code>禁用分页</td>
<td><code>10</code></td>
</tr>
<tr>
<td><code>pagination_dir</code></td>
<td>分页目录</td>
<td><code>page</code></td>
</tr>
</tbody>
</table>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>theme</code></td>
<td>主题名称。<code>false</code>禁用主题</td>
</tr>
<tr>
<td><code>deploy</code></td>
<td>部署设置</td>
</tr>
</tbody>
</table>
<h3 id="使用备用配置"><a href="#使用备用配置" class="headerlink" title="使用备用配置"></a>使用备用配置</h3><p>可以通过将<code>--config</code>标志添加<code>hexo</code>到备用YAML或JSON配置文件的路径或多个YAML或JSON文件的逗号分隔列表（无空格）的路径来指定自定义配置文件路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">＃use&apos;custom.yml&apos;代替&apos;_config.yml&apos;</div><div class="line">$ hexo server --config custom.yml</div><div class="line"></div><div class="line">＃use&apos;custom.yml&apos;＆&apos;custom2.json&apos;，优先&apos;custom2.json&apos;</div><div class="line">$ hexo server --config custom.yml，custom2.json</div></pre></td></tr></table></figure>
<p>使用多个文件组合所有配置文件并将合并的设置保存到<code>_multiconfig.yml</code>。后面的值优先。它适用于任意数量的具有任意深度对象的JSON和YAML文件。请注意，<strong>列表中不允许有空格</strong>。</p>
<p>例如，在上面的例子<code>foo: bar</code>中<code>custom.yml</code>，如果是，但是<code>&quot;foo&quot;: &quot;dinosaur&quot;</code>在<code>custom2.json</code>，<code>_multiconfig.yml</code>将包含<code>foo: dinosaur</code>。**</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="在里面"><a href="#在里面" class="headerlink" title="在里面"></a>在里面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [文件夹]</div></pre></td></tr></table></figure>
<p>初始化网站。如果没有<code>folder</code>提供，Hexo将在当前目录中设置网站。</p>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>创建新文章。如果没有<code>layout</code>提供，Hexo将使用<code>default_layout</code>from <a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">_config.yml</a>。如果<code>title</code>包含空格，请用引号将其括起来。</p>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo生成</div></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-d</code>， <code>--deploy</code></td>
<td>一代完成后部署</td>
</tr>
<tr>
<td><code>-w</code>， <code>--watch</code></td>
<td>观察文件更改</td>
</tr>
</tbody>
</table>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<p>发布草稿。</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>启动本地服务器。默认情况下，这是<code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-p</code>， <code>--port</code></td>
<td>覆盖默认端口</td>
</tr>
<tr>
<td><code>-s</code>， <code>--static</code></td>
<td>仅提供静态文件</td>
</tr>
<tr>
<td><code>-l</code>， <code>--log</code></td>
<td>启用记录器。覆盖记录器格式。</td>
</tr>
</tbody>
</table>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>部署您的网站。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-g</code>， <code>--generate</code></td>
<td>部署前生成</td>
</tr>
</tbody>
</table>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>
<p>渲染文件。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-o</code>， <code>--output</code></td>
<td>输出目的地</td>
</tr>
</tbody>
</table>
<h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo migrate &lt; type &gt;</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/docs/migration.html" target="_blank" rel="external">迁移</a>来自其他博客系统的内容。</p>
<h3 id="清洁"><a href="#清洁" class="headerlink" title="清洁"></a>清洁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo清洁</div></pre></td></tr></table></figure>
<p>清除缓存文件（<code>db.json</code>）和生成的文件（<code>public</code>）。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo list &lt; type &gt;</div></pre></td></tr></table></figure>
<p>列出所有路线。</p>
<h3 id="版"><a href="#版" class="headerlink" title="版"></a>版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div></pre></td></tr></table></figure>
<p>显示版本信息。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --safe</div></pre></td></tr></table></figure>
<p>禁用加载插件和脚本。如果您在安装新插件后遇到问题，请尝试此操作。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --debug</div></pre></td></tr></table></figure>
<p>将详细消息记录到终端和日志<code>debug.log</code>。如果您在Hexo遇到任何问题，请尝试此操作。如果您看到错误，请<a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="external">提出一个GitHub问题</a>。</p>
<h3 id="静音模式"><a href="#静音模式" class="headerlink" title="静音模式"></a>静音模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --silent</div></pre></td></tr></table></figure>
<p>静音输出到终端。</p>
<h3 id="自定义配置文件路径"><a href="#自定义配置文件路径" class="headerlink" title="自定义配置文件路径"></a>自定义配置文件路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --config custom.yml</div></pre></td></tr></table></figure>
<p>使用自定义配置文件（而不是<code>_config.yml</code>）。还接受JSON或YAML配置文件的逗号分隔列表（无空格），这些文件将文件合并为一个<code>_multiconfig.yml</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --config custom.yml，custom2.json</div></pre></td></tr></table></figure>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure>
<p>显示草稿帖子（存储在<code>source/_drafts</code>文件夹中）。</p>
<h3 id="自定义CWD"><a href="#自定义CWD" class="headerlink" title="自定义CWD"></a>自定义CWD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --cwd / path / to / cwd</div></pre></td></tr></table></figure>
<p>自定义当前工作目录的路径。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>到此已经使用Hexo创建了自己的个人博客。<a href="https://hexo.io/themes/" target="_blank" rel="external">Click this!</a>可以选择自己的喜欢的主题进行配置。</p>
]]></content>
    
    <summary type="html">
    
      Hexo与github搭建个人博客
    
    </summary>
    
      <category term="前端" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/tags/hexo/"/>
    
      <category term="node.js" scheme="http://wanghaonanlpc.github.io/tags/node-js/"/>
    
      <category term="gtihub" scheme="http://wanghaonanlpc.github.io/tags/gtihub/"/>
    
      <category term="markdown" scheme="http://wanghaonanlpc.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/hello-world%202/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/hello-world 2/</id>
    <published>2017-02-21T03:02:14.000Z</published>
    <updated>2017-02-21T03:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IMAPOST</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/IMAPOST/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/IMAPOST/</id>
    <published>2017-02-21T01:45:56.000Z</published>
    <updated>2017-02-21T02:02:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>#hello world!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#hello world!&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>支持NFC的手机总结</title>
    <link href="http://wanghaonanlpc.github.io/2016/05/24/%E6%94%AF%E6%8C%81NFC%E7%9A%84%E6%89%8B%E6%9C%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://wanghaonanlpc.github.io/2016/05/24/支持NFC的手机总结/</id>
    <published>2016-05-24T05:20:58.000Z</published>
    <updated>2017-02-24T05:21:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>截止2016年5月</p>
<h5 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h5><p>Galaxy S7 Edge、Galaxy S7、Galaxy S6 edge+、Galaxy S6 edge、Galaxy S6、Galaxy A9及高配版、Galaxy A8、Galaxy A7(2016)、Galaxy A5(2016)、GalaxyJ7(2016)、Galaxy J7、Galaxy J5(2016)、Galaxy J5、Galaxy J3 Pro、Galaxy J3、Galaxy Note5、Galaxy Note3 N9006、Galaxy Note3 N9008V、Galaxy Note3 N9008S（UICC,eSE）、Galaxy C5、Galaxy GRAND Prime、Galaxy MEGA2、Galaxy ALPHA G8508S、Galaxy CORE Lite 4G、Galaxy CORE Advance、W2016、W2015、领世旗舰III G9198、</p>
<h5 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h5><p>小米5（这些统统都没有：小米Max、小米4S、小米4C、红米Note3、红米3S、红米3、更早的机型不想提了。）</p>
<h5 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h5><p>荣耀6高配版、荣耀6plus双4G版、荣耀V8全网通版、Mate7、Mate8、Mate 9、MateS</p>
<h5 id="魅族"><a href="#魅族" class="headerlink" title="魅族"></a>魅族</h5><p>魅族PRO 5（NXP PN65T NFC 芯片）</p>
<h5 id="OPPO"><a href="#OPPO" class="headerlink" title="OPPO"></a>OPPO</h5><p>OPPO Find7、OPPO Find5、OPPO N3、OPPO N1、OPPO A37、OPPO 3007、OPPO 3005</p>
<h5 id="vivo"><a href="#vivo" class="headerlink" title="vivo"></a>vivo</h5><p>vivo Xplay 3S、vivo Xplay、vivo X5Pro电信版</p>
<h5 id="努比亚"><a href="#努比亚" class="headerlink" title="努比亚"></a>努比亚</h5><p>nubia Z9、nubia Z9 Max、nubia Z7 Max、nubia Z5 Mini、nubia Z5S LET版</p>
<h5 id="酷派"><a href="#酷派" class="headerlink" title="酷派"></a>酷派</h5><p>酷派铂顿、锋尚3、锋尚2电信版、锋尚移动版、锋尚电信版、锋尚Air移动版、锋尚Air电信版、锋尚pro电信版、锋尚MAX尊享版、锋尚MAX极速版</p>
<h5 id="索尼"><a href="#索尼" class="headerlink" title="索尼"></a>索尼</h5><p>索尼Xperia Z5 双卡双待版、索尼Xperia Z5 尊享版、索尼Xperia Z3+Dual双卡双待版、索尼Xperia Z1、索尼MT27i、索尼LT26i</p>
<h5 id="HTC"><a href="#HTC" class="headerlink" title="HTC"></a>HTC</h5><p>HTC 10 lifestyle、HTC 10、New HTC One、HTC One E9+、HTC One M9、HTC One (M8)、HTC Desire 626</p>
<h5 id="锤子"><a href="#锤子" class="headerlink" title="锤子"></a>锤子</h5><p>Smartisan T2、Smartisan T1、坚果</p>
<h5 id="摩托罗拉"><a href="#摩托罗拉" class="headerlink" title="摩托罗拉"></a>摩托罗拉</h5><p>Moto x极、Moto X Style</p>
<h5 id="中兴"><a href="#中兴" class="headerlink" title="中兴"></a>中兴</h5><p>中兴天机 7、AXON天机</p>
<h5 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h5><p>Nexus系列</p>
<h5 id="LG"><a href="#LG" class="headerlink" title="LG"></a>LG</h5><p>LG G5、LG G4、LG G3 Beat、LG G3、LG G2、LG V10、LG AKA</p>
<h5 id="一加"><a href="#一加" class="headerlink" title="一加"></a>一加</h5><p>一加手机3、一加手机1</p>
<h5 id="金立"><a href="#金立" class="headerlink" title="金立"></a>金立</h5><p>风华3（GN709L）</p>
<h5 id="联想"><a href="#联想" class="headerlink" title="联想"></a>联想</h5><p>乐檬X3</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;截止2016年5月&lt;/p&gt;
&lt;h5 id=&quot;三星&quot;&gt;&lt;a href=&quot;#三星&quot; class=&quot;headerlink&quot; title=&quot;三星&quot;&gt;&lt;/a&gt;三星&lt;/h5&gt;&lt;p&gt;Galaxy S7 Edge、Galaxy S7、Galaxy S6 edge+、Galaxy S6 ed
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用github pages服务搭建博客</title>
    <link href="http://wanghaonanlpc.github.io/2016/02/21/%E4%BD%BF%E7%94%A8github%20pages%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wanghaonanlpc.github.io/2016/02/21/使用github pages服务搭建博客/</id>
    <published>2016-02-21T05:57:52.000Z</published>
    <updated>2017-02-23T13:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github pages服务搭建博客的好处有：</p>
<ol>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
</ol>
<a id="more"></a>
<ol>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
<li>等等；</li>
</ol>
]]></content>
    
    <summary type="html">
    
      附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面
    
    </summary>
    
    
      <category term="hello" scheme="http://wanghaonanlpc.github.io/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="http://wanghaonanlpc.github.io/2015/07/09/js-module-7day/"/>
    <id>http://wanghaonanlpc.github.io/2015/07/09/js-module-7day/</id>
    <published>2015-07-08T16:00:00.000Z</published>
    <updated>2017-02-21T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>下滑这里查看更多内容</p>
</blockquote>
<p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200 人转发，阅读达到 10w，获得了还不错的评价。</p>
<p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote 展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p>
<h3 id="Watch-Slides-→"><a href="#Watch-Slides-→" class="headerlink" title="Watch Slides →"></a><a href="http://huangxuan.me/js-module-7day" target="_blank" rel="external">Watch Slides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"></p>
<p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p>
<p>这个 Web Slides 开源在<a href="https://github.com/Huxpro/js-module-7day" target="_blank" rel="external">我的 Github 上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork &amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star 一下这个项目</p>
<h3 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h3><ul>
<li>第一日 上古时期 <strong><em>Module?</em></strong> 从设计模式说起</li>
<li>第二日 石器时代 <strong><em>Script Loader</em></strong> 只有封装性可不够，我们还需要加载</li>
<li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong> 模块化架构的工业革命</li>
<li>第四日 号角吹响 <strong><em>CommonJS</em></strong> 征服世界的第一步是跳出浏览器</li>
<li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong> 浏览器环境模块化方案</li>
<li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong> 大势所趋，去掉这层包裹！</li>
<li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li>
</ul>
<h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p><a href="http://lab.hakim.se/reveal-js" target="_blank" rel="external">Reveal.js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;下滑这里查看更多内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该 Slides 分享到了微博上。出乎意料地，这篇微博先后被 @JS小组 @尤小右 @寸志 等近 200
    
    </summary>
    
    
      <category term="前端开发" scheme="http://wanghaonanlpc.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JavaScript" scheme="http://wanghaonanlpc.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Example Post With Default Header Image</title>
    <link href="http://wanghaonanlpc.github.io/2015/04/14/unix-linux-note/"/>
    <id>http://wanghaonanlpc.github.io/2015/04/14/unix-linux-note/</id>
    <published>2015-04-13T16:00:00.000Z</published>
    <updated>2017-02-21T01:40:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>This document is not completed and will be updated anytime.</p>
</blockquote>
<h2 id="Catagory"><a href="#Catagory" class="headerlink" title="Catagory"></a>Catagory</h2><ol>
<li><a href="#unix">Unix</a><ol>
<li><a href="#bell-labs">Bell Labs</a></li>
<li><a href="#xenix">Xenix</a></li>
<li><a href="#bsd">BSD</a></li>
<li><a href="#freebsd--apple">FreeBSD &amp; Apple</a></li>
<li><a href="#nextstep">NeXTStep</a></li>
<li><a href="#darwin">Darwin</a></li>
<li><a href="#posix">POSIX</a></li>
</ol>
</li>
<li><a href="#unix-like">Unix-like</a><ol>
<li><a href="#single-unix-specification">Single Unix Specification</a></li>
<li><a href="#apple-ios">Apple iOS</a></li>
<li><a href="#xnu-kernel">XNU Kernel</a></li>
</ol>
</li>
<li><a href="#linux">Linux</a><ol>
<li><a href="#linux-kernel">Linux Kernel</a></li>
<li><a href="#gnu-project">GNU Project</a></li>
<li><a href="#android">Android</a></li>
<li><a href="#android-kernel">Android Kernel</a></li>
<li><a href="#android-rom">Android ROM</a></li>
<li><a href="#chrome-os">Chrome OS</a></li>
<li><a href="#chromium-os">Chromium OS</a></li>
</ol>
</li>
</ol>
<hr>
<h2 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h2><blockquote>
<p>Unix is a <strong>family</strong> of multitasking, multiuser computer OS.</p>
</blockquote>
<p>Derive from the original <strong>AT&amp;T Unix</strong>, Developed in the 1970s at <strong>Bell Labs</strong> (贝尔实验室), initially intended for use inside the <strong>Bell System</strong>.</p>
<ul>
<li><h4 id="Bell-Labs"><a href="#Bell-Labs" class="headerlink" title="Bell Labs"></a>Bell Labs</h4>Bell 和 AT&amp;A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT 公司呢。<br><strong>C 语言也是 Bell Labs 的产物</strong>，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在 73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。</li>
</ul>
<p>AT&amp;T licensed Unix to outside parties(第三方) from the late 1970s, leading to a variety of both <strong>academic</strong> (最有有名的 BSD ) and <strong>commercial</strong> (Microsoft Xenix, IBM AIX, SunOS Solaris)</p>
<ul>
<li><h4 id="Xenix"><a href="#Xenix" class="headerlink" title="Xenix"></a>Xenix</h4><p>微软 1979 年从 AT&amp;A 授权来的 Unix OS，配合着 x86 成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2 操作系统后放弃，后来最终转向 <strong>Windows NT</strong>。</p>
</li>
<li><h4 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h4><p><strong>Barkeley Software Distribution</strong>, also called Berkeley Unix. Today the term “BSD” is used to refer to any of the BSD descendants(后代) which together form a branch of the family of Unix-like OS.(共同组成了一个分支)</p>
<ul>
<li><strong>BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet 协议</strong>，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ Microsoft Windows and most of the foundation of Apple’s OS X and iOS ）</li>
<li>BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD 等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。</li>
</ul>
</li>
<li><h4 id="FreeBSD-amp-Apple"><a href="#FreeBSD-amp-Apple" class="headerlink" title="FreeBSD &amp; Apple"></a>FreeBSD &amp; Apple</h4><p>FreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc : NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP 操作系统，这货后来在 Apple 时期演化成了 <strong>Darwin</strong> ，这个“达尔文”居然还是个开源系统，而且是 the Core of <strong>Mac OS X</strong> and <strong>iOS</strong>.</p>
</li>
<li><h4 id="NeXTSTEP"><a href="#NeXTSTEP" class="headerlink" title="NeXTSTEP"></a>NeXTSTEP</h4><p>An <strong>object-oriented</strong>, multitasking OS. Low-level C but High-level OC language and runtime the first time, combined with an <strong>OO aplication layer</strong> and including several “kits”.<br>大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of his coworkers 创办的，所以 <strong>NeXTSTEP 绝对是证明 Jobs 实力的作品。</strong></p>
</li>
<li><h4 id="Darwin"><a href="#Darwin" class="headerlink" title="Darwin"></a>Darwin</h4><p><a href="http://en.wikipedia.org/wiki/Darwin_(operating_system\" target="_blank" rel="external">Darwin</a>), the core set of components upon which Mac OS X and iOS based, mostly POSIX compatible, but has never, by itself, been certified as being compatible with any version of <strong>POSIX</strong>. (OS X, since Leopard, has been certified as compatible with the Single UNIX Specification version 3)<br><strong>所以说 Mac OS X 算是很正统 Unix 的了</strong></p>
</li>
<li><h4 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h4><p>可移植操作系统接口, Portable Operating System Interface, is a family of standards specified by the IEEE from maintaining compatibility between OS, defines the API along with Command Line Shells and utility interfaces, for software comaptibility with variants of Unix and other OS.</p>
<ul>
<li>Fully POSIX compliant:<ul>
<li>OS X</li>
<li>QNX OS (BlackBerry)</li>
</ul>
</li>
<li>Mostly complicant:<ul>
<li>Linux</li>
<li>OpenBSD/FreeBSD</li>
<li>Darwin (Core of <strong>iOS</strong> &amp; OS X)</li>
<li><strong>Android</strong></li>
</ul>
</li>
<li>Complicant via compatibility feature （通过兼容功能实现兼容）<ul>
<li>Windows NT Kernel<ul>
<li>Windows Server 2000, 2003, 2008, 2008 R2, 2012</li>
</ul>
</li>
<li>Symbian OS (with PIPS)<ul>
<li>Symbian was a closed-source OS.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Unix-like"><a href="#Unix-like" class="headerlink" title="Unix-like"></a>Unix-like</h2><blockquote>
<p>A Unix-like (sometimes referred to as UN<em>X or </em>nix) operating system is one that behaves in a manner similar to a Unix system, while not necessarily conforming to or being certified to any version of the <strong>Single UNIX Specification</strong>.</p>
</blockquote>
<p>There is no standard for defining the term.<br>其实 Unix-like 是个相对模糊的概念：</p>
<ul>
<li>最狭义的 Unix 单指 Bell Labs’s Unix</li>
<li>稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like ，比如 OS X</li>
<li>最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括 Linux，BSD Family 等</li>
</ul>
<h4 id="Single-UNIX-Specification"><a href="#Single-UNIX-Specification" class="headerlink" title="Single UNIX Specification"></a>Single UNIX Specification</h4><p>The Single UNIX Specification (SUS) is the collective name of a family of standards for computer OS, compliance with which is required to <strong>qualify for the name “Unix”</strong>, like <strong>POSIX</strong>.</p>
<h4 id="Apple-iOS"><a href="#Apple-iOS" class="headerlink" title="Apple iOS"></a>Apple iOS</h4><p>iOS is a <strong>Unix-like OS based on Darwin(BSD)</strong> and OS X, which share some frameworks including Core Foundation, Founadtion and the Darwin foundation with OS X, but, Unix-like shell access is not avaliable for users and restricted for apps, <strong>making iOS not fully Unix-compatible either.</strong></p>
<p>The iOS kernal is <strong>XNU</strong>, the kernal of Darwin.</p>
<h4 id="XNU-Kernel"><a href="#XNU-Kernel" class="headerlink" title="XNU Kernel"></a>XNU Kernel</h4><p>XNU, the acronym(首字母缩写) for <strong><em>X is Not Unix</em></strong>, which is the <strong>Computer OS Kernel</strong> developed at Apple Inc since Dec 1996 for use in the Mac OS X and released as free open source software as part of Darwin.</p>
<hr>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><blockquote>
<p>Linux is a Unix-like and mostly POSIX-compliant computer OS.</p>
</blockquote>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png" alt="Unix_timeline"></p>
<h4 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h4><p>严格来讲，术语 Linux 只表示 <a href="http://en.wikipedia.org/wiki/Linux_kernel" target="_blank" rel="external">Linux Kernel</a> 操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus 编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project 的一部分。</p>
<p>但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU Project Software Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的 OS 的统称。（包括各类 Distribution 发行版）</p>
<p>这类操作系统也被称为 <strong>GNU/Linux</strong></p>
<h4 id="GNU-Project"><a href="#GNU-Project" class="headerlink" title="GNU Project"></a>GNU Project</h4><p>The GNU Project is a <strong>free software, mass collaboration</strong> project, which based on the following freedom rights:</p>
<ul>
<li>Users are free to run the software, share (copy, distribute), study and modify it.</li>
<li>GNU software guarantees these freedom-rights legally (via its license).</li>
<li>So it is not only FREE but, more important, FREEDOM.</li>
</ul>
<p>In order to ensure that the <em>entire</em> software of a computer grants its users all freedom rights (use, share, study, modify), even the most fundamental and important part, <strong>the operating system</strong>, needed to be written.</p>
<p>This OS is decided to called <strong>GNU (a recursive acronym meaning “GNU is not Unix”)</strong>. By 1992, the GNU Project had completed all of the major OS components except for their kernel, <em>GNU Hurd</em>.</p>
<p>With the release of the third-party <strong>Linux Kernel</strong>, started independently by <em>Linus Torvalds</em> in 1991 and released under the GPLv0.12 in 1992, for the first time it was possible to run an OS <strong>composed completely of free software</strong>.</p>
<p>Though the Linux kernel is not part of the GNU project, it was developed using GCC and other GNU programming tools and was released as free software under the GPL.</p>
<p>Anyway, there eventually comes to the <strong>GNU/Linux</strong></p>
<ul>
<li><strong>GPL</strong>: GNU General Public License</li>
<li><strong>GCC</strong>: GNU Compiler Collection</li>
</ul>
<p>其他与 GPL 相关的自由/开源软件公共许可证：</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Mozilla_Public_License" target="_blank" rel="external">Mozilla Public License</a></li>
<li><a href="http://en.wikipedia.org/wiki/MIT_License" target="_blank" rel="external">MIT License</a></li>
<li><a href="http://en.wikipedia.org/wiki/BSD_licenses" target="_blank" rel="external">BSD Public License</a><ul>
<li>GPL 强制后续版本必须是自由软件，而 BSD 的后续可以选择继续开源或者封闭</li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Apache_License" target="_blank" rel="external">Apache License</a></li>
</ul>
<p><img src="http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png" alt="Public License"></p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>Android is a mobile OS based on <strong>Linux Kernel</strong>, so it’s definitely <strong>Unix-like</strong>.  </p>
<p><strong>Linux is under GPL so Android has to be open source</strong>.<br>Android’s source code is released by Google under open source licenses, although most Android devices ultimately ship with a combination of open source and proprietary software, including proprietary software developed and licensed by Google <em>(GMS are all proprietary)</em>  </p>
<h4 id="Android-Kernel"><a href="#Android-Kernel" class="headerlink" title="Android Kernel"></a>Android Kernel</h4><p>Android’s kernel is based on one of the Linux kernel’s long-term support (LTS) branches.   </p>
<p><strong>Android’s variant of the Linux kernel</strong> has further architectural changes that are implemented by Google outside the typical Linux kernel development cycle, and, certain features that Google contributed back to the Linux kernel. Google maintains a public code repo that contains their experimental work to re-base Android off the latest stable Linux versions.</p>
<p>Android Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux 最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux in the traditional Unix-like Linux distribution sense. 总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel 大概就是 fork Linux Kernel 之后改动和定制比较深的例子。</p>
<h4 id="Android-ROM"><a href="#Android-ROM" class="headerlink" title="Android ROM"></a>Android ROM</h4><p>既然提到 Android 就不得不提提 Android ROM</p>
<p>ROM 的本义实际上是只读内存：  </p>
<p><strong>Read-only memory</strong> (ROM) is a class of storage medium used in computers and other electronic devices. Data stored in ROM can only be modified slowly, with difficulty, or not at all, so it is <strong>mainly used to distribute firmware (固件)</strong> (software that is very closely tied to specific hardware, and unlikely to need frequent updates).</p>
<p>ROM 在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了 Flash  </p>
<ul>
<li>PROM (Programmable read-only memory)</li>
<li>EPROM (Erasable programmable read-only memory)</li>
<li>EEPROM (Electrically erasable programmable read-only memory)<ul>
<li>Flash memory (闪存)</li>
</ul>
</li>
</ul>
<p>Flash 的出现是历史性的，它不但可以作为 ROM 使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flash drives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。</p>
<p>所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM 真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM 里烧下去的程序就被称作 firmware ，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而 ROM 这个词也就这么沿用下来了。</p>
<p>所以在 wiki 里是没有 Android ROM 这个词条的，只有 <a href="http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares" target="_blank" rel="external">List of custom Android firmwares</a></p>
<blockquote>
<p>A custom firmware, also known as a custom ROM, ROM, or custom OS, is an aftermarket distribution of the Android operating system. They are based on the Android Open Source Project (AOSP), hence most are open-sourced releases, unlike proprietary modifications by device manufacturers.</p>
</blockquote>
<p>各类 Android ROM 在 Android 词类下也都是属于 <strong>Forks and distributions</strong> 一类的。</p>
<p>所以我说，其实各类 Android ROM 也好，fork Android 之流的 YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……<strong>其实 ROM 和 Distribution OS 的界限是很模糊的</strong>，为什么 Android 就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC 呢？</p>
<h4 id="Chrome-OS"><a href="#Chrome-OS" class="headerlink" title="Chrome OS"></a>Chrome OS</h4><p>Chrome OS is an operating system based on the <strong>Linux kernel</strong> and designed by Google to work with web applications and installed applications.</p>
<p>虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……</p>
<ul>
<li><strong>Chrome Packaged Application</strong> (Support working offline and installed)</li>
<li><strong>Android App Runtime</strong> (run Android applications natively…fxxking awesome)</li>
</ul>
<p>平复一下激动的心情，还是回到正题来：</p>
<h4 id="Chromium-OS"><a href="#Chromium-OS" class="headerlink" title="Chromium OS"></a>Chromium OS</h4><p>Chrome OS is based on Chromium OS, which is the open-source development version of Chrome OS, which is a <strong>Linux distribution</strong> designed by Google.</p>
<p>For Detail, Chromium OS based on <a href="http://en.wikipedia.org/wiki/Gentoo_Linux" target="_blank" rel="external">Gentoo Linux</a>, emm…</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;This document is not completed and will be updated anytime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Catagory&quot;&gt;&lt;a href=&quot;#Catagory&quot; class=&quot;h
    
    </summary>
    
    
      <category term="OS" scheme="http://wanghaonanlpc.github.io/tags/OS/"/>
    
      <category term="Unix" scheme="http://wanghaonanlpc.github.io/tags/Unix/"/>
    
      <category term="Linux" scheme="http://wanghaonanlpc.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
