<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个老白 | 野厨</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanghaonanlpc.github.io/"/>
  <updated>2017-03-03T15:11:13.000Z</updated>
  <id>http://wanghaonanlpc.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android插件化从入门到放弃</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Android插件化从入门到放弃/</id>
    <published>2017-03-03T14:41:51.000Z</published>
    <updated>2017-03-03T15:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近研究插件化， 偶然发现此合集， 按照部分链接的文章实际简单写了些demo，受益良多， 觉得确实不错，特转载过来，给需要的人。</p>
</blockquote>
<h6 id="相关项目：Android-组件化和插件化开发"><a href="#相关项目：Android-组件化和插件化开发" class="headerlink" title="相关项目：Android 组件化和插件化开发"></a><a href="https://wanghaonanlpc.github.io/2017/03/03/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/">相关项目：Android 组件化和插件化开发</a></h6><p>插件化涉及的东西很多，所以我们需要多个维度去学习。大概分为5个部分：预备知识、入门、进阶、系列、类库。一步一步深入了解插件的原理。本专栏会不定时更新相关内容，请留意更新的消息。请加入QQ群：149581646.会统一通知最新的文章。<br>Posted2016-03-16<br>by Jomeslu.</p>
<p><strong>基础</strong><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="external">1.Java 类加载器</a><br>类加载器（class loader）是 Java中的一个很重要的概念。类加载器负责加载 Java 类的字节代码到 Java 虚拟机中。本文首先详细介绍了 Java 类加载器的基本概念，包括代理模式、加载类的具体过程和线程上下文类加载器等，接着介绍如何开发自己的类加载器，最后介绍了类加载器在 Web 容器和 OSGi中的应用。</p>
<p><a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH16.md" target="_blank" rel="external">2.反射原理</a><br>Java 提供的反射機制允許您於執行時期動態載入類別、檢視類別資訊、生成物件或操作生成的物件，要舉反射機制的一個應用實例，就是在整合式開發環境中所提供的方法提示或是類別檢視工具，另外像 JSP 中的 JavaBean 自動收集請求資訊也使用到反射，而一些軟體開發框架（Framework）也常見到反射機制的使用，以達到動態載入使用者自訂類別的目的。</p>
<p><a href="http://www.jianshu.com/p/6f6bb2f0ece9" target="_blank" rel="external">3.代理模式及Java实现动态代理</a><br>定义：给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。</p>
<p><strong>入门</strong><br><a href="http://blog.csdn.net/u013478336/article/details/50734108" target="_blank" rel="external">1.Android动态加载dex技术初探</a><br>Android使用Dalvik虚拟机加载可执行程序，所以不能直接加载基于class的jar，而是需要将class转化为dex字节码，从而执行代码。优化后的字节码文件可以存在一个<em>.jar中，只要其内部存放的是</em>.dex即可使用。</p>
<p><a href="http://104.236.134.90/2016/02/02/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%9F%BA%E7%A1%80/" target="_blank" rel="external">2.Android插件化入门</a><br>开发者将插件代码封装成Jar或者APK。宿主下载或者从本地加载Jar或者APK到宿主中。将宿主调用插件中的算法或者Android特定的Class（如Activity）</p>
<p><a href="http://blog.csdn.net/u010687392/article/details/47121729?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">3.插件化开发—动态加载技术加载已安装和未安装的apk</a><br>动态加载技术就是使用类加载器加载相应的apk、dex、jar（必须含有dex文件），再通过反射获得该apk、dex、jar内部的资源（class、图片、color等等）进而供宿主app使用。</p>
<p><a href="https://blog.tingyun.com/web/article/detail/166" target="_blank" rel="external">4.Android动态加载技术三个关键问题详解</a><br>动态加载技术（也叫插件化技术）在技术驱动型的公司中扮演着相当重要的角色，当项目越来越庞大的时候，需要通过插件化来减轻应用的内存和CPU占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。</p>
<p><strong>进阶</strong><br><a href="http://mp.weixin.qq.com/s?__biz=MzAwMTcwNTE0NA==&amp;mid=400217391&amp;idx=1&amp;sn=86181541ce0164156dfab135ed99bb5c&amp;scene=0&amp;key=b410d3164f5f798e61a5d4afb759fa38371c8b119384c6163a30c28163b4d4d5f59399f2400800ec842f1d0e0ffb84af&amp;ascene=0&amp;uin=MjExMjQ&amp;pass_ticket=Nt5Jaa28jjFxcQO9o+vQiXX+0iXG5DlZlHNW97Fk1Ew=" target="_blank" rel="external">1.携程Android App插件化和动态加载实践</a><br>携程Android App的插件化和动态加载框架已上线半年，经历了初期的探索和持续的打磨优化，新框架和工程配置经受住了生产实践的考验。本文将详细介绍Android平台插件式开发和动态加载技术的原理和实现细节，回顾携程Android App的架构演化过程，期望我们的经验能帮助到更多的Android工程师。</p>
<p><a href="http://blog.csdn.net/hkxxx/article/details/42194387" target="_blank" rel="external">2.动态加载APK原理分享</a><br>被加载的apk称之为插件，因为机制类似于生物学的”寄生”，加载了插件的应用也被称为宿主。 往往不是所有的apk都可作为插件被加载，往往需要遵循一定的”开发规范”，还需要插件项目引入某种api类库，业界通常都是这么做的。</p>
<p><a href="http://www.cnblogs.com/coding-way/p/4669591.html" target="_blank" rel="external">3.Android插件化的一种实现</a><br>Android的插件化已经是老生常谈的话题了，插件化的好处有很多：解除代码耦合，插件支持热插拔，静默升级，从根本上解决65K属性和方法的bug等等。下面给大家介绍一下我们正在用的差价化框架。本片主要以类图的方式向大家介绍插件话框架的实现。</p>
<p><a href="http://mogu.io/117-117" target="_blank" rel="external">4.蘑菇街 App 的组件化之路</a><br>随着我街业务的蓬勃发展，产品和运营随时上新功能新活动的需求越来越强烈，经常可以听到“有个功能我想周x上，行不行”。行么？当然是不行啦，上新功能得发新版本啊，到时候费时费力打乱开发节奏不说，覆盖率也是个问题。</p>
<p><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/FFish/DynamicLoadApk%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">5.DynamicLoadApk 源码解析</a><br>DynamicLoadApk 是一个开源的 Android 插件化框架。插件化的优点包括：(1) 模块解耦，(2) 动态升级，(3) 高效并行开发(编译速度更快) (4) 按需加载，内存占用更低等等DynamicLoadApk 提供了 3 种开发方式，让开发者在无需理解其工作原理的情况下快速的集成插件化功能。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="external">6.Android apk动态加载机制的研究</a><br>问题是这样的：我们知道，apk必须安装才能运行，如果不安装要是也能运行该多好啊，事实上，这不是完全不可能的，尽管它比较难实现。在理论层面上，我们可以通过一个宿主程序来运行一些未安装的apk，当然，实践层面上也能实现，不过这对未安装的apk有要求。我们的想法是这样的，首先要明白apk未安装是不能被直接调起来.</p>
<p><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">7.美团Android DEX自动拆包及动态加载简介</a><br>作为一个android开发者，在开发应用时，随着业务规模发展到一定程度，不断地加入新功能、添加新的类库，代码在急剧的膨胀，相应的apk包的大小也急剧增加， 那么终有一天，你会不幸遇到这个错误.</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwOTE0ODEwMQ==&amp;mid=401731625&amp;idx=1&amp;sn=9bf2bacfbba43ba9dc7b2e854b64e66c&amp;scene=23&amp;srcid=1231ni0s2Y0OMfYSoNhkkJ47#rd&amp;ADUIN=289832127&amp;ADSESSION=1451551778&amp;ADTAG=CLIENT.QQ.5425_.0&amp;ADPUBNO=26509" target="_blank" rel="external">8.途牛原创|途牛Android App的插件实现</a><br>途牛的插件化是基于dynamic-load-apk（github）实现的。定义了宿主和插件的通信方式，使得两者能够互起对方的页面，调用彼此的功能。同时对activity的启动方式singletask等进行了模式实现，并增加了对Service的支持等。总之使得插件开发最大限度的保持着原有的Android开发习惯。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/23387079" target="_blank" rel="external">9. Android apk资源加载和activity生命周期管理</a><br>博主分析了Android中apk的动态加载机制，并在文章的最后指出需要解决的两个复杂问题：资源的访问和activity生命周期的管理，而本文将会分析这两个复杂问题的解决方法。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639" target="_blank" rel="external">10.APK动态加载框架（DL）解析</a><br>首先要说的是动态加载技术（或者说插件化）在技术驱动型的公司中扮演这相当重要的角色，当项目越来越庞大的时候，需要通过插件化来减轻应用的内存和cpu占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。</p>
<p><strong>系列</strong><br><a href="https://segmentfault.com/a/1190000004062866" target="_blank" rel="external">1.Kaedea—Android动态加载技术 简单易懂的介绍</a><br>我们很早开始就在Android项目中采用了动态加载技术，主要目的是为了达到让用户不用重新安装APK就能升级应用的功能（特别是 SDK项目），这样一来不但可以大大提高应用新版本的覆盖率，也减少了服务器对旧版本接口兼容的压力，同时如果也可以快速修复一些线上的BUG。</p>
<p><a href="https://segmentfault.com/a/1190000004062880" target="_blank" rel="external">2.Kaedea—Android动态加载基础 ClassLoader的工作机制</a><br>早期使用过Eclipse等Java编写的软件的同学可能比较熟悉，Eclipse可以加载许多第三方的插件（或者叫扩展），这就是动态加载。这些插件大多是一些Jar包，而使用插件其实就是动态加载Jar包里的Class进行工作。</p>
<p><a href="https://segmentfault.com/a/1190000004062899" target="_blank" rel="external">3.Kaedea—Android动态加载补充 加载SD卡的SO库</a><br>Android中JNI的使用其实就包含了动态加载，APP运行时动态加载.so库并通过JNI调用其封装好的方法。后者一般是使用NDK工具从C/C++代码编译而成，运行在Native层，效率会比执行在虚拟机的Java代码高很多，所以Android中经常通过动态加载.so库来完成一些对性能比较有需求的工作（比如T9搜索、或者Bitmap的解码、图片高斯模糊处理等）。</p>
<p><a href="https://segmentfault.com/a/1190000004062952" target="_blank" rel="external">4.Kaedea—Android动态加载入门 简单加载模式</a><br>Java程序中，JVM虚拟机是通过类加载器ClassLoader加载.jar文件里面的类的。Android也类似，不过Android用的是Dalvik/ART虚拟机，不是JVM，也不能直接加载.jar文件，而是加载dex文件。</p>
<p><a href="https://segmentfault.com/a/1190000004062972" target="_blank" rel="external">5.Kaedea—Android动态加载进阶 代理Activity模式</a><br>简单模式中，使用ClassLoader加载外部的Dex或Apk文件，可以加载一些本地APP不存在的类，从而执行一些新的代码逻辑。但是使用这种方法却不能直接启动插件里的Activity。</p>
<p><a href="https://segmentfault.com/a/1190000004077469" target="_blank" rel="external">6.Kaedea—Android动态加载黑科技 动态创建Activity模式</a><br>还记得我们在代理Activity模式里谈到启动插件APK里的Activity的两个难题吗，由于插件里的Activity没在主项目的Manifest里面注册，所以无法经历系统Framework层级的一系列初始化过程，最终导致获得的Activity实例并没有生命周期和无法使用res资源。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823" target="_blank" rel="external">7.尼古拉斯—插件开发基础篇：动态加载技术解读</a><br>在目前的软硬件环境下，Native App与Web App在用户体验上有着明显的优势，但在实际项目中有些会因为业务的频繁变更而频繁的升级客户端，造成较差的用户体验，而这也恰恰是Web App的优势。本文对网上Android动态加载jar的资料进行梳理和实践在这里与大家一起分享，试图改善频繁升级这一弊病。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/41384667" target="_blank" rel="external">8.尼古拉斯—插件开发开篇：类加载器分析</a><br>这篇文章主要介绍了Android中主要的两个类加载器：PathClassLoader和DexClassLoader,他们的区别，联系，用法等问题，以及我们在制作插件的过程中会遇到哪些常见的问题。这篇文章也是后续两篇文章的基础，因为如果不了解这两个类的话，我们将无法进行后续的操作。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/47679843" target="_blank" rel="external">9.尼古拉斯—插件开发中篇：资源加载问题(换肤原理解析)</a><br>这篇文章主要通过现在一些应用自带的换肤技术的解读来看看，在开发插件的过程中如何解决一些资源加载上的问题，这个问题为何要单独拿出来解释，就是因为他涉及的知识很多，也是后面一篇文章的基础，我们在需要加载插件中的资源文件的时候。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104455" target="_blank" rel="external">10.尼古拉斯—插件开发终极篇：动态加载Activity(免安装运行程序)</a><br>这篇文章主要是讲解了如何加载插件中的Activity。从而实现免安装运行程序，同时这篇文章也是对前三篇文章知识的综合使用。下载很多应用都会使用到插件技术，因为包的大小和一些功能的优先级来决定哪些模块可以制作成插件。</p>
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="external">11.Weishu—Android插件化原理解析——概要</a><br>类的加载可以使用Java的ClassLoader机制，但是对于Android来说，并不是说类加载进来就可以用了，很多组件都是有“生命”的；因此对于这些有血有肉的类，必须给它们注入活力，也就是所谓的组件生命周期管理.</p>
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/" target="_blank" rel="external">12.Weishu—Android插件化原理解析——Hook机制之动态代理</a><br>使用代理机制进行API Hook进而达到方法增强是框架的常用手段，比如J2EE框架Spring通过动态代理优雅地实现了AOP编程，极大地提升了Web开发效率；同样，插件框架也广泛使用了代理机制来增强系统API从而达到插件化的目的.</p>
<p><a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/" target="_blank" rel="external">13.Weishu—Android插件化原理解析——Hook机制之Binder Hook</a><br>Android系统通过Binder机制给应用程序提供了一系列的系统服务，诸如ActivityManagerService，ClipboardManager， AudioManager等；这些广泛存在系统服务给应用程序提供了诸如任务管理，音频，视频等异常强大的功能。</p>
<p><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/" target="_blank" rel="external">14.Weishu—Android 插件化原理解析——Hook机制之AMS&amp;PMS</a><br>在前面的文章中我们介绍了DroidPlugin的Hook机制，也就是代理方式和Binder Hook；插件框架通过AOP实现了插件使用和开发的透明性。在讲述DroidPlugin如何实现四大组件的插件化之前，有必要说明一下它对AMS以及PMS的Hook方式。</p>
<p><a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/" target="_blank" rel="external">15.Weishu—Android 插件化原理解析——Activity生命周期管理</a><br>之前的 Android插件化原理解析 系列文章揭开了Hook机制的神秘面纱，现在我们手握倚天屠龙，那么如何通过这种技术完成插件化方案呢？具体来说，插件中的Activity，Service等组件如何在Android系统上运行起来？</p>
<p><a href="http://weishu.me/2016/04/05/understand-plugin-framework-classloader/" target="_blank" rel="external">16.Weishu—Android 插件化原理解析——插件加载机制</a><br>上文 Activity生命周期管理 中我们地完成了『启动没有在AndroidManifest.xml中显式声明的Activity』的任务；通过Hook AMS和拦截ActivityThread中H类对于组件调度我们成功地绕过了AndroidMAnifest.xml的限制。</p>
<p><a href="http://weishu.me/2016/04/12/understand-plugin-framework-receiver/" target="_blank" rel="external">17.Weishu—Android插件化原理解析——广播的管理</a><br>在Activity生命周期管理 以及 插件加载机制 中我们详细讲述了插件化过程中对于Activity组件的处理方式，为了实现Activity的插件化我们付出了相当多的努力；那么Android系统的其他组件，比如BroadcastReceiver，Service还有ContentProvider，它们又该如何处理呢？</p>
<p><a href="http://weishu.me/2016/05/11/understand-plugin-framework-service/" target="_blank" rel="external">18.Weishu—Android 插件化原理解析——Service的插件化</a><br>在 Activity生命周期管理 以及 广播的管理 中我们详细探讨了Android系统中的Activity、BroadcastReceiver组件的工作原理以及它们的插件化方案，相信读者已经对Android Framework和插件化技术有了一定的了解；</p>
<p><strong>类库</strong><br><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">1.DroidPlugin</a><br>是360手机助手在Android系统上实现了一种新的插件机制<br><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">2.Android-Plugin-Framework</a><br>此项目是Android插件开发框架完整源码及示例。用来通过动态加载的方式在宿主程序中运行插件APK。<br><a href="https://github.com/wequick/Small" target="_blank" rel="external">3.Small</a><br>世界那么大，组件那么小。Small，做最轻巧的跨平台插件化框架。里面有很详细的文档<br><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">4.dynamic-load-apk</a><br>Android 使用动态加载框架DL进行插件化开发<br><a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">5.AndroidDynamicLoader</a><br>Android 动态加载框架，他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">6.DynamicAPK</a><br>实现Android App多apk插件化和动态加载，支持资源分包和热修复.携程App的插件化和动态加载框架.<br><a href="https://github.com/bunnyblue/ACDD/blob/master/README-Zh.md" target="_blank" rel="external">7.ACDD</a><br>非代理Android动态部署框架<br><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">8.android-pluginmgr</a><br>不需要插件规范的apk动态加载框架。</p>
<p><strong>参考视频</strong><br><a href="http://www.infoq.com/cn/presentations/the-realization-principle-and-application-of-droidplugin" target="_blank" rel="external">1.DroidPlugin的实现原理及其应用</a><br>Droid Plugin是360手机助手在2015年初研发的一个全新的基于Android平台的插件机制.<br><a href="http://v.youku.com/v_show/id_XNTMzMjYzMzM2.html" target="_blank" rel="external">2.android插件化及动态部署</a><br>阿里技术沙龙第十六期《android插件化及动态部署》视频</p>
<p><strong>最近期待</strong></p>
<p><a href="2016/12/27/VirtualAPK-滴滴-Android-插件化的实践之路/">VirtualAPK: 滴滴 Android 插件化的实践之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近研究插件化， 偶然发现此合集， 按照部分链接的文章实际简单写了些demo，受益良多， 觉得确实不错，特转载过来，给需要的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;相关项目：Android-组件化和插件化开发&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="插件化" scheme="http://wanghaonanlpc.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 组件化和插件化开发</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Android-组件化和插件化开发/</id>
    <published>2017-03-03T14:37:18.000Z</published>
    <updated>2017-03-03T15:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>重点是末尾开源框架列表</p>
</blockquote>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fda139k6jgj30fa080mxf.jpg" alt=""></p>
<p>组件化开发就是将一个app分成多个模块，每个模块都是一个组件（Module），开发的过程中我们可以让这些组件相互依赖或者单独调试部分组件等，但是最终发布的时候是将这些组件合并统一成一个apk，这就是组件化开发。</p>
<p>插件化开发和组件化开发略有不用，插件化开发时将整个app拆分成很多模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk（组件化的每个模块是个lib），最终打包的时候将宿主apk和插件apk分开或者联合打包。</p>
<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>android工程的组件一般分为两种，lib组件和application组件</p>
<p>application组件是指该组件本身就可以运行并打包成apk</p>
<p>lib组件是指该组件属于app的一部分，可以供其它组件使用但是本身不能打包成apk</p>
<h4 id="为什么要有组件化？"><a href="#为什么要有组件化？" class="headerlink" title="为什么要有组件化？"></a>为什么要有组件化？</h4><p>加入一个app工程只有一个组件，随着app业务的壮大模块越来越多，代码量超10万是很正常的，这个时候我们会遇到以下问题</p>
<ul>
<li>稍微改动一个模块的一点代码都要编译整个工程，耗时耗力</li>
<li>公共资源、业务、模块混在一起耦合度太高</li>
<li>不方便测试</li>
</ul>
<h4 id="组件化正确的姿势"><a href="#组件化正确的姿势" class="headerlink" title="组件化正确的姿势"></a>组件化正确的姿势</h4><p>既然选择使用组件化，那么如何正确的使用它呢？这里给出一种解决方案，如果你有更好的方案，欢迎交流。</p>
<p>我们创建了一个app工程project，默认里面有一个app组件，这个app组件是可以直接运行的。</p>
<p>怎么划分组件呢？</p>
<ul>
<li>1.新建一个lib组件，new Module—&gt;Andorid Library，取名BaseUtilLib，我们将所有的公共的工具类、网络分装等类放在其中</li>
<li>2.新建一个lib组件，BaseReslLib，我们将所有的公共资源、drawable、String等类放在其中</li>
<li>3.将app按照自己的规则划分成多个模块，比如按业务按地区等都可以</li>
<li>4.逐一开发某个模块，比如Test模块，新建一个TestApp组件，TestApp组件引用[1][2]步骤的BaseUtilLib和BaseReslLib，在TestApp组件里添加并引用TestLib组件。在TestLib的activity中写代码写业务逻辑，TestApp只负责跳转和测试</li>
<li>5.将工程中的所有类似TestLib组件（不是TestApp组件）引入到工程的app中<br>看着有点乱，整理出一张图<br><img src="http://img2.tuicool.com/NbQZV3R.png!web" alt="img"></li>
</ul>
<p>这样的好处有</p>
<p>每个模块可以独立开发编译运行</p>
<p>开发单个模块时可以共享资源和工具类</p>
<p>可以针对单个模块测试</p>
<p><a href="https://github.com/halibobo/ModuleBuild" target="_blank" rel="external">demo地址：https://github.com/halibobo/ModuleBuild</a></p>
<h2 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h2><h4 id="为什么有插件化？"><a href="#为什么有插件化？" class="headerlink" title="为什么有插件化？"></a>为什么有插件化？</h4><p>有了组件化，为什么还要用插件化呢？插件化开发总的来说有以下几点好处（不同插件框架不一样）：</p>
<ul>
<li>宿主和插件分开编译</li>
<li>并发开发</li>
<li>动态更新插件</li>
<li>按需下载模块</li>
<li>方法数或变量数爆棚</li>
</ul>
<h4 id="处境"><a href="#处境" class="headerlink" title="处境"></a>处境</h4><p>开放出来的插件化开发框架比较多，他们各自都有自己的优势和和不足，实现的原理也有差别下面列</p>
<h4 id="开源的插件化框架"><a href="#开源的插件化框架" class="headerlink" title="开源的插件化框架"></a>开源的插件化框架</h4><ul>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">Qihoo360/DroidPlugin</a></li>
<li><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">CtripMobile/DynamicAPK</a></li>
<li><a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">mmin18/AndroidDynamicLoader</a></li>
<li><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">singwhatiwanna/dynamic-load-apk</a></li>
<li><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">houkx/android-pluginmgr</a></li>
<li><a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">bunnyblue/ACDD</a></li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">wequick/Small</a></li>
<li>……</li>
</ul>
<p>目前开源的这几个框架有宿主和插件分离的也有融合在一起的，每个框架的详细介绍和demo在github里都可以查看到。插件化demo运行起来比较简单，但是真正将它用到实际项目中还是要考虑很多小细节的，目前我也正处于研究阶段。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;重点是末尾开源框架列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tNbRwly1fda139k6jgj30fa080mxf.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lottie简介：Airbnb为本地应用程序添加动画的工具(翻译)</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie（翻译）/</id>
    <published>2017-03-03T03:23:46.000Z</published>
    <updated>2017-03-03T03:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介Lottie"><a href="#简介Lottie" class="headerlink" title="简介Lottie"></a>简介Lottie</h2><blockquote>
<p><a href="http://airbnb.design/lottie/" target="_blank" rel="external">官网地址：http://airbnb.design/lottie/</a></p>
<p><a href="https://github.com/airbnb" target="_blank" rel="external">Airbnb Github地址：https://github.com/airbnb</a></p>
<p>作者：<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>，<a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>，<a href="https://twitter.com/intelligibabble" target="_blank" rel="external">Leland Richardson</a>和<a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">Salih Abdul-Karim</a></p>
<p><a href="http://airbnb.design/category/behind-the-scenes/" target="_blank" rel="external">在幕后</a>  /由SALIH ABDUL-KARIM / 02.03<br><a href="http://airbnb.design/tag/animation/" target="_blank" rel="external">#ANIMATION </a><a href="http://airbnb.design/tag/design/" target="_blank" rel="external">#DESIGN </a><a href="http://airbnb.design/tag/engineering/" target="_blank" rel="external">#ENGINEERING </a><a href="http://airbnb.design/tag/motion/" target="_blank" rel="external">#MOTION </a><a href="http://airbnb.design/tag/open-source/" target="_blank" rel="external">#OPEN SOURCE </a><a href="http://airbnb.design/tag/tools/" target="_blank" rel="external">#TOOLS</a></p>
</blockquote>
<h2 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h2><h3 id="在我们的新的开源动画工具的幕后。"><a href="#在我们的新的开源动画工具的幕后。" class="headerlink" title="在我们的新的开源动画工具的幕后。"></a>在我们的新的开源动画工具的幕后。</h3><p>在过去，为Android，iOS和React Native应用程序构建复杂的动画是一个困难和漫长的过程。你必须为每个屏幕大小添加庞大的图像文件，或者编写一千行脆弱，难以维护的代码。因此，大多数应用程序不使用动画 - 尽管它是一个强大的工具，用于交流想法和创造引人注目的用户体验。一年前，我们开始改变这一点。</p>
<p>今天，我们很乐意介绍我们的解决方案。Lottie是一个iOS，Android和React Native库，可以实时渲染After Effects动画，并允许本机应用程序像使用静态资源一样轻松地使用动画。Lottie使用从开源的After Effects扩展名为<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>导出为JSON文件的动画数据。扩展程序与JavaScript播放器捆绑在一起，可以在网络上呈现动画。自2015年2月以来，Bodymovin的创始人<a href="https://twitter.com/airnanan" target="_blank" rel="external">Hernan Torrisi</a>已经通过每月为插件添加功能和改进功能打下坚实的基础。我们的团队（<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>的<a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>，<a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>的<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>，</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt="图标"></p>
<p>Lottie允许工程师构建更丰富的动画，而没有重写他们的艰苦的开销。Nick Butcher <a href="https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.xlw1n2u2d" target="_blank" rel="external">跳过</a>动画，Bartek Lipinski的<a href="https://android.jlelse.eu/animatedvectordrawablecompat-3d9568727c53#.fmiujhcdj" target="_blank" rel="external">汉堡包菜单</a>和Miroslaw Stanek的<a href="http://frogermcs.github.io/twitters-like-animation-in-android-alternative/" target="_blank" rel="external">Twitter心脏</a>展示了多么困难和耗时，可以从头开始重新创建动画。与Lottie，挖掘框架参考，猜测持续时间，手动创建Bézier曲线，并重新制作动画只是一个GIF的参考将是一个过去。现在工程师可以准确地使用设计师的意图，它是如何做的。为了演示这一点，我们重新创建了他们的动画，并在我们的示例应用程序中提供了After Effects和JSON文件。</p>
<p>我们的目标是尽可能支持尽可能多的After Effects功能，以允许比简单的图标动画更多。我们创建了一些其他例子来展示图书馆的灵活性，丰富性和深入的功能集。在示例应用程序中，还有各种不同种类的动画的源文件，包括基本线条艺术，基于字符的动画，以及具有多个角度和剪切的动态徽标动画。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt="screens_1"></p>
<p>我们已经开始在几个屏幕上发布我们自己的Lottie动画，包括应用内通知，全帧动画插图和在我们的审查流程。我们计划以一种有趣而有用的方式大大扩展我们对动画的使用。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt="screens_2"></p>
<h2 id="灵活高效的解决方案"><a href="#灵活高效的解决方案" class="headerlink" title="灵活高效的解决方案"></a><strong>灵活高效的解决方案</strong></h2><p>Airbnb是一家支持数百万客人和主机的全球性公司，因此拥有一个可在多个平台上播放的灵活动画格式对我们来说非常重要。有类似于Lottie的图书馆，如Marcus Eckert的<a href="http://www.marcuseckert.com/squall/" target="_blank" rel="external">Squall</a>和Facebook的<a href="https://github.com/facebookincubator/Keyframes" target="_blank" rel="external">关键帧</a>，但我们的目标略有不同。Facebook选择了一套After Effects功能来支持，因为他们主要关注反应，但我们想尽可能多地支持。对于Squall，Airbnb的设计师将它与Lottie结合使用，因为它有一个惊人的After Effects预览应用程序，它成为我们工作流程的必要部分。但是，它只支持iOS，我们的工程团队需要一个跨平台解决方案。</p>
<p>Lottie还在其API中内置了几个功能，使其更多样化和高效。它支持通过网络加载JSON文件，这对于A / B测试很有用。它还有一个可选的缓存机制，因此经常使用的动画，如愿望列表的心，可以每次加载缓存的副本。Lottie动画可以通过使用动画进度功能的手势驱动，并且动画速度可以通过改变一个简单的值来操纵。iOS甚至支持在运行时为动画添加额外的本地UI，可用于复杂的动画过渡。</p>
<p>除了我们迄今为止所做的所有After Effects特性和API添加之外，我们还有许多未来的想法。这些包括将视图映射到Lottie动画，控制与Lottie的视图过渡，支持<a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">Battle Axe的RubberHose</a>，渐变，类型和图像支持。最难的部分是选择哪些功能来处理下一个。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt="硬件"></p>
<h2 id="建筑社区"><a href="#建筑社区" class="headerlink" title="建筑社区"></a><strong>建筑社区</strong></h2><p>发布一些东西作为开源不仅仅是把它放在那里供公众使用。它是一个桥梁，连接人和创建社区。随着我们越来越接近通过GitHub向设计师和工程师发布Lottie，我们也希望与动画人员保持联系。</p>
<p>我们受到了<a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>，<a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external">Motion Corpse</a>和<a href="https://animography.net/products/mobilo" target="_blank" rel="external">Animography</a>创造的<a href="https://animography.net/products/mobilo" target="_blank" rel="external">社区的启发</a>。所有这三个人都聚集了来自世界各地的人，否则他们永远不会一起工作，在公共动画项目上合作。这些项目需要几个月的工作，很多组织和各自的团队争吵，但他们无疑为整个动画社会提供巨大的价值。运动公司和动画公开共享After Effects源文件，它提供了大量的洞察人们如何工作。</p>
<p>在他们的合作领导下，我们接触了所有三个团队，为我们的示例应用程序贡献动画。我们已经包括了由JR Canest创建的Motion Corpse的动画，来自9 Squares项目的Al Boardman的方块之一，以及使用Animography的Mobilo动画字体的动画键盘，其中包含超过二十个艺术家的作品。我们希望这些动画社区与强大的工程社群的合并将产生一些特别的东西。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt="社区">我们很想听听你如何使用Lottie - 无论你是一个设计师，动画师或工程师。欢迎随时通过lottie@airbnb.com与您的想法，反馈和见解联系。我们很高兴看到当他们开始以我们从未想象的方式使用Lottie时，世界上的社区会做什么。</p>
<h3 id="下载Bodymovin，Lottie-iOS，Android和React-Native。"><a href="#下载Bodymovin，Lottie-iOS，Android和React-Native。" class="headerlink" title="下载Bodymovin，Lottie iOS，Android和React Native。"></a>下载<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>，Lottie <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>，<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>和<a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>。</h3><p>本文由<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>，  <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>  和  <a href="http://airbnb.design/lottie/" target="_blank" rel="external">Salih Abdul-Karim](https://twitter.com/therealsalih?lang=en)共同撰写   。 </a></p>
]]></content>
    
    <summary type="html">
    
      introduce lottie
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="ui" scheme="http://wanghaonanlpc.github.io/tags/ui/"/>
    
      <category term="开源" scheme="http://wanghaonanlpc.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Airbnb" scheme="http://wanghaonanlpc.github.io/tags/Airbnb/"/>
    
  </entry>
  
  <entry>
    <title>Lottie简介：Airbnb为本地应用程序添加动画的工具(原文)</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie-%E5%8E%9F%E6%96%87/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie-原文/</id>
    <published>2017-03-03T03:23:46.000Z</published>
    <updated>2017-03-03T03:57:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://airbnb.design/category/behind-the-scenes/" target="_blank" rel="external">BEHIND THE SCENES</a>     /  BY SALIH ABDUL-KARIM / 02.03<br><a href="http://airbnb.design/tag/animation/" target="_blank" rel="external">#ANIMATION</a> <a href="http://airbnb.design/tag/design/" target="_blank" rel="external">#DESIGN</a> <a href="http://airbnb.design/tag/engineering/" target="_blank" rel="external">#ENGINEERING</a> <a href="http://airbnb.design/tag/motion/" target="_blank" rel="external">#MOTION</a> <a href="http://airbnb.design/tag/open-source/" target="_blank" rel="external">#OPEN SOURCE</a> <a href="http://airbnb.design/tag/tools/" target="_blank" rel="external">#TOOLS</a></p>
<h2 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h2><h3 id="Behind-the-scenes-of-our-new-open-source-animation-tool"><a href="#Behind-the-scenes-of-our-new-open-source-animation-tool" class="headerlink" title="Behind the scenes of our new open-source animation tool."></a>Behind the scenes of our new open-source animation tool.</h3><p>In the past, building complex animations for Android, iOS, and React Native apps was a difficult and lengthy process. You either had to add bulky image files for each screen size or write a thousand lines of brittle, hard-to-maintain code. Because of this, most apps weren’t using animation — despite it being a powerful tool for communicating ideas and creating compelling user experiences. One year ago, we set out to change that.</p>
<p>Today, we’re happy to introduce our solution. Lottie is an iOS, Android, and React Native library that renders After Effects animations in real time, and allows native apps to use animations as easily as they use static assets. Lottie uses animation data exported as JSON files from an open-source After Effects extension called <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>. The extension is bundled with a JavaScript player that can render the animations on the web. Since February of 2015, Bodymovin’s creator, <a href="https://twitter.com/airnanan" target="_blank" rel="external">Hernan Torrisi</a>, has built a solid foundation by adding features and improvements to the plugin on a monthly basis. Our team (<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a> on <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a> on <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>, <a href="https://twitter.com/intelligibabble" target="_blank" rel="external">Leland Richardson</a> on <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>, and <a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">I</a> on experience design) began our journey by building on top of Torrisi’s phenomenal work.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt="icons"></p>
<p>Lottie allows engineers to build richer animations without the painstaking overhead of re-writing them. Nick Butcher’s<a href="https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.xlw1n2u2d" target="_blank" rel="external"> jump through</a> animation, Bartek Lipinski’s <a href="https://android.jlelse.eu/animatedvectordrawablecompat-3d9568727c53#.fmiujhcdj" target="_blank" rel="external">hamburger menu</a>, and Miroslaw Stanek’s <a href="http://frogermcs.github.io/twitters-like-animation-in-android-alternative/" target="_blank" rel="external">Twitter heart</a> demonstrate just how difficult and time consuming it can be to re-create animations from scratch. With Lottie, digging through frameworks for reference, guessing durations, manually creating Bézier curves, and re-making animations with nothing more than a GIF for reference will be a thing of the past. Now engineers can use exactly what the designer intended, exactly how it was made. To demonstrate that, we’ve recreated their animations and provided After Effects and JSON files of each in our sample app.</p>
<p>Our goal is to support as many After Effects features as we possibly can, to allow for a lot more than simple icon animations. We’ve created a handful of other examples to show the library’s flexibility, richness, and deep feature set. In the sample app, there are also source files for a variety of different kinds of animations, including basic line art, character-based animations, and dynamic logo animations with multiple angles and cuts.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt="screens_1"></p>
<p>We’ve already started shipping our own Lottie animations on several screens, including in-app notifications, full-frame animated illustrations, and in our review flow. And we plan to greatly expand our usage of animations in a fun yet useful way moving forward.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt="screens_2"></p>
<h2 id="Flexible-and-efficient-solution"><a href="#Flexible-and-efficient-solution" class="headerlink" title="Flexible and efficient solution"></a><strong>Flexible and efficient solution</strong></h2><p>Airbnb is a global company that supports millions of guests and hosts, so having a flexible animation format that is playable on multiple platforms was extremely important to us. There are libraries similar to Lottie, such as Marcus Eckert’s <a href="http://www.marcuseckert.com/squall/" target="_blank" rel="external">Squall</a> and Facebook’s <a href="https://github.com/facebookincubator/Keyframes" target="_blank" rel="external">Keyframes</a>, but our goals are slightly different. Facebook picked a small set of After Effects features to support, since they were focusing mainly on reactions, but we want to support as many as possible. As for Squall, designers at Airbnb use it in combination with Lottie because it has an amazing After Effects preview app that’s become a necessary part of our workflow. However, it only supports iOS and our engineering teams needed a cross-platform solution.</p>
<p>Lottie also has several features built into its API to make it more versatile and efficient. It supports loading JSON files over the network, which is useful for A/B testing. It also has an optional caching mechanism, so frequently used animations, such as a wish-list heart, can load a cached copy each time. Lottie animations can be driven by gestures using the animated progress feature, and animation speed can be manipulated by changing a simple value. iOS even supports adding additional native UI to an animation at runtime, which can be used for complex animated transitions.</p>
<p>In addition to all of the After Effects features and API additions we’ve worked on so far, we have many ideas for the future. These include mapping views to Lottie animations, controlling view transitions with Lottie, support for <a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">Battle Axe’s RubberHose</a>, gradient, type, and image support. The hardest part is picking which features to tackle next.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt="hardware"></p>
<h2 id="Building-community"><a href="#Building-community" class="headerlink" title="Building community"></a><strong>Building community</strong></h2><p>Releasing something as open source is more than just putting it out there for the public to use. It’s a bridge that connects people and creates community. As we got closer to releasing Lottie to designers and engineers via GitHub, we wanted to be sure to connect with the animation folks as well.</p>
<p>We were inspired by the communities that <a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>, <a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external">Motion Corpse</a>, and <a href="https://animography.net/products/mobilo" target="_blank" rel="external">Animography</a> have created. All three have brought together people from around the world, who otherwise would never have worked together, to collaborate on public animation projects. These projects take months of work and a lot of organization and wrangling by the respective teams, but they undoubtedly provide immense value for the animation community as a whole. Motion Corpse and Animography publicly share the After Effects source files as well, which provide tons of insights on how people work.</p>
<p>Following their collaborative lead, we reached out to all three teams to contribute animations to our sample app. We’ve included an animation from Motion Corpse created by J.R. Canest, one of Al Boardman’s squares from the 9 Squares project, and an animated keyboard using Animography’s Mobilo animated typeface, which features work from more than two dozen artists. We’re hoping that the merging of these animation communities with the powerful engineering community will spark something special.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt="community">We’d love to hear how you’re using Lottie — no matter if you’re a designer, animator, or engineer. Feel free to reach out to us directly at lottie@airbnb.com with your thoughts, feedback, and insights. We’re excited to see what the community around the world will do when they begin to use Lottie in ways we never imagined.</p>
<h3 id="Download-Bodymovin-Lottie-iOS-Android-and-React-Native"><a href="#Download-Bodymovin-Lottie-iOS-Android-and-React-Native" class="headerlink" title="Download Bodymovin, Lottie iOS, Android and React Native."></a>Download <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>, Lottie <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a> and <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>.</h3><p>This article was co-written by  <a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>,  <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a> and <a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">Salih Abdul-Karim</a>.</p>
<p><img src="http://airbnb.design/lottie/" alt="Salih Abdul-Karim](http://airbnb.design/wp-content/uploads/2017/01/SalihAbdul-Karim-profile.jpg) Salih Abdul-Karim is an Experience and Motion Designer at Airbnb."></p>
]]></content>
    
    <summary type="html">
    
      introduce lottie
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="ui" scheme="http://wanghaonanlpc.github.io/tags/ui/"/>
    
      <category term="开源" scheme="http://wanghaonanlpc.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Airbnb" scheme="http://wanghaonanlpc.github.io/tags/Airbnb/"/>
    
  </entry>
  
  <entry>
    <title>Bugly实现热更新</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/01/Bugly%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/01/Bugly实现热更新/</id>
    <published>2017-03-01T12:49:44.000Z</published>
    <updated>2017-03-02T05:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>推荐阅读：<a href="http://www.jianshu.com/p/2d0f70e30111#" target="_blank" rel="external">Bugly热更新SDK你需要知道的一些事</a></p>
</blockquote>
<p>列举一些大家比较熟悉的一些热更新方案：</p>
<p>微信开源：<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Tinker</a><br>大众点评：<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a><br>阿里巴巴：<a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">Dexposed</a><br>阿里巴巴：<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a><br>美团：<a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">Robust</a></p>
<p><strong>Bugly也是出于高可用性的考虑，Tinker支持动态下发代码、So库以及资源，所以我们最终选择了Tinker方案作为我们SDK的一项能力。</strong></p>
<p><a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20170205190410" target="_blank" rel="external">Bugly热修复官方文档</a></p>
<h3 id="一、配置参数"><a href="#一、配置参数" class="headerlink" title="一、配置参数"></a>一、配置参数</h3><ul>
<li><strong>添加插件依赖</strong></li>
</ul>
<p>工程根目录下“build.gradle”文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        // tinkersupport插件，其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.3</div><div class="line">        classpath &quot;com.tencent.bugly:tinker-support:latest.release&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、集成SDK"><a href="#二、集成SDK" class="headerlink" title="二、集成SDK"></a>二、集成SDK</h3><ul>
<li><strong>gradle配置</strong></li>
</ul>
<p>在app module的“build.gradle”文件中添加（示例配置）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">      compile &quot;com.android.support:multidex:1.0.1&quot; </div><div class="line">      compile &apos;com.tencent.bugly:crashreport_upgrade:latest.release&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在app module的“build.gradle”文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 依赖插件脚本</div><div class="line">apply from: &apos;tinker-support.gradle&apos;</div></pre></td></tr></table></figure>
<ul>
<li><strong>tinker-support.gradle</strong>内容如下所示（示例配置）：</li>
</ul>
<p><em>需要在同级目录下创建tinker-support.gradle这个文件</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.tencent.bugly.tinker-support&apos;</div><div class="line"></div><div class="line">def bakPath = file(&quot;$&#123;buildDir&#125;/bakApk/&quot;)</div><div class="line"></div><div class="line">def appName = &quot;app-0111-15-18-41&quot;</div><div class="line"></div><div class="line">/**</div><div class="line">* 对于插件各参数的详细解析请参考</div><div class="line">*/</div><div class="line">tinkerSupport &#123;</div><div class="line"></div><div class="line">    // 开启tinker-support插件，默认值true</div><div class="line">    enable = true</div><div class="line"></div><div class="line">    // 指定归档目录，默认值当前module的子目录tinker</div><div class="line">    autoBackupApkDir = &quot;$&#123;bakPath&#125;&quot;</div><div class="line"></div><div class="line">    // 是否启用覆盖tinkerPatch配置功能，默认值false</div><div class="line">    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</div><div class="line">    overrideTinkerPatchConfiguration = true</div><div class="line"></div><div class="line">    // 编译补丁包时，必需指定基线版本的apk，默认值为空</div><div class="line">    // 如果为空，则表示不是进行补丁包的编译</div><div class="line">    // @&#123;link tinkerPatch.oldApk &#125;</div><div class="line">    baseApk =  &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release.apk&quot;</div><div class="line"></div><div class="line">    // 对应tinker插件applyMapping</div><div class="line">    baseApkProguardMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-mapping.txt&quot;</div><div class="line"></div><div class="line">    // 对应tinker插件applyResourceMapping</div><div class="line">    baseApkResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-R.txt&quot;</div><div class="line"></div><div class="line">    // 唯一标识当前版本</div><div class="line">    tinkerId = &quot;1.0.1-base&quot;</div><div class="line"></div><div class="line">    // 是否开启代理Application，设置之后无须改造Application，默认为false</div><div class="line">    enableProxyApplication = false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、初始化SDK"><a href="#三、初始化SDK" class="headerlink" title="三、初始化SDK"></a>三、初始化SDK</h3><p><strong>enableProxyApplication = false 的情况</strong></p>
<ul>
<li>自定义Application</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SampleApplication extends TinkerApplication &#123;</div><div class="line">    public SampleApplication() &#123;</div><div class="line">        super(ShareConstants.TINKER_ENABLE_ALL, &quot;com.yiba.test.buglypatch.SampleApplicationLike&quot;,</div><div class="line">                &quot;com.tencent.tinker.loader.TinkerLoader&quot;, false);</div><div class="line">    &#125;</div><div class="line">&#125;123456123456</div></pre></td></tr></table></figure>
<ul>
<li>自定义ApplicationLike</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class SampleApplicationLike extends DefaultApplicationLike &#123;</div><div class="line"></div><div class="line">    public static final String TAG = &quot;Tinker.SampleApplicationLike&quot;;</div><div class="line"></div><div class="line">    public SampleApplicationLike(Application application, int tinkerFlags,</div><div class="line">            boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime,</div><div class="line">            long applicationStartMillisTime, Intent tinkerResultIntent, Resources[] resources,</div><div class="line">            ClassLoader[] classLoader, AssetManager[] assetManager) &#123;</div><div class="line">        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime,</div><div class="line">                applicationStartMillisTime, tinkerResultIntent, resources, classLoader,</div><div class="line">                assetManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        // 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</div><div class="line">        Bugly.init(getApplication(), &quot;900029763&quot;, true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    @Override</div><div class="line">    public void onBaseContextAttached(Context base) &#123;</div><div class="line">        super.onBaseContextAttached(base);</div><div class="line">        // you must install multiDex whatever tinker is installed!</div><div class="line">        MultiDex.install(base);</div><div class="line"></div><div class="line">        // 安装tinker</div><div class="line">        // TinkerManager.installTinker(this); 替换成下面Bugly提供的方法</div><div class="line">        Beta.installTinker(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    public void registerActivityLifecycleCallback(Application.ActivityLifecycleCallbacks callbacks) &#123;</div><div class="line">        getApplication().registerActivityLifecycleCallbacks(callbacks);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、AndroidManifest-xml配置"><a href="#四、AndroidManifest-xml配置" class="headerlink" title="四、AndroidManifest.xml配置"></a>四、AndroidManifest.xml配置</h3><ul>
<li>权限配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Activity配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=&quot;com.tencent.bugly.beta.ui.BetaActivity&quot;</div><div class="line">    android:theme=&quot;@android:style/Theme.Translucent&quot; /&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>配置FileProvider（<a href="http://lib.csdn.net/base/android" target="_blank" rel="external">Android</a> N之后配置）</p>
<p>见<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20170205190410" target="_blank" rel="external">文档</a></p>
</li>
</ul>
<h3 id="五、混淆配置"><a href="#五、混淆配置" class="headerlink" title="五、混淆配置"></a>五、混淆配置</h3><p>为了避免混淆SDK，在Proguard混淆文件中增加以下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.tencent.bugly.**</div><div class="line">-keep public class com.tencent.bugly.**&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>如果你使用了support-v4包，你还需要配置以下混淆规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keep class android.support.**&#123;*;&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="六、编译基准包"><a href="#六、编译基准包" class="headerlink" title="六、编译基准包"></a>六、编译基准包</h3><p>基准包就是原先运行有bug的包。</p>
<p>点击Android Studio右上角的Gradle按钮，找到项目的assembleRelease任务，双击执行assembleRelease任务。</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/K%29RNI48%5DNN%28PS~MG%5B3LK%7BEK.png" alt="image"></p>
<p>任务执行完成后，会在build的目录下生成如下文件：</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/RCMZ3Q%29%5D7B%7B_YYQ%28HC6$RTS.png" alt="image"></p>
<h3 id="七、修复基准版代码"><a href="#七、修复基准版代码" class="headerlink" title="七、修复基准版代码"></a>七、修复基准版代码</h3><p>修复前代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class BugClass &#123;</div><div class="line"></div><div class="line">    public String bug() &#123;</div><div class="line">        String str = &quot;This is a bug&quot;;</div><div class="line">        str = null;</div><div class="line">        Log.e(&quot;zhang&quot;, &quot;BugClass --&gt; bug--&gt; str length :&quot; + str.length());</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>修复后代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class BugClass &#123;</div><div class="line"></div><div class="line">    public String bug() &#123;</div><div class="line">        String str = &quot;This is a bug&quot;;</div><div class="line">//        str = null;</div><div class="line">        Log.e(&quot;zhang&quot;, &quot;BugClass --&gt; bug--&gt; str length :&quot; + str.length());</div><div class="line">        return str + &quot;  , fixed!!!&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>调用代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button btn = (Button) findViewById(R.id.btn);</div><div class="line"></div><div class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                BugClass bugClass = new BugClass();</div><div class="line">                String bug = bugClass.bug();</div><div class="line">                Toast.makeText(MainActivity.this, bug, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="八、生成补丁包"><a href="#八、生成补丁包" class="headerlink" title="八、生成补丁包"></a>八、生成补丁包</h3><ul>
<li>修改appName名称以及文件名称都需要保持一致。同时将基准包的tinkerid=1.0.1-base改为补丁包的tinkerid=1.0.1-patch。</li>
</ul>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/R4TK_IQ9@7JMDN4H%289A7HLH.png" alt="image"></p>
<ul>
<li><strong>生成补丁包</strong></li>
</ul>
<p>执行生成补丁包的任务操作：</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/GD8C4NOLEE0%5BBBLFB_R4%29$U.png" alt="image"></p>
<p>任务执行完之后，会生成3个文件，其中patch_signed_7zip.apk是我们需要的补丁包</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/E4TCAATO%5B4E%602_S5PO6%5B0G6.png" alt="image"></p>
<p>将补丁包上传至bugly的应用升级模块的热更新中</p>
<p>具体见<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/?v=20170205190410" target="_blank" rel="external">bugly的官方文档</a>。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd7nh2frm9j30wb0b641r.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐阅读：&lt;a href=&quot;http://www.jianshu.com/p/2d0f70e30111#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bugly热更新SDK你需要知道的一些事&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>TBS服务报告</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/01/TBS%E6%9C%8D%E5%8A%A1%E6%8A%A5%E5%91%8A/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/01/TBS服务报告/</id>
    <published>2017-03-01T06:22:55.000Z</published>
    <updated>2017-03-02T08:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>TBS服务报告(2017.02)</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIyNTU2NzUyMw==&amp;mid=2247483672&amp;idx=1&amp;sn=d495422f7e213b2fe14705b06e751ca6&amp;chksm=e87cf754df0b7e426872107b7ece14fefe42b4f2f3a71ce87aaed65251ed451b9dc69800cc1f&amp;scene=0&amp;key=b531a7627afeba4885945c32a7d62783d64c062be87a9233bf64113c8d72153b00932a9b3c1b8174a578df1829e2a6e024c7351fc084b63ea7652ea394992f7d694cf57c10c3ced9a012f14d6bf7f986&amp;ascene=0&amp;uin=MjUxOTYwNTg4MA%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.12.3+build(16D32" target="_blank" rel="external"><strong>原文地址：腾讯浏览服务微信公众号</strong></a>&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=grDPWOVxL4siCpybSzNJTRq4JUQ%2BB9fYOJjkMX%2F6Nrg8M3eEasftcW1DlLNM9tFF)</p>
<p>2017-02-28 腾讯浏览服务</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fd73d3qsvzj30hs0a0jrr.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd73dgg4vrj30hs0a0wer.jpg" alt=""></p>
<p>Part 1.版本信息：TBS3.0.1版本</p>
<p>发布计划</p>
<p>已全量发布</p>
<p>版本特性</p>
<p>升级至Chromium53版本（历史版本为Chromium37版本），内核核心能力全面提升，更多信息请参考官网x5.tencent.com</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73dqa04sj30fg0b1wfa.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73dvdfasj30fg0b1gmk.jpg" alt=""></p>
<p>Part 1.版本信息：在研版本</p>
<p>在研版本</p>
<p>TBS3.1</p>
<p>版本特性</p>
<p>内核启动速度提升（冷启动场景下提升30%）、TLS占用减少（12个 降低为1个）、稳定性全面优化，提升内核核心基础能力；AR能力带出</p>
<p>发布情况</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fd73e1ngftj30hs00tt8q.jpg" alt=""></p>
<p>Part 2.大盘数据情况：日浏览量</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73e5xgbej30hs0a9wfs.jpg" alt=""></p>
<p>Part 2.大盘数据情况：日承载用户数</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd73eabx09j30hs0aj75l.jpg" alt=""></p>
<p>Part 3.TBS技术前沿：Content Cache开启</p>
<p>技术简介</p>
<p>Content Cache是内存级别的缓存，在切换页面时，被切换出去的页面所对应的内核模型被存储在内存的缓冲区中，再前进后退到该页面时，会从内存缓冲区取出该页面对应的内核模型直接进行处理，无需重新加载解析排版再构建该模型</p>
<p>技术价值</p>
<p>为解决前进后退中重新网络请求，内核解析渲染造成的流量浪费和不够流畅的体验问题，提升页面切换平滑体验；目前X5内核已支持根据App或者域名等多纬度动态开启或关闭Content Cache</p>
<p>当前规划</p>
<p>已随TBS2.5版本带出，目前根据合作方需求开启，预计年后将择期全面放开</p>
<p>Part 3.TBS技术前沿：ReactNative能力</p>
<p>技术简介</p>
<p>参考<a href="http://reactnative.cn/" target="_blank" rel="external">http://reactnative.cn/</a></p>
<p>技术价值</p>
<p>当前TBS将ReactNative中所使用的JS引擎替换成了X5内核的V8引擎，接入TBS后可以为后续引入ReactNative时App包大小减少1M左右，并且稳定性和性能都有显著提升。未来会输出ReactNative的整体接入技术方案，App如果需要接入ReactNative只需要接入TBS SDK即可。</p>
<p>当前状态</p>
<p>手机QQ、QQ浏览器已经接入完成。</p>
<p>Part 3.TBS技术前沿：AR能力</p>
<p>技术简介</p>
<p>TBS将集成AR的能力提供给前端开发者使用，包括使用摄像头的能力，优化用户体验的AR播放器以及准确高效的实时识别建模能力</p>
<p>技术价值</p>
<p>AR是当前最火热的前沿领域之一，目前的应用主要还是在native使用，而Web上对AR能力的支持将提供给AR应用更大想象空间，结合Web的优势诞生更多具有创意的AR应用</p>
<p>当前规划</p>
<p>摄像头能力和AR播放器已在TBS2.5版本带出，识别能力将在3.1版本带出，并在后续版本持续扩展，AR开放平台正在搭建中，计划上半年完成</p>
<p>Part 4. 行业趋势报告</p>
<p>AR&amp;VR</p>
<p>AR和VR的设备成本在持续下降，相关标准正在建立之中，而app应用的生态圈也正在开始浮现。浏览服务也已开始投入AR和VR基础能力建设工作，预计近期将有所落地。</p>
<p>https迁移</p>
<p>http向https的迁移大势已定，浏览服务也已基本完成部门内业务的https迁移工作并积累了一些部署和优化经验（例如https防劫持等），进一步的深入优化继续开展中。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73ei8zj2j30hs0a0mxb.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd73eonqpcj303l03laa3.jpg" alt=""></p>
<p>微信扫一扫</p>
<p>关注该公众号</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TBS服务报告(2017.02)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNTU2NzUyMw==&amp;amp;mid=2247483672&amp;amp;idx=1&amp;amp;sn=d495422f7e213b2fe1
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="浏览器" scheme="http://wanghaonanlpc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>8阶单元5词汇</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/28/8%E9%98%B6%E5%8D%95%E5%85%835%E8%AF%8D%E6%B1%87/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/28/8阶单元5词汇/</id>
    <published>2017-02-28T11:25:20.000Z</published>
    <updated>2017-03-01T07:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>8级 单元 5</p>
<p>belt    [英式][belt] [美式][belt]    noun    腰带, 皮带<br>blouse    [英式] [blaʊz] [美式] [blaʊs]    noun    女式罩衫<br>cashmere    [英式] [ˈkæʃmɪə(r)] [美式] [ˈkæʒmɪr]    noun    山羊绒<br>disappointed    [英式] [ˌdɪsəˈpɔɪntɪd] [美式] [ˌdɪsəˈpɔɪntɪd]    adj.    感到失望的, 灰心的<br>enthusiastic    [英式][ɪnˌθjuːziˈæstɪk] [美式][ɪnˌθuːziˈæstɪk]    adj.    热情的<br>exquisite    [英式] [ɪkˈskwɪzɪt] [美式] [ɪkˈskwɪzɪt]    adj.    精美<br>genuine    [英式][ˈdʒenjuɪn] [美式][ˈdʒenjuɪn]    adj.    真实的, 纯正的<br>handmade    [英式][ˌhændˈmeɪd] [美式][ˌhændˈmeɪd]    adj.    手工制造<br>neutral    [英式][ˈnjuːtrəl] [美式][ˈnuːtrəl]    adj.    无明显特性的<br>skinny    [英式] [ˈskɪni] [美式] [ˈskɪni]    adj.    枯瘦的,骨瘦如柴的<br>soft    [英式] [sɒft] [美式] [sɔːft]    adj.    柔软的<br>turquoise    [英式] [ˈtɜːkwɔɪz] [美式] [ˈtɜːrkwɔɪz]    noun    蓝绿色<br>unique    [英式] [juˈniːk] [美式] [juˈniːk]    adj.    独一无二的, 独有的, 独特的<br>blend    [英式] [blend] [美式] [blend]    noun    混合物;(不同类型东西的)混合品<br>cashier    [英式] [kæˈʃɪə(r)] [美式] [kæˈʃɪr]    noun    收银员<br>debit card        noun    借记卡<br>percentage    [英式] [pəˈsentɪdʒ] [美式] [pərˈsentɪdʒ]    noun    百分比; 百分率,比例,部分<br>press    [英式] [pres] [美式] [pres]    verb    压, 贴, 挤<br>sales tax        noun    营业税, 销售税<br>sign    [英式] [saɪn] [美式] [saɪn]    verb    签名<br>slide    [英式] [slaɪd] [美式] [slaɪd]    verb    滑, 滑动<br>total    [英式] [ˈtəʊtl] [美式] [ˈtoʊtl]    adj.    总计的, 全体的, 总括的, 总体的<br>within    [英式] [wɪˈðɪn] [美式] [wɪˈðɪn]    prep.    在……之内<br>describe    [英式] [dɪˈskraɪb] [美式] [dɪˈskraɪb]    verb    描述<br>flat    [英式] [flæt] [美式] [flæt]    adj.    平的<br>heated    [英式] [ˈhiːtɪd] [美式] [ˈhiːtɪd]    adj.    加热<br>humankind    [英式] [ˌhjuːmənˈkaɪnd] [美式] [ˌhjuːmənˈkaɪnd]    noun    人类<br>invent    [英式] [ɪnˈvent] [美式] [ɪnˈvent]    verb    发明, 创造<br>mobile    [英式] [ˈməʊbaɪl] [美式] [ˈmoʊbl]    adj.    可移动的, 非固定的<br>organization    [英式] [ˌɔːɡənaɪˈzeɪʃn] [美式] [ˌɔːrɡənəˈzeɪʃn]    noun    组织, 机构<br>revolution    [英式] [ˌrevəˈluːʃn] [美式] [ˌrevəˈluːʃn]    noun    革命<br>run    [英式] [rʌn] [美式] [rʌn]    verb    经营<br>touch screen        noun    触摸屏<br>video game        noun    电视游戏<br>wall    [英式] [wɔːl] [美式] [wɔːl]    noun    墙, 墙壁, 围墙<br>battery    [英式] [ˈbætri] [美式] [ˈbætri]    noun    电池<br>chat    [英式] [tʃæt] [美式] [tʃæt]    verb    聊天<br>connection    [英式] [kəˈnekʃn] [美式] [kəˈnekʃn]    noun    连接物<br>dead    [英式] [ded] [美式] [ded]    adj.    不通电的, 无电流的<br>file    [英式] [faɪl] [美式] [faɪl]    noun    文件, 档案<br>gigabyte    [英式] [ˈɡɪɡəbaɪt] [美式] [ˈɡɪɡəbaɪt]    noun    技嘉科技<br>impact    [英式] [ˈɪmpækt] [美式] [ˈɪmpækt]    noun    影响, 冲击力<br>memory    [英式] [ˈmeməri] [美式] [ˈmeməri]    noun    存储器, 存储, 内存<br>rethink    [英式] [ˌriːˈθɪŋk] [美式] [ˌriːˈθɪŋk]    verb    重新考虑,再考虑<br>search    [英式] [sɜːtʃ] [美式] [sɜːrtʃ]    noun    寻找, 研究<br>produce    [英式] [prəˈdjuːs] [美式] [prəˈduːs]    verb    生产, 制造<br>stop    [英式] [stɒp] [美式] [stɑːp]    verb    停止, 中止<br>text    [英式] [tekst] [美式] [tekst]    verb    发短信<br>topic    [英式] [ˈtɒpɪk] [美式] [ˈtɑːpɪk]    noun    题目, 主题<br>useful    [英式] [ˈjuːsfl] [美式] [ˈjuːsfl]    adj.    有用的, 有益的, 实用的</p>
]]></content>
    
    <summary type="html">
    
      英语单词词汇
    
    </summary>
    
      <category term="英语" scheme="http://wanghaonanlpc.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>在Android 6.0 设备上动态获取权限</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/27/%E5%9C%A8Android-6-0-%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/27/在Android-6-0-设备上动态获取权限/</id>
    <published>2017-02-27T13:15:00.000Z</published>
    <updated>2017-03-02T08:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Android-6-0-设备上动态获取权限"><a href="#在Android-6-0-设备上动态获取权限" class="headerlink" title="在Android 6.0 设备上动态获取权限"></a>在Android 6.0 设备上动态获取权限</h1><p>众所周知，Android 6.0 相比之前的Android版本有一个很大的不同点，就是动态获取权限。最近要修改原来的程序适配安卓6.0+。以记录下在Android 6.0 上如何动态获取权限。</p>
<p>下面从自己一开始的问题入手</p>
<h3 id="实现拨号功能"><a href="#实现拨号功能" class="headerlink" title="实现拨号功能"></a>实现拨号功能</h3><p>说到拨号，一个 Intent 就搞定，代码如下，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void callDirectly(String mobile)&#123;</div><div class="line">     Intent intent = new Intent();</div><div class="line">     intent.setAction(&quot;android.intent.action.CALL&quot;);</div><div class="line">     intent.setData(Uri.parse(&quot;tel:&quot; + mobile));</div><div class="line">     mContext.startActivity(intent);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当然 你可别忘了在 Manifest 文件中去声明拨号的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果在 Android 6.0 以前的设备上，上面的代码都是没有问题的，但是如果是在 Android 6.0 设备上，并且项目的 targetSdkVersion 你设置的是23，那么 当你执行上面的拨号代码时，程序将会奔溃掉。</p>
<p>此时你肯定想到了 如果 targetSdkVersion 值设置的小于23是不是就不会奔溃了，恩，确实如此， 此时即使使用Android6.0的设备，程序也不会奔溃，原因显而易见，Android 的权限机制是 Android M 后才加入的。从 Android M 开始 应用程序申请的权限是在运行时动态赋给用户的。</p>
<p>关于动态分配权限，一些同学可能不是很清楚。这里稍稍提一下 Android 6.0 的权限动态分配。 如果你只对最终的解决方案感兴趣，可以跳过下面这节，直接去看解决方案</p>
<h3 id="权限动态分配"><a href="#权限动态分配" class="headerlink" title="权限动态分配"></a>权限动态分配</h3><p>在 Android6.0 之前，下载好一个应用程序，点击安装我们看到的大都是像这样的界面。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_install.jpg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_install.jpg" alt="img"></a></p>
<p>上图分别是Nexus6和小米手机在安装软件时的界面。</p>
<p>在安装时你会发现，手机操作系统会提示，这个软件会索要了你手机的那些权限，并且给用一个列表进行展示，但是这些提示只是在安装是提示，只要你点击接受或者安装， 表示你允许这个应用在可以获取它申明的所有权限。一般很少有人在安装时，会因为看到某个应用因为申请了某一个敏感权限而放弃安装应用。因为这个权限虽然敏感， 但是对于当前的用户是不可感知的，因为他现在并没有立即去查看你的最近通话、短信记录…</p>
<p>说到这里，我们自然而然的会想到，其实最好的方式是，当这个应用在用户使用过程中，正准备使用某个权限时，比如说读取短信列表，系统能及时的弹出一个提示框，说这个应用要读取您的短信内容， 您是否允许。然后用户结合当前应用的执行动作，依据当前条件判断，是不是应该授予应用读取短信记录的权限。这绝对的最完美的。 因为在具体的使用过程中，用户可以结合当前应用的使用场景，去思考、判断是不是应该给这个应用相应的权限。不给能怎样，给了会怎样， 这样对用户而言，完全是主动的，相比安装时那种选择，这样的做法无疑是对用户莫大的尊重，同时这也保证了用户的个人隐私。</p>
<p>说到这里，不得不插一句，其实 MIUI 早就实现了这个系统特性，在这一点上 MIUI 确实走到了 Android团队的前面，恩，给 MIUI 点个赞。</p>
<p>然而直到 Android 6.0 这个版本开始，上面的假设终于得到了谷歌的实践，除了在应用安装时，操作系统会提示应用会获取那些权限，在运行过程中，当应用去真的获取一些敏感 权限时，系统还会弹出一个提示框，询问用户是不是授予应用相应的权限。如下图所示。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_sms.jpeg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_sms.jpeg" alt="img"></a></p>
<p>这就是 Android 6.0 的运行时权限检查机制。下面是Google官方对此的解释，只截取介绍部分</p>
<blockquote>
<p>Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not when they install the app. This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app. It also gives the user more control over the app’s functionality; for example, a user could choose to give a camera app access to the camera but not to the device location. The user can revoke the permissions at any time, by going to the app’s Settings screen.</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>其实上面已经说了一种取巧的方案，将 targetSdkVersion 设为小于23的值，程序将不会奔溃， 但是在Android 6.0 上你的应用程序依旧拨不了电话，这是真的。所以要想兼容6.0版本，必须通过下面的方式进行代码层面的兼容。</p>
<p>对Android版本做判断，然后对Android 6.0 做特殊处理，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">final public static int REQUEST_CODE_ASK_CALL_PHONE = 123;</div><div class="line"></div><div class="line">public void onCall(String mobile)&#123;</div><div class="line">       this.mMobile = mobile;</div><div class="line">       if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">           int checkCallPhonePermission = ContextCompat.checkSelfPermission(mContext,Manifest.permission.CALL_PHONE);</div><div class="line">           if(checkCallPhonePermission != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">               ActivityCompat.requestPermissions(mContext,new String[]&#123;Manifest.permission.CALL_PHONE&#125;,REQUEST_CODE_ASK_CALL_PHONE);</div><div class="line">               return;</div><div class="line">           &#125;else&#123;</div><div class="line">               //上面已经写好的拨号方法</div><div class="line">               callDirectly(mobile);</div><div class="line">           &#125;</div><div class="line">       &#125; else &#123;</div><div class="line">           //上面已经写好的拨号方法</div><div class="line">           callDirectly(mobile);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>此时，如果一个Android6.0的用户触发拨号动作，执行上面的代码，那么他将会看到一个很好看的MaterialDialog，如下图所示。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_permission.jpeg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_permission.jpeg" alt="img"></a></p>
<p>那么用户点击拒绝或者允许，我们怎么才能拿到回调呢，如果能拿到回调，我们就可以根据用户的选择来执行不同的操作了。</p>
<p>这里应该会看到在 ActivityCompat 的 requestPermissions 方法中，最后一个参数是一个requestCode，看到它自然而然想到了经常用到的onActivityResult， 这里当执行 ActivityCompat 的 requestPermissions 方法后有一个回调机制，需要我们在当前 Activity 中实现 onRequestPermissionsResult 这个方法，具体如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">    switch (requestCode) &#123;</div><div class="line">        case REQUEST_CODE_ASK_CALL_PHONE:</div><div class="line">            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                // Permission Granted</div><div class="line">                callDirectly(mobile);</div><div class="line">            &#125; else &#123;</div><div class="line">                // Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;CALL_PHONE Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会对提供了一个对用户点击做判断的入口，开发者可以根据 grantResults[0] 的类型，来判断用户点击的是允许还是拒绝，接着就可以执行相应的逻辑了。</p>
<h3 id="有用的链接"><a href="#有用的链接" class="headerlink" title="有用的链接"></a>有用的链接</h3><p>关于AndroidM上权限的动态获取，这里只给出了一个最简单的示例，如果你还没有尽兴，那么下面这篇国外的博文，一定会让你满足。</p>
<p><a href="https://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en" target="_blank" rel="external">Everything every Android Developer must know about new Android’s Runtime Permission</a></p>
<p>这篇英文博文内容很长、内容也比较多，十足的干货。您慢用~</p>
<p>后记：偶然发现已经有哥们把上面的这篇文章做了翻译，真是极好的，这里给大家也摘录过来了，附上<strong>翻译链接</strong>，给翻译者同学点赞，辛苦！</p>
<p>另外，最近看到一个Github上的开源项目 <a href="https://github.com/k0shk0sh/PermissionHelper" target="_blank" rel="external">PermissionHelper</a> ，专门用于处理 Android 6.0 的权限兼容问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在Android-6-0-设备上动态获取权限&quot;&gt;&lt;a href=&quot;#在Android-6-0-设备上动态获取权限&quot; class=&quot;headerlink&quot; title=&quot;在Android 6.0 设备上动态获取权限&quot;&gt;&lt;/a&gt;在Android 6.0 设备上动态获取
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="permission" scheme="http://wanghaonanlpc.github.io/tags/permission/"/>
    
  </entry>
  
  <entry>
    <title>Android 6.0+新的运行时权限[转载]</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/27/Android-6-0-%E6%96%B0%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90-%E5%BC%80%E5%8F%91%E8%80%85%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/27/Android-6-0-新的运行时权限-开发者需要知道的一切/</id>
    <published>2017-02-27T13:13:24.000Z</published>
    <updated>2017-03-02T09:00:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-6-0-新的运行时权限-开发者需要知道的一切"><a href="#Android-6-0-新的运行时权限-开发者需要知道的一切" class="headerlink" title="Android 6.0+新的运行时权限 开发者需要知道的一切"></a>Android 6.0+新的运行时权限 开发者需要知道的一切</h1><p>android M 的名字官方刚发布不久，最终正式版即将来临！<br>android在不断发展，最近的更新 M 非常不同，一些主要的变化例如运行时权限将有颠覆性影响。惊讶的是android社区鲜有谈论这事儿，尽管这事很重要或许在不远的将来会引发很严重的问题。<br>这是今天我写<a href="http://ocnyang.com/2016/08/16/AndroidMPermission/#more" target="_blank" rel="external">这篇博客</a>的原因。这里有一切关于android运行时权限你需要知道的，包括如何在代码中实现。现在亡羊补牢还不晚。</p>
<h2 id="新运行时权限"><a href="#新运行时权限" class="headerlink" title="新运行时权限"></a>新运行时权限</h2><p>android的权限系统一直是首要的安全概念，因为这些权限只在安装的时候被询问一次。一旦安装了，app可以在用户毫不知晓的情况下访问权限内的所有东西。<br>难怪一些坏蛋利用这个缺陷恶意收集用户数据用来做坏事了！<br>android小组也知道这事儿。7年了！权限系统终于被重新设计了。在android6.0棉花糖，app将不会在安装的时候授予权限。取而代之的是，app不得不在运行时一个一个询问用户授予权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-0180c3c006b72f69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>注意权限询问对话框不会自己弹出来。开发者不得不自己调用。如果开发者要调用的一些函数需要某权限而用户又拒绝授权的话，函数将抛出异常直接导致程序崩溃。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-469ca2e40633a306.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>另外，用户也可以随时在设置里取消已经授权的权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-266590a23f9a9bc9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>你或许已经感觉到背后生出一阵寒意。。。如果你是个android开发者，意味着要完全改变你的程序逻辑。你不能像以前那样直接调用方法了，你不得不为每个需要的地方检察权限，否则app就崩溃了！<br>是的。我不能哄你说这是简单的事儿。尽管这对用户来说是好事，但是对开发者来说就是噩梦。我们不得不修改编码不然不论短期还是长远来看都是潜在的问题。<br>这个新的运行时权限仅当我们设置targetSdkVersion to 23（这意味着你已经在23上测试通过了）才起作用，当然还要是M系统的手机。app在6.0之前的设备依然使用旧的权限系统。</p>
<h2 id="已经发布了的app会发生什么"><a href="#已经发布了的app会发生什么" class="headerlink" title="已经发布了的app会发生什么"></a>已经发布了的app会发生什么</h2><blockquote>
<p>新运行时权限可能已经让你开始恐慌了。<strong>“hey，伙计！我三年前发布的app可咋整呢。如果他被装到android 6.0上，我的app会崩溃吗？！？”</strong><br>莫慌张，放轻松。android小队又不傻，肯定考虑到了这情况。<strong>如果app的targetSdkVersion 低于 23，那将被认为app没有用23新权限测试过，那将被继续使用旧有规则：用户在安装的时候不得不接受所有权限，安装后app就有了那些权限咯！</strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-9ebfcbb36dff38b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>然后app像以前一样奔跑！注意，此时用户依然可以取消已经同意的授权！用户取消授权时，android 6.0系统会警告，但这不妨碍用户取消授权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-c6424f0b749605c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>问题又来了，这时候你的app崩溃吗？<br>善意的主把这事也告诉了android小组，当我们在targetSdkVersion 低于23的app调用一个需要权限的函数时，这个权限如果被用户取消授权了的话，不抛出异常。但是他将啥都不干，结果导致函数返回值是null或者0.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-486ba9bdb91de1a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>别高兴的太早。尽管app不会调用这个函数时崩溃，返回值null或者0可能接下来依然导致崩溃。<br>好消息（至少目前看来）是这类取消权限的情况比较少，我相信很少用户这么搞。如果他们这么办了，后果自负咯。<br>但从长远看来，我相信还是会有大量用户会关闭一些权限。我们app不能在新设备完美运行这是不可接受的。<br>怎样让他完美运行呢，你最好修改代码支持最新的权限系统，而且我建议你立刻着手搞起！<br>代码没有成功改为支持最新运行时权限的app,不要设置targetSdkVersion 23 发布，否则你就有麻烦了。只有当你测试过了，再改为targetSdkVersion 23 。</p>
<blockquote>
<p><strong>警告：现在你在android studio新建项目，targetSdkVersion 会自动设置为 23。如果你还没支持新运行时权限，我建议你首先把targetSdkVersion 降级到22</strong></p>
</blockquote>
<h2 id="PROTECTION-NORMAL类权限"><a href="#PROTECTION-NORMAL类权限" class="headerlink" title="PROTECTION_NORMAL类权限"></a>PROTECTION_NORMAL类权限</h2><p>当用户安装或更新应用时，系统将授予应用所请求的属于 PROTECTION_NORMAL 的所有权限（安装时授权的一类基本权限）。这类权限包括：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</div><div class="line">android.permission.ACCESS_NETWORK_STATE</div><div class="line">android.permission.ACCESS_NOTIFICATION_POLICY</div><div class="line">android.permission.ACCESS_WIFI_STATE</div><div class="line">android.permission.ACCESS_WIMAX_STATE</div><div class="line">android.permission.BLUETOOTH</div><div class="line">android.permission.BLUETOOTH_ADMIN</div><div class="line">android.permission.BROADCAST_STICKY</div><div class="line">android.permission.CHANGE_NETWORK_STATE</div><div class="line">android.permission.CHANGE_WIFI_MULTICAST_STATE</div><div class="line">android.permission.CHANGE_WIFI_STATE</div><div class="line">android.permission.CHANGE_WIMAX_STATE</div><div class="line">android.permission.DISABLE_KEYGUARD</div><div class="line">android.permission.EXPAND_STATUS_BAR</div><div class="line">android.permission.FLASHLIGHT</div><div class="line">android.permission.GET_ACCOUNTS</div><div class="line">android.permission.GET_PACKAGE_SIZE</div><div class="line">android.permission.INTERNET</div><div class="line">android.permission.KILL_BACKGROUND_PROCESSES</div><div class="line">android.permission.MODIFY_AUDIO_SETTINGS</div><div class="line">android.permission.NFC</div><div class="line">android.permission.READ_SYNC_SETTINGS</div><div class="line">android.permission.READ_SYNC_STATS</div><div class="line">android.permission.RECEIVE_BOOT_COMPLETED</div><div class="line">android.permission.REORDER_TASKS</div><div class="line">android.permission.REQUEST_INSTALL_PACKAGES</div><div class="line">android.permission.SET_TIME_ZONE</div><div class="line">android.permission.SET_WALLPAPER</div><div class="line">android.permission.SET_WALLPAPER_HINTS</div><div class="line">android.permission.SUBSCRIBED_FEEDS_READ</div><div class="line">android.permission.TRANSMIT_IR</div><div class="line">android.permission.USE_FINGERPRINT</div><div class="line">android.permission.VIBRATE</div><div class="line">android.permission.WAKE_LOCK</div><div class="line">android.permission.WRITE_SYNC_SETTINGS</div><div class="line">com.android.alarm.permission.SET_ALARM</div><div class="line">com.android.launcher.permission.INSTALL_SHORTCUT</div><div class="line">com.android.launcher.permission.UNINSTALL_SHORTCUT</div></pre></td></tr></table></figure>
<p>只需要在AndroidManifest.xml中简单声明这些权限就好，安装时就授权。不需要每次使用时都检查权限，而且用户不能取消以上授权。</p>
<h2 id="让你的app支持新运行时权限"><a href="#让你的app支持新运行时权限" class="headerlink" title="让你的app支持新运行时权限"></a>让你的app支持新运行时权限</h2><p>是时候让我们的app支持新权限模型了，从设置<strong>compileSdkVersion</strong> and <strong>targetSdkVersion</strong> 为 23开始吧.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    ...</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        targetSdkVersion 23</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>例子，我想用以下方法添加联系人。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">privatestaticfinal String TAG = &quot;Contacts&quot;;</div><div class="line">privatevoid insertDummyContact() &#123;</div><div class="line">// Two operations are needed to insert a new contact.</div><div class="line">    ArrayList operations = new ArrayList(2);</div><div class="line"></div><div class="line">// First, set up a new raw contact.</div><div class="line">    ContentProviderOperation.Builder op =</div><div class="line">            ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)</div><div class="line">                    .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)</div><div class="line">                    .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);</div><div class="line">    operations.add(op.build());</div><div class="line"></div><div class="line">// Next, set the name for the contact.</div><div class="line">    op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)</div><div class="line">            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)</div><div class="line">            .withValue(ContactsContract.Data.MIMETYPE,</div><div class="line">                    ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)</div><div class="line">            .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,</div><div class="line">&quot;__DUMMY CONTACT from runtime permissions sample&quot;);</div><div class="line">    operations.add(op.build());</div><div class="line"></div><div class="line">// Apply the operations.</div><div class="line">    ContentResolver resolver = getContentResolver();</div><div class="line">try &#123;</div><div class="line">        resolver.applyBatch(ContactsContract.AUTHORITY, operations);</div><div class="line">    &#125; catch (RemoteException e) &#123;</div><div class="line">        Log.d(TAG, &quot;Could not add a new contact: &quot; + e.getMessage());</div><div class="line">    &#125; catch (OperationApplicationException e) &#123;</div><div class="line">        Log.d(TAG, &quot;Could not add a new contact: &quot; + e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码需要WRITE_CONTACTS权限。如果不询问授权，app就崩了。<br>下一步像以前一样在AndroidManifest.xml添加声明权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission  android:name=&quot;android.permission.WRITE_CONTACTS&quot;/&gt;</div></pre></td></tr></table></figure>
<p>下一步，不得不再写个方法检查有没有权限。如果没有弹个对话框询问用户授权。然后你才可以下一步创建联系人。<br>权限被分组了，如下表：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-52d385bb509f5ba1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>同一组的任何一个权限被授权了，其他权限也自动被授权。例如，一旦WRITE_CONTACTS被授权了，app也有READ_CONTACTS和GET_ACCOUNTS权限了。<br>源码中被用来检查和请求权限的方法分别是Activity的checkSelfPermission和requestPermissions。这些方法在api23引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">finalprivateint REQUEST_CODE_ASK_PERMISSIONS = 123;</div><div class="line"></div><div class="line">privatevoid insertDummyContactWrapper() &#123;</div><div class="line">int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果已有权限，insertDummyContact()会执行。否则，requestPermissions被执行来弹出请求授权对话框，如下：</p>
<p>不论用户同意还是拒绝，activity的onRequestPermissionsResult会被回调来通知结果（通过第三个参数），grantResults,如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">publicvoid onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">switch (requestCode) &#123;</div><div class="line">caseREQUEST_CODE_ASK_PERMISSIONS:</div><div class="line">if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">// Permission Granted</div><div class="line">                insertDummyContact();</div><div class="line">            &#125; else &#123;</div><div class="line">// Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;WRITE_CONTACTS Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">break;</div><div class="line">        default:</div><div class="line">super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是新权限模型工作过程。代码真复杂但是只能去习惯它。。。为了让app很好兼容新权限模型，你不得不用以上类似方法处理所有需要的情况。<br>如果你想捶墙，现在是时候了。。。</p>
<h2 id="处理-“不再提醒”"><a href="#处理-“不再提醒”" class="headerlink" title="处理 “不再提醒”"></a>处理 “不再提醒”</h2><p>如果用户拒绝某授权。下一次弹框，用户会有一个“不再提醒”的选项的来防止app以后继续请求授权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-c79ef49ce512ed84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>如果这个选项在拒绝授权前被用户勾选了。下次为这个权限请求requestPermissions时，对话框就不弹出来了，结果就是，app啥都不干。<br>这将是很差的用户体验，用户做了操作却得不到响应。这种情况需要好好处理一下。在请求requestPermissions前，我们通过activity的shouldShowRequestPermissionRationale方法来检查是否需要弹出请求权限的提示对话框，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">final private int REQUEST_CODE_ASK_PERMISSIONS = 123;</div><div class="line"></div><div class="line">private void insertDummyContactWrapper() &#123;</div><div class="line">int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_CONTACTS)) &#123;</div><div class="line">                showMessageOKCancel(&quot;You need to allow access to Contacts&quot;,</div><div class="line">new DialogInterface.OnClickListener() &#123;</div><div class="line">@Override</div><div class="line">publicvoid onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                                requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                                        REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">return;</div><div class="line">            &#125;</div><div class="line">        requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) &#123;</div><div class="line">new AlertDialog.Builder(MainActivity.this)</div><div class="line">            .setMessage(message)</div><div class="line">            .setPositiveButton(&quot;OK&quot;, okListener)</div><div class="line">            .setNegativeButton(&quot;Cancel&quot;, null)</div><div class="line">            .create()</div><div class="line">            .show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个权限第一次被请求和用户标记过不再提醒的时候,我们写的对话框被展示。<br>最后一种情况，onRequestPermissionsResult 会收到PERMISSION_DENIED ，系统询问对话框不展示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-4b5fe5ae89720b96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>搞定！</p>
<h2 id="一次请求多个权限"><a href="#一次请求多个权限" class="headerlink" title="一次请求多个权限"></a>一次请求多个权限</h2><p>当然了有时候需要好多权限，可以用上面方法一次请求多个权限。不要忘了为每个权限检查“不再提醒”的设置。<br>修改后的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;</div><div class="line"></div><div class="line">private void insertDummyContactWrapper() &#123;</div><div class="line">    List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))</div><div class="line">        permissionsNeeded.add(&quot;GPS&quot;);</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))</div><div class="line">        permissionsNeeded.add(&quot;Read Contacts&quot;);</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.WRITE_CONTACTS))</div><div class="line">        permissionsNeeded.add(&quot;Write Contacts&quot;);</div><div class="line"></div><div class="line">    if (permissionsList.size() &gt; 0) &#123;</div><div class="line">        if (permissionsNeeded.size() &gt; 0) &#123;</div><div class="line">            // Need Rationale</div><div class="line">            String message = &quot;You need to grant access to &quot; + permissionsNeeded.get(0);</div><div class="line">            for (int i = 1; i &lt; permissionsNeeded.size(); i++)</div><div class="line">                message = message + &quot;, &quot; + permissionsNeeded.get(i);</div><div class="line">            showMessageOKCancel(message,</div><div class="line">                    new DialogInterface.OnClickListener() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),</div><div class="line">                                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),</div><div class="line">                REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean addPermission(List&lt;String&gt; permissionsList, String permission) &#123;</div><div class="line">    if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        permissionsList.add(permission);</div><div class="line">        // Check for Rationale Option</div><div class="line">        if (!shouldShowRequestPermissionRationale(permission))</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果所有权限被授权，依然回调onRequestPermissionsResult，我用hashmap让代码整洁便于阅读。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">publicvoid onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">switch (requestCode) &#123;</div><div class="line">caseREQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:</div><div class="line">            &#123;</div><div class="line">            Map perms = new HashMap();</div><div class="line">// Initial</div><div class="line">            perms.put(Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);</div><div class="line">            perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);</div><div class="line">            perms.put(Manifest.permission.WRITE_CONTACTS, PackageManager.PERMISSION_GRANTED);</div><div class="line">// Fill with results</div><div class="line">for (int i = 0; i &lt; permissions.length; i++)</div><div class="line">                perms.put(permissions[i], grantResults[i]);</div><div class="line">// Check for ACCESS_FINE_LOCATION</div><div class="line">if (perms.get(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED</div><div class="line">                    &amp;&amp; perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED</div><div class="line">                    &amp;&amp; perms.get(Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">// All Permissions Granted</div><div class="line">                insertDummyContact();</div><div class="line">            &#125; else &#123;</div><div class="line">// Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;Some Permission is Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">break;</div><div class="line">        default:</div><div class="line">super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>条件灵活的，你自己设置。有的情况，一个权限没有授权，就不可用；但是也有情况，能工作，但是表现的是有所限制的。对于这个我不做评价，你自己设计吧。</p>
<h2 id="用兼容库使代码兼容旧版"><a href="#用兼容库使代码兼容旧版" class="headerlink" title="用兼容库使代码兼容旧版"></a>用兼容库使代码兼容旧版</h2><p>以上代码在android 6.0以上运行没问题，但是23 api之前就不行了，因为没有那些方法。<br>粗暴的方法是检查版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">// Marshmallow+</div><div class="line">&#125; else &#123;</div><div class="line">// Pre-Marshmallow</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是太复杂，我建议用v4兼容库，已对这个做过兼容，用这个方法代替：</p>
<ul>
<li>ContextCompat.checkSelfPermission()<br>被授权函数返回PERMISSION_GRANTED，否则返回PERMISSION_DENIED ，在所有版本都是如此。</li>
<li>ActivityCompat.requestPermissions()<br>这个方法在M之前版本调用，OnRequestPermissionsResultCallback 直接被调用，带着正确的 PERMISSION_GRANTED或者 PERMISSION_DENIED 。</li>
<li>ActivityCompat.shouldShowRequestPermissionRationale()<br>在M之前版本调用，永远返回false。<br>用v4包的这三方法，完美兼容所有版本！这个方法需要额外的参数，Context or Activity。别的就没啥特别的了。下面是代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private void insertDummyContactWrapper()&#123;</div><div class="line">int hasWriteContactsPermission = ContextCompat.checkSelfPermission(MainActivity.this,</div><div class="line">            Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">if (!ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,Manifest.permission.WRITE_CONTACTS)) &#123;</div><div class="line">            showMessageOKCancel(&quot;You need to allow access to Contacts&quot;,new DialogInterface.OnClickListener() &#123;</div><div class="line">@Override</div><div class="line">public void onClick (DialogInterface dialog, int which)&#123;</div><div class="line">                            ActivityCompat.requestPermissions(MainActivity.this,new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                                    REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">return;</div><div class="line">        &#125;</div><div class="line">        ActivityCompat.requestPermissions(MainActivity.this,</div><div class="line">new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后两个方法，我们也可以在Fragment中使用，用v13兼容包：FragmentCompat.requestPermissions() and FragmentCompat.shouldShowRequestPermissionRationale()和activity效果一样。</p>
<h2 id="第三方库简化代码"><a href="#第三方库简化代码" class="headerlink" title="第三方库简化代码"></a>第三方库简化代码</h2><p>以上代码真尼玛复杂。为解决这事，有许多第三方库已经问世了，真66溜真有速度。我试了很多最终找到了个满意的<a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">hotchemi’s PermissionsDispatcher</a>。<br>他和我上面做的一样，只是简化了代码。灵活易扩展，试一下吧。如果不满足你可以找些其他的。</p>
<h2 id="如果我的app还开着呢，权限被撤销了，会发生生么"><a href="#如果我的app还开着呢，权限被撤销了，会发生生么" class="headerlink" title="如果我的app还开着呢，权限被撤销了，会发生生么"></a>如果我的app还开着呢，权限被撤销了，会发生生么</h2><p>权限随时可以被撤销。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-f7bd9b68fd7bf84a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>当app开着的时候被撤消了会发生什么呢？我试过了发现这时app会突然终止 terminated。app中的一切都被简单粗暴的停止了，因为terminated！对我来说这可以理解，因为系统如果允许它继续运行（没有某权限），这会召唤弗雷迪到我的噩梦里。或许更糟…</p>
<h2 id="结论建议"><a href="#结论建议" class="headerlink" title="结论建议"></a>结论建议</h2><p>我相信你对新权限模型已经有了清晰的认识。我相信你也意识到了问题的严峻。<br>但是你没得选择。新运行时权限已经在棉花糖中被使用了。我们没有退路。我们现在唯一能做的就是保证app适配新权限模型.<br>欣慰的是只有少数权限需要运行时权限模型。大多数常用的权限，例如，网络访问，属于Normal Permission 在安装时自动会授权，当然你要声明，以后无需检查。因此，只有少部分代码你需要修改。<br>两个建议：</p>
<ol>
<li>严肃对待新权限模型</li>
<li>如果你代码没支持新权限，不要设置targetSdkVersion 23 。尤其是当你在Studio新建工程时，不要忘了修改！</li>
</ol>
<p>说一下代码修改。这是大事，如果代码结构被设计的不够好，你需要一些很蛋疼的重构。每个app都要被修正。如上所说，我们没的选择。。。<br>列出所有你需要请求的权限所有情形，如果A被授权，B被拒绝，会发生什么。blah，blah。<br>祝重构顺利。把它列为你需要做的大事，从现在就开始着手做，以保证M正式发布的时候没有问题。<br>希望本文对你有用，快乐编码！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-6-0-新的运行时权限-开发者需要知道的一切&quot;&gt;&lt;a href=&quot;#Android-6-0-新的运行时权限-开发者需要知道的一切&quot; class=&quot;headerlink&quot; title=&quot;Android 6.0+新的运行时权限 开发者需要知道的一切&quot;&gt;
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="permission" scheme="http://wanghaonanlpc.github.io/tags/permission/"/>
    
  </entry>
  
  <entry>
    <title>Material主题Github博客</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/%E5%9F%BA%E4%BA%8EHexo%E5%88%9B%E5%BB%BAMaterial%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/基于Hexo创建Material主题的博客网站/</id>
    <published>2017-02-26T14:48:27.000Z</published>
    <updated>2017-02-27T12:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前文中刚有提到怎样基于Hexo搭建github博客，在此不赘述。本文主要讲解安装Material主题。</p>
</blockquote>
<h3 id="强烈建议点击看原文，原文排版及内容都优于本文！！！"><a href="#强烈建议点击看原文，原文排版及内容都优于本文！！！" class="headerlink" title="强烈建议点击看原文，原文排版及内容都优于本文！！！"></a>强烈建议点击看原文，原文排版及内容都优于本文！！！</h3><h3 id="原文地址-https-material-viosey-com"><a href="#原文地址-https-material-viosey-com" class="headerlink" title="原文地址:https://material.viosey.com/"></a><strong><a href="https://material.viosey.com/" target="_blank" rel="external">原文地址:https://material.viosey.com/</a></strong></h3><p>在 Hexo 中，通常有两份配置文件，一个是站点根目录下的 <code>_config.yml</code>；另外一个是主题目录下的 <code>_config.yml</code>。为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</p>
<h2 id="安装「Material」"><a href="#安装「Material」" class="headerlink" title="安装「Material」"></a>安装「Material」</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件放置于站点目录的 <code>themes</code> 目录下，然后修改下配置文件即可。<br>具体到 Material 来说，有 <code>Github</code> 和 <code>NPM</code> 两种方式。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote>
<p>可以选择 克隆 或者 下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="external">稳定的发布版本</a>。</p>
</blockquote>
<p>为了方便之后的更新，建议使用 <strong>克隆</strong> 的方式。克隆命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site/themes</div><div class="line">$ git clone https://github.com/viosey/hexo-theme-material.git material</div></pre></td></tr></table></figure>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-material</div></pre></td></tr></table></figure>
<p>该方式会把 Material 主题下载到 <code>hexo</code> 目录下的 <code>node_modules</code> 文件夹中。<br>找到 <code>hexo-material</code> 文件夹，然后把文件复制到 <code>themes</code> 目录中的 <code>Material</code> 主题文件夹里。</p>
<h2 id="启用「Material」"><a href="#启用「Material」" class="headerlink" title="启用「Material」"></a>启用「Material」</h2><p>克隆完成后，修改主题文件夹名称，将其改为 <code>material</code> 。<br>然后打开 <strong>站点配置文件</strong>，找到 <code>theme</code> 字段，并将其值更改为 <code>material</code> 。</p>
<blockquote>
<p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code> 字段与之对应即可。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code>，并访问 <code>http://localhost:4000</code>，确保站点正确运行。</p>
<h2 id="更新「Material」"><a href="#更新「Material」" class="headerlink" title="更新「Material」"></a>更新「Material」</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>即可拉取最新版本。</p>
<h3 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h3><p>NPM 更新有两种方式：</p>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm-update"></a>npm-update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update hexo-material</div></pre></td></tr></table></figure>
<p>然后将文件复制到 <code>Material</code> 主题文件夹中。</p>
<h4 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h4><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="external">npm-check</a> 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。</p>
<p>安装 npm-check：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npm-check</div></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm-check hexo-material</div></pre></td></tr></table></figure>
<p>使用空格键可以选择需要处理的包，回车直接进行处理。</p>
<h2 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>编辑 <strong>站点配置文件</strong>，将 <code>language</code> 设置成你所需要的语言。<br>可用的语言如下：</p>
<ul>
<li>العَرَبِيَّة (ar)</li>
<li>English (en)</li>
<li>Español (es)</li>
<li>Français (fr)</li>
<li>Deutsche (de)</li>
<li>日本語 (ja)</li>
<li>Malay (ms)</li>
<li>简体中文 (zh-CN)</li>
<li>繁體中文 (zh-TW)</li>
</ul>
<blockquote>
<p>例如：选用繁體中文，则配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; language: zh-TW</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>编辑 <strong>站点配置文件</strong>，<code>url</code> 填写主域名，<code>root</code> 填写 子目录/根域名</p>
<blockquote>
<p>例如：站点域名为 <code>http://example.com/hexo</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; url: http://example.com</div><div class="line">&gt; root: /hexo</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>若你的站点没有运行在子目录中，则 <code>root</code> 填写为 <code>/</code>。</p>
<h3 id="作者名称"><a href="#作者名称" class="headerlink" title="作者名称"></a>作者名称</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述设置"><a href="#站点描述设置" class="headerlink" title="站点描述设置"></a>站点描述设置</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>，配置方式如插件 <code>README.md</code> 所示。<br>然后在 <a href="https://material.viosey.com/intro/#url" target="_blank" rel="external">url: rss</a> 中添加生成的 feed 路径。</p>
<h2 id="分支「Scheme」介绍"><a href="#分支「Scheme」介绍" class="headerlink" title="分支「Scheme」介绍"></a>分支「Scheme」介绍</h2><p>Material 主题提供了多种分支主题外观，亦称「Scheme」。<br>目前 Material 支持三种 Scheme：</p>
<h3 id="Nexus（开发中）"><a href="#Nexus（开发中）" class="headerlink" title="Nexus（开发中）"></a>Nexus（开发中）</h3><p>最为标准的 Material Design 样式。</p>
<h3 id="Paradox"><a href="#Paradox" class="headerlink" title="Paradox"></a>Paradox</h3><p>默认 Scheme，是 Material 的最初样式。居中布局，图文并茂。</p>
<h3 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h3><p>Paradox 的至简样式，简洁明了。</p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 <code>scheme</code> 关键字。 你会看到有几行 scheme 的配置，将你需用启用的 scheme 去掉前面注释 <code>#</code> 即可。</p>
<blockquote>
<p>例如 - 选择 Paradox Scheme</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; #scheme: Nexus</div><div class="line">&gt; scheme: Paradox</div><div class="line">&gt; #scheme: Isolation</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="主题配置文件介绍"><a href="#主题配置文件介绍" class="headerlink" title="主题配置文件介绍"></a>主题配置文件介绍</h2><h3 id="Site-Information"><a href="#Site-Information" class="headerlink" title="Site Information"></a>Site Information</h3><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>用于配置生成的 HTML 文件的头部信息。</p>
<ul>
<li>favicon</li>
<li>high_res_favicon: 高清 favicon</li>
<li>high_res_favicon: iOS 主屏按钮图标</li>
<li>keywords: 网站关键词</li>
</ul>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>用于设置跳转链接。</p>
<ul>
<li>rss: 设置生成的 rss 或 atom url。</li>
<li>daily_pic: 设置 <code>daily_pic</code> 模块 跳转 url。</li>
<li>logo: 设置 logo 的跳转 url。</li>
</ul>
<h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><h4 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h4><p>如果要使用其中一个主题，将前面的注释 <code>#</code> 去掉即可。</p>
<p>比如，选择使用 Paradox Scheme，只需要这样配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#scheme: Nexus</div><div class="line">scheme: Paradox</div><div class="line">#scheme: Isolation</div></pre></td></tr></table></figure>
<h4 id="uiux"><a href="#uiux" class="headerlink" title="uiux"></a>uiux</h4><p>用于设置主题 UI 与 UX。</p>
<ul>
<li>slogan: 显示在 <code>blog_info</code> 模块中的标语，现在可以设置多行标语：</li>
</ul>
<blockquote>
<p>单行标语使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; slogan: 标语</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>多行标语使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; slogan:</div><div class="line">&gt;  - &quot;标语第一行&quot;</div><div class="line">&gt;  - &quot;标语第二行&quot;</div><div class="line">&gt;  - &quot;标语第三行&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<ul>
<li>theme_color: 主题主要颜色。大部分地方使用此颜色。</li>
<li>theme_sub_color: 主题辅助颜色。</li>
<li>hyperlink_color: 超链接颜色。</li>
<li>button_color: 按钮颜色，例如 <code>toTop</code> 或 <code>menu_button</code>。</li>
<li>android_chrome_color: 安卓 Chrome 浏览器地址栏颜色。</li>
<li>nprogress_color: 页面加载时顶部加载进度条的颜色。</li>
<li>nprogress_buffer: 页面加载时顶部加载进度条的缓冲。</li>
</ul>
<h4 id="js-effect"><a href="#js-effect" class="headerlink" title="js_effect"></a>js_effect</h4><p>用来控制 Material 主题中自带的多种 js 特性。</p>
<ul>
<li>fade: 页面加载时部分模块的渐显效果。默认为 true。</li>
<li>smoothscroll: 页面平滑滚动特效。默认为 false。</li>
</ul>
<h4 id="reading"><a href="#reading" class="headerlink" title="reading"></a>reading</h4><p>用于设置阅读体验。</p>
<ul>
<li>entry_excerpt: 首页文章输出摘要的字符长度。默认为80。</li>
</ul>
<h4 id="thumbnail"><a href="#thumbnail" class="headerlink" title="thumbnail"></a>thumbnail</h4><p>用于设置文章缩略图相关。</p>
<ul>
<li>purecolor: 填入颜色代码。如果文章内无设置缩略图，此项又不为空，则使用纯色缩略图。</li>
<li>random_amount: 随机图片数量，根据 <code>主题文件夹 -&gt; source -&gt; img -&gt; random</code> 中的图片数量设置。</li>
</ul>
<h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><p>用于设置站点背景。</p>
<ul>
<li>purecolor: 填入颜色代码。则站点使用纯色背景。</li>
<li>bgimg: 背景地址，默认调用 <code>主题文件夹 -&gt; source -&gt; img</code> 中的 <code>bg.png</code>。可更换此图片或者自己填入 url。</li>
<li>bing: 用于启用 bing 图片。<ul>
<li><code>parameter</code> 参数可用：<code>new</code>, <code>color=</code>, <code>type=</code>。</li>
<li><code>color=</code>: black, blue, brown, green, multi, orange, pink, purple, red, white, yellow。</li>
<li><code>type=</code>: A (animal), C (culture), N (nature), S (space), T (travel)。</li>
</ul>
</li>
</ul>
<h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><p>用于设置站点图片。</p>
<ul>
<li>logo: 显示于 <code>blog_info</code> 模块中。</li>
<li>avatar: 你的头像设置。</li>
<li>daily_pic: 显示于 <code>daily_pic</code> 模块中。</li>
<li>sidebar_header: 显示于 <code>sidebar</code> 顶部。</li>
<li>footerico: 设置 <code>footer</code> 中 SNS 图标的路径。</li>
<li>random_thumbnail: 随机缩略图的路径。</li>
<li>footer_image: 你可以在侧边栏底部放置任何你想要的图片。</li>
</ul>
<p>比如，你可以这样配置 又拍云 Logo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">footer_image:</div><div class="line">    upyun_logo:</div><div class="line">        link: &quot;https://www.upyun.com/&quot;</div><div class="line">        src: &quot;/img/upyun_logo.png&quot;</div></pre></td></tr></table></figure>
<h4 id="fonts"><a href="#fonts" class="headerlink" title="fonts"></a>fonts</h4><p>用于设置站点的字体。</p>
<p>默认值为 <code>Roboto, &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;, Arial, sans-serif</code></p>
<blockquote>
<p>该字体设定较为规范，如无特殊要求 无需额外修改。</p>
</blockquote>
<h4 id="card-elevation"><a href="#card-elevation" class="headerlink" title="card_elevation"></a>card_elevation</h4><p>用于设置文章列表的卡片阴影，如无特殊要求 无需额外修改。</p>
<h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><h4 id="sns"><a href="#sns" class="headerlink" title="sns"></a>sns</h4><p>用于填写你的 SNS 信息，除了 <code>email</code>，其他信息会以按钮的形式显示在 <code>footer</code>。</p>
<ul>
<li>email: 显示在侧边栏中。</li>
<li>twitter</li>
<li>facebook</li>
<li>googleplus</li>
<li>weibo</li>
<li>instagram</li>
<li>tumblr</li>
<li>github</li>
<li>linkedin</li>
<li>facebook</li>
</ul>
<h4 id="sns-share"><a href="#sns-share" class="headerlink" title="sns_share"></a>sns_share</h4><p>用于定义分享菜单中的项目， <code>false</code> 的项将不会显示在分享菜单中。</p>
<ul>
<li>twitter</li>
<li>googleplus</li>
<li>weibo</li>
<li>linkedin</li>
<li>qq</li>
<li>telegram</li>
</ul>
<h4 id="dropdown"><a href="#dropdown" class="headerlink" title="dropdown"></a>dropdown</h4><p>用于设置 Paradox 侧边栏用户下拉菜单，默认为空。</p>
<p>以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	link: &quot;/link/&quot;</div><div class="line">	icon: icon</div></pre></td></tr></table></figure>
<p>作为一个单位。</p>
<p><code>Name</code> 是该独立页面的名称，请自行修改。<br><code>link</code> 的参数为相对路径，对应 hexo 目录下的 <code>source</code> 文件夹内的相应文件夹。<br><code>icon</code> 的参数为自定义的 Material 图标，可用图标可在 <a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a> 查询。</p>
<blockquote>
<p>参考配置样式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dropdown:</div><div class="line">    Email Me:</div><div class="line">        link: &quot;#&quot;</div><div class="line">        icon: email</div></pre></td></tr></table></figure>
<h5 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h5><p>设置 “主页” 按钮</p>
<ul>
<li><code>use</code>: 设置 <code>true</code> 时会在侧边栏显示 “主页” 按钮.</li>
<li><code>icon</code>: 在 “主页” 前面显示一个 Material 图标。为空和被注释时则不显示.</li>
<li><code>divider</code>: 设置成 <code>true</code></li>
</ul>
<h5 id="archives"><a href="#archives" class="headerlink" title="archives"></a>archives</h5><p>用来设置归档下拉菜单。</p>
<ul>
<li><code>use</code>: 设置成 <code>true</code> 时在侧边栏显示归档。</li>
<li><code>icon</code>: 为归档添加一个 Material Icon，注释掉或为空则不显示 Icon</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在归档按钮底部增加一条分割线。</li>
</ul>
<h5 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h5><p>用来设置分类显示按钮。</p>
<ul>
<li><code>use</code>: 设为 <code>true</code> 在侧边栏显示分类按钮。</li>
<li><code>icon</code>: 在分类按钮前显示一个 Material Icon，注释掉或为空则不显示 Icon</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在归档按钮底部增加一条分割线。</li>
</ul>
<h5 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h5><p>用于设置独立页面，默认为空。填写条目后独立页面入口将显示在：</p>
<ul>
<li><code>logo card</code> <code>Page</code> 按钮的下拉菜单中。(Scheme Paradox)</li>
<li>侧边栏中。(Scheme Paradox)</li>
<li>站点左侧。(Scheme Isolation)</li>
</ul>
<p>请按照如下样例添加个人独立页面。 <code>divider</code> 设置成 <code>true</code> 后会在该条目底部增加一条分割线。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pages:</div><div class="line">    About:</div><div class="line">        link: &quot;#about&quot;</div><div class="line">        icon: person</div><div class="line">        divider: false</div><div class="line">    timeline archive:</div><div class="line">        link: &quot;/timeline/&quot;</div><div class="line">        icon:</div><div class="line">        divider: false</div></pre></td></tr></table></figure>
<h5 id="article-num"><a href="#article-num" class="headerlink" title="article_num"></a>article_num</h5><p>Used to display the number of articles.</p>
<ul>
<li><code>use</code>: 设置成 <code>true</code> 时会在侧边栏显示文章总数。</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在该条目底部增加一条分割线。</li>
</ul>
<h5 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h5><p>Used to customize the sidebar footer.</p>
<ul>
<li><code>divider</code>: 设置成 <code>true</code> 后会在侧边栏底部之前增加一条分割线。</li>
<li><code>theme</code>: 设置成 <code>true</code> 后会在侧边栏底部增加一个指向 Material 主题的链接。</li>
</ul>
<h4 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a>qrcode</h4><p>用于在文章页中显示二维码，扫描二维码即可直接打开文章。<br>需要 hexo-helper-qrcode 支持，使用 <code>npm install hexo-helper-qrcode --save</code> 进行安装。</p>
<h4 id="topPost（开发中）"><a href="#topPost（开发中）" class="headerlink" title="topPost（开发中）"></a>topPost（开发中）</h4><p>使用该插件可以将指定文章置顶。<br>如果您需要这个功能，请使用 <code>npm install hexo-helper-post-top --save</code> 安装支持插件，然后将这个开关设置为 <code>true</code>。<br>之后在您需要置顶文章的 <code>front-matter</code> 中，添加 <code>top: true</code> 即可置顶。</p>
<h3 id="Integrated-Services"><a href="#Integrated-Services" class="headerlink" title="Integrated Services"></a>Integrated Services</h3><h4 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h4><p>用于于设置评论系统。</p>
<p>具体设置参考 <a href="https://material.viosey.com/services/#评论系统" target="_blank" rel="external">评论系统</a></p>
<p>目前可使用 <code>duoshuo</code> <code>disqus</code> 和 <code>disqus_click</code>。</p>
<blockquote>
<p>使用 Disqus_Click 时，页面不会主动加载 Disqus 评论，直到按下按钮。这项设置有助于改善处在 <code>公开、平等、有序 的中国互联网环境</code> 下的浏览者体验。</p>
</blockquote>
<ul>
<li>use:</li>
<li>shortname:</li>
<li>duoshuo_thread_key_type: 用于设置多说 tread key 的使用，默认为 <code>path</code>，可设置为 <code>id</code>。</li>
<li>duoshuo_embed_js_url: 多说 js。</li>
</ul>
<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>用于设置搜索系统。</p>
<p>具体设置参考 <a href="https://material.viosey.com/services/#搜索系统" target="_blank" rel="external">搜索系统</a></p>
<p>目前可使用 <code>google</code> <code>swiftype</code> <code>local</code>。</p>
<ul>
<li>use</li>
<li>swiftype_key</li>
</ul>
<h4 id="analytics"><a href="#analytics" class="headerlink" title="analytics"></a>analytics</h4><p>用于设置访客分析服务，支持 <code>Google Analysis</code> 和 <code>百度站长工具</code></p>
<ul>
<li><code>baidu_id</code>: 百度 ID</li>
<li><code>google_id</code>: Google Analysis 密钥</li>
</ul>
<h4 id="leancloud"><a href="#leancloud" class="headerlink" title="leancloud"></a>leancloud</h4><p>具体设置参考 <a href="https://material.viosey.com/services/#Leancloud" target="_blank" rel="external">设置 Leancloud 浏览次数统计</a></p>
<ul>
<li>enable: 默认为 false。</li>
<li>app_id: APP ID。</li>
<li>app_key: APP Key。</li>
<li>av_core_mini: 统计 js。</li>
</ul>
<h4 id="busuanzi"><a href="#busuanzi" class="headerlink" title="busuanzi"></a>busuanzi</h4><p>具体设置参考 <a href="https://material.viosey.com/services/#不蒜子" target="_blank" rel="external">不蒜子</a></p>
<ul>
<li>enable: 默认为 false。</li>
<li>all_site_uv: 默认为 false。</li>
<li>post_pv: 默认为 false。</li>
<li>busuanzi_pure_mini_js: 统计 js。</li>
</ul>
<h2 id="主要协助开发者"><a href="#主要协助开发者" class="headerlink" title="主要协助开发者"></a>主要协助开发者</h2><p><a href="https://github.com/viosey/hexo-theme-material/graphs/contributors" target="_blank" rel="external">Github - Contributors</a></p>
<ul>
<li><a href="https://github.com/neoFelhz" target="_blank" rel="external">neoFelhz</a></li>
<li><a href="https://github.com/pidupuis" target="_blank" rel="external">pidupuis</a></li>
<li><a href="https://github.com/cubesky" target="_blank" rel="external">cubesky</a></li>
<li><a href="https://github.com/AkarinServer" target="_blank" rel="external">AkarinServer</a></li>
</ul>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><h3 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &lt;title&gt;</div></pre></td></tr></table></figure>
<h3 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h3><p>在 hexo 主目录下 <code>source -&gt; _posts</code> 新建以 <code>.md</code> 为后缀的文件。</p>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter - 官方介绍</a></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
<td>post</td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td>文件名</td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
<tr>
<td><code>thumbnail</code></td>
<td>缩略图地址</td>
<td></td>
</tr>
<tr>
<td><code>toc</code></td>
<td>显示 TOC 按钮</td>
<td>true</td>
</tr>
<tr>
<td><code>comment</code></td>
<td>显示评论</td>
<td>true</td>
</tr>
<tr>
<td><code>notag</code></td>
<td>不生成标签按钮</td>
<td>false</td>
</tr>
<tr>
<td><code>top</code></td>
<td>置顶</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>注1：置顶功能请参考 <a href="https://material.viosey.com/intro/#topPost" target="_blank" rel="external">topPost</a></p>
<h3 id="缩略图功能"><a href="#缩略图功能" class="headerlink" title="缩略图功能"></a>缩略图功能</h3><p>在 Material 主题中，每个 Scheme 都有缩略图功能。<br>只需要在 <code>Front-matter</code> 中添加参数 <code>thumbnail:</code>，然后填入缩略图地址即可。</p>
<h4 id="Paradox-1"><a href="#Paradox-1" class="headerlink" title="Paradox"></a>Paradox</h4><p>此 Scheme 如果没有自定义缩略图，则使用默认随机缩略图，随机缩略图目录位于主题文件夹下 <code>source -&gt; img -&gt; random</code>。<br>随机缩略图可添加自己喜好的图片，格式为 <code>.png</code> 。然后在 <strong>主题配置文件</strong> 中 <code>thumbnail:random_amount</code> 修改缩略图数量。</p>
<h4 id="Isolation-1"><a href="#Isolation-1" class="headerlink" title="Isolation"></a>Isolation</h4><p>此 Scheme 只会显示已自定义缩略图。</p>
<h2 id="创建「关于我」页面"><a href="#创建「关于我」页面" class="headerlink" title="创建「关于我」页面"></a>创建「关于我」页面</h2><p>新建一个 <code>about</code> 页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;about&quot;</div></pre></td></tr></table></figure>
<p>如果想添加「关于我」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h2 id="创建「友情链接」页面"><a href="#创建「友情链接」页面" class="headerlink" title="创建「友情链接」页面"></a>创建「友情链接」页面</h2><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>links</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: links</div><div class="line">date:</div><div class="line">layout: links</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「友情链接」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>同样在在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件。</p>
<p>单个友情链接的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">    link: http://example.com</div><div class="line">    avatar: http://example.com/avatar.png</div><div class="line">    descr: &quot;这是一个描述&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加多个友情链接，只需要根据上面的格式重复填写即可。</p>
</blockquote>
<ul>
<li>将 <code>Name</code> 改为友情链接的名字，例如 <code>Viosey</code>。</li>
<li><code>http://example.com</code> 为友情链接的地址。</li>
<li><code>http://example.com/avatar.png</code> 为友情链接的头像。</li>
<li><code>这是一个描述</code> 为友情链接描述。</li>
</ul>
<h2 id="创建「图库」页面"><a href="#创建「图库」页面" class="headerlink" title="创建「图库」页面"></a>创建「图库」页面</h2><h3 id="创建页面-1"><a href="#创建页面-1" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>gallery</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: gallery</div><div class="line">date:</div><div class="line">layout: gallery</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「图库」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h3 id="添加数据-1"><a href="#添加数据-1" class="headerlink" title="添加数据"></a>添加数据</h3><p>同样在在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>gallery.yml</code> 的文件。</p>
<p>单个图片的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	full_link: http://example.com/full-image.png</div><div class="line">	thumb_link: http://example.com/thumb-image.png</div><div class="line">	descr: &quot;这是一个描述&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加多张图片，只需要根据上面的格式重复填写即可。</p>
</blockquote>
<ul>
<li>将 <code>Name</code> 改为图片名字，例如 <code>Material</code>。</li>
<li><code>http://example.com/full-image.png</code> 为完整图片的地址。</li>
<li><code>http://example.com/thumb-image.png</code> 为图片缩略图的地址，如果没有缩略图也可使用完整图片的地址。</li>
<li><code>这是一个描述</code> 为图片描述。</li>
</ul>
<h2 id="创建「标签云」页面"><a href="#创建「标签云」页面" class="headerlink" title="创建「标签云」页面"></a>创建「标签云」页面</h2><h3 id="创建页面-2"><a href="#创建页面-2" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>tags</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date:</div><div class="line">layout: tags</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「标签云」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h2 id="创建「私有」页面"><a href="#创建「私有」页面" class="headerlink" title="创建「私有」页面"></a>创建「私有」页面</h2><p>如果某篇文章不想显示在站点中，只需要在 <code>front-matter</code> 中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">layout: private</div></pre></td></tr></table></figure>
<h2 id="添加自定义代码"><a href="#添加自定义代码" class="headerlink" title="添加自定义代码"></a>添加自定义代码</h2><p>如果想要在站点添加自定义 <code>font-face</code> 或者统计代码（例如 <code>Google Analytics</code>）。</p>
<p>需要在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 head.yml 的文件。</p>
<p>单个代码格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	&quot;put your code here&quot;</div></pre></td></tr></table></figure>
<p>代码将显示在 <code>` 之前，</code>Name` 将作为注释显示在代码上方。</p>
<h2 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h2><p><a href="https://material.google.com/style/color.html#color-color-palette" target="_blank" rel="external">Color palette</a></p>
<h2 id="Material-图标"><a href="#Material-图标" class="headerlink" title="Material 图标"></a>Material 图标</h2><p>用于自定义例如 <code>dropdown: icon</code> 的图标。</p>
<p><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a></p>
<h2 id="代码高亮样式"><a href="#代码高亮样式" class="headerlink" title="代码高亮样式"></a>代码高亮样式</h2><p>从 <code>1.3.0</code> 版本开始，您可以使用 <code>hexo-prism-plugin</code> 进行代码染色，具体文档请参阅<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="external">Hexo-Prism-Plugin 插件文档</a></p>
<p>在 <strong>主题配置文件</strong> 中定位到 <code>Integrated Services</code> 即可进行第三方服务的配置。</p>
<h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><h3 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h3><p>Material 内置了一套 多说 的 Material Design 样式。</p>
<p>使用 <a href="https://duoshuo.com/" target="_blank" rel="external">多说</a>，仅需在 <strong>主题配置文件</strong> 中填写 <code>comment: use:</code> 字段，值设置为 <code>&quot;duoshuo&quot;</code>。</p>
<p>然后在 <code>comment: shortname:</code> 填入你的多说 shortname</p>
<blockquote>
<p>主题的多说评论使用两种 <code>tread key</code>，使用方式参考：<a href="https://material.vss.im/intro/#comment" target="_blank" rel="external">comment</a>。<br>默认为文章的相对路径。<br>另一种为 id，需要在 <code>front-matter</code> 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; id: id_number</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<p>如果是从其他博客系统迁移过来，需要和多说后台的 Thread_Key 保持一致。</p>
<h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><p>使用 <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a>，仅需在 <strong>主题配置文件</strong> 中填写 <code>comment: use:</code> 字段，值设置为 <code>&quot;disqus&quot;</code> 或者 <code>&quot;disqus_click&quot;</code>。</p>
<p>然后在 <code>comment: shortname:</code> 填入你的 Disqus shortname</p>
<hr>
<p>需要注意的是此处的 <code>shortname</code> 不是你的登录的 id，是你的评论二级域名去掉 <code>.duoshuo.com</code> 或 <code>.disqus.com</code> 部分</p>
<blockquote>
<p>例如：多说域名 <code>example.duoshuo.com</code> / Disqus 域名 <code>example.disqus.com</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; shortname: example</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><p>阅读 <a href="https://material.viosey.com/intro/#comment" target="_blank" rel="external">Intro-comment</a> 搜索系统配置介绍。</p>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>调用 Google 搜索引擎对您的站点进行搜索。</p>
<p>在 <strong>主题配置文件</strong> 中修改 <code>search: use</code> 的值为 <code>google</code> 即可。</p>
<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>使用本地搜索需要安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 插件。<br>然后在 <code>站点配置</code> 文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">	path: search.xml</div><div class="line">	field: post</div></pre></td></tr></table></figure>
<h3 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h3><p>注册 <a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a>，然后在 <strong>主题配置文件</strong> 中修改 <code>search: use</code> 的值为 <code>swiftype</code>，并填入你的 <code>swiftype_key</code>。</p>
<blockquote>
<p>在你的 Swiftype Install Code 中，有这么一行代码 <code>_st(&#39;install&#39;,&#39;*****&#39;,&#39;2.0.0&#39;);</code></p>
<p><code>*****</code> 即为 <code>swiftype_key</code></p>
</blockquote>
<h2 id="浏览统计"><a href="#浏览统计" class="headerlink" title="浏览统计"></a>浏览统计</h2><h3 id="Leancloud"><a href="#Leancloud" class="headerlink" title="Leancloud"></a>Leancloud</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>打开 LeanCloud 官网，进入<a href="https://leancloud.cn/login.html#/signup" target="_blank" rel="external">注册页面</a>注册。完成邮箱激活后，点击头像，进入控制台页面，如下：</p>
<p><img src="https://qiniu.viosey.com/img/leancloud-config-1.png" alt="img"></p>
<h4 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h4><p>创建一个新应用 (默认类型为JavaScript SDK)，点击应用进入；</p>
<p>创建名称为 <code>Counter</code> 的 Class<br>注意：<code>ACL 权限</code> 必须为 <code>无限制</code><br><img src="https://qiniu.viosey.com/img/leancloud-config-2.png" alt="img"><br><img src="https://qiniu.viosey.com/img/leancloud-config-3.png" alt="img"></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>编辑 <code>主题配置文件</code> ，修改 <code>leancloud</code> 条目<br>将 <code>enable</code> 改为 <code>true</code>，再填入 <code>app_id</code> 与 <code>app_key</code>。</p>
<blockquote>
<p>在 <code>应用-&gt;设置-&gt;应用 Key</code> 可看到 <code>APP ID</code> 与 <code>APP Key</code>，</p>
</blockquote>
<h4 id="Web-安全性"><a href="#Web-安全性" class="headerlink" title="Web 安全性"></a>Web 安全性</h4><p>为了保证应用的统计计数功能仅应用于自己的博客系统，你可以在 <code>应用-&gt;设置-&gt;安全中心</code> 的Web安全域名中加入自己的博客域名，以保证数据的调用安全。</p>
<h3 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h3><p>使用 不蒜子 浏览次数统计，仅需在 <strong>主题配置文件</strong> 中将 <code>busuanzi: enable:</code> 的值设置为 <code>true</code>。</p>
<p>其中：</p>
<ul>
<li><code>all_site_uv</code> 可统计全站的独立访客人数，即可在 <code>blog_info</code> 模块的 <code>Menu</code> 菜单中看到。</li>
<li><code>post_pv</code> 统计每篇文章的页面浏览次数，在文章页的 <code>分享按钮</code> 菜单中可看到。</li>
<li><code>busuanzi_pure_mini_js</code> 调用不蒜子统计 js 文件，可将改文件放到自己的 CDN 然后修改值。</li>
</ul>
<h2 id="捐赠是什么？"><a href="#捐赠是什么？" class="headerlink" title="捐赠是什么？"></a>捐赠是什么？</h2><p>捐赠是国外用来支持开发者和资源贡献者的一种常见的方式。这些开发者不通过加入广告或者进行第三方推广获得收入，仅通过使用的用户自己主动捐赠来表达对开发者的感谢。</p>
<h2 id="为什么要捐赠？"><a href="#为什么要捐赠？" class="headerlink" title="为什么要捐赠？"></a>为什么要捐赠？</h2><p>我（viosey）把开发 Material 主题作为我的业余爱好，同时我对此乐此不疲。但是，这毕竟让我付出了时间成本、设备成本，同时为了 Material 文档和 Demo 的稳定访问也使用了 CDN。为了平衡宽带，服务器，CDN 的使用费用，因此，我希望使用捐赠的方式来平衡以上活动之中的投入。</p>
<p>所以如果您觉得我制作的 主题、我写的教程、我维护的项目或者提供的其它资源对你有帮助，您可以对我进行捐赠。捐赠是自愿的，非强制性的，捐赠多少也都没关系；您的支持就是对我最大的支持！</p>
<h2 id="捐赠的作用？"><a href="#捐赠的作用？" class="headerlink" title="捐赠的作用？"></a>捐赠的作用？</h2><p>当一个非盈利项目仅仅依靠兴趣的支撑，很难确定它还能走多远。所有的捐赠都将用于提升我的环境配置，维持网站的运行和提高我的积极性。</p>
<h2 id="捐赠的渠道？"><a href="#捐赠的渠道？" class="headerlink" title="捐赠的渠道？"></a>捐赠的渠道？</h2><p><a href="https://www.paypal.me/viosey" target="_blank" rel="external">PayPal</a></p>
<p><strong>支付宝：</strong><br><img src="https://material.viosey.com/images/donate/AliPayQR.png" alt="img"></p>
<p><strong>微信支付：</strong><br><img src="https://material.viosey.com/images/donate/WeChanQR.png" alt="img"></p>
<p><strong>比特币：</strong><br><img src="https://material.viosey.com/images/donate/BTCQR.png" alt="img"></p>
<h2 id="捐赠者名单"><a href="#捐赠者名单" class="headerlink" title="捐赠者名单"></a>捐赠者名单</h2><p>十分感谢以下捐赠者给予的打赏：</p>
<ul>
<li>$ 20.00 SGD — Sun Ximeng</li>
<li>￥ 10.00 CNY — 佚名 (微信捐赠）</li>
<li>￥ 5.00 CNY — 神楽坂立音</li>
<li>￥ 5.00 CNY — Before_summ</li>
</ul>
<h2 id="捐赠前要考虑什么-？"><a href="#捐赠前要考虑什么-？" class="headerlink" title="捐赠前要考虑什么 ？"></a>捐赠前要考虑什么 ？</h2><p>这个渠道的存在并不意味着你必须捐赠。你也可以继续使用而不做任何事。</p>
<p>你的捐赠意味着你对我过去所做的表示感谢，而不是表达对未来的期望。但你的捐赠会提高我的积极性和设备配置让我努力把手头上的事做的更好。</p>
<p>我会维护一份名单以感谢所有的捐赠者。正如我所说，捐赠是一个向我表示感谢的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前文中刚有提到怎样基于Hexo搭建github博客，在此不赘述。本文主要讲解安装Material主题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;强烈建议点击看原文，原文排版及内容都优于本文！！！&quot;&gt;&lt;a href=&quot;#强烈建议点击看原文
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级Hexo出现ERROR Deployer not found: git 解决方案</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/%E5%8D%87%E7%BA%A7Hexo%E5%87%BA%E7%8E%B0ERROR-Deployer-not-found-git/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/升级Hexo出现ERROR-Deployer-not-found-git/</id>
    <published>2017-02-26T13:21:04.000Z</published>
    <updated>2017-02-26T13:22:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>执行以下代码即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>重新deploy即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行以下代码即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre
    
    </summary>
    
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>mac下查找端口是否占用及关闭占用端口进程</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/mac%E4%B8%8B%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/mac下查找端口是否占用及关闭占用端口进程/</id>
    <published>2017-02-26T11:34:32.000Z</published>
    <updated>2017-02-26T11:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何查找某个端口是否被占用:</p>
<p>我们查找下 4000 端口当前被谁占用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexdeMacBook-Air:Hexo_Material apple$ lsof -i:4000</div></pre></td></tr></table></figure>
<p>结果显示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">COMMAND  PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</div><div class="line">node    1341 apple   28u  IPv4 0x72e37ef4542a1f31      0t0  TCP *:terabase (LISTEN)</div><div class="line">node    1341 apple   35u  IPv4 0x72e37ef454cfc449      0t0  TCP localhost:terabase-&gt;localhost:53866 (CLOSE_WAIT)</div><div class="line">node    1341 apple   36u  IPv4 0x72e37ef44b50d259      0t0  TCP localhost:terabase-&gt;localhost:53867 (CLOSE_WAIT)</div><div class="line">node    1341 apple   37u  IPv4 0x72e37ef44b87e259      0t0  TCP localhost:terabase-&gt;localhost:53868 (CLOSE_WAIT)</div><div class="line">node    1341 apple   38u  IPv4 0x72e37ef447e55f31      0t0  TCP localhost:terabase-&gt;localhost:53869 (CLOSE_WAIT)</div><div class="line">node    1341 apple   39u  IPv4 0x72e37ef448b52b51      0t0  TCP localhost:terabase-&gt;localhost:53870 (CLOSE_WAIT)</div></pre></td></tr></table></figure>
<p>可以看到一个node进程占用了 4000 端口.</p>
<p>如何关闭此进程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexdeMacBook-Air:Hexo_Material apple$ kill -9 1341</div></pre></td></tr></table></figure>
<p>ok,这样就结束了占用 4000 端口的进程.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何查找某个端口是否被占用:&lt;/p&gt;
&lt;p&gt;我们查找下 4000 端口当前被谁占用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo主题Material的使用</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/Material%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/Material的使用/</id>
    <published>2017-02-26T11:19:29.000Z</published>
    <updated>2017-02-26T13:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装Hexo后，运行以下命令在目标中初始化Hexo ``。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>一旦初始化，这里是你的项目文件夹将是什么样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h2 id="安装「Material」"><a href="#安装「Material」" class="headerlink" title="安装「Material」"></a>安装「Material」</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件放置于站点目录的 <code>themes</code> 目录下，然后修改下配置文件即可。<br>具体到 Material 来说，有 <code>Github</code> 和 <code>NPM</code> 两种方式。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote>
<p>可以选择 克隆 或者 下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="external">稳定的发布版本</a>。</p>
</blockquote>
<p>为了方便之后的更新，建议使用 <strong>克隆</strong> 的方式。克隆命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site/themes</div><div class="line">$ git clone https://github.com/viosey/hexo-theme-material.git material</div></pre></td></tr></table></figure>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-material</div></pre></td></tr></table></figure>
<p>该方式会把 Material 主题下载到 <code>hexo</code> 目录下的 <code>node_modules</code> 文件夹中。<br>找到 <code>hexo-material</code> 文件夹，然后把文件复制到 <code>themes</code> 目录中的 <code>Material</code> 主题文件夹里。</p>
<h2 id="启用「Material」"><a href="#启用「Material」" class="headerlink" title="启用「Material」"></a>启用「Material」</h2><p>克隆完成后，修改主题文件夹名称，将其改为 <code>material</code> 。<br>然后打开 <strong>站点配置文件</strong>，找到 <code>theme</code> 字段，并将其值更改为 <code>material</code> 。</p>
<blockquote>
<p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code> 字段与之对应即可。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code>，并访问 <code>http://localhost:4000</code>，确保站点正确运行。</p>
<h2 id="更新「Material」"><a href="#更新「Material」" class="headerlink" title="更新「Material」"></a>更新「Material」</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>即可拉取最新版本。</p>
<h3 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h3><p>NPM 更新有两种方式：</p>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm-update"></a>npm-update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update hexo-material</div></pre></td></tr></table></figure>
<p>然后将文件复制到 <code>Material</code> 主题文件夹中。</p>
<h4 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h4><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="external">npm-check</a> 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。</p>
<p>安装 npm-check：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npm-check</div></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm-check hexo-material</div></pre></td></tr></table></figure>
<p>使用空格键可以选择需要处理的包，回车直接进行处理。</p>
<h2 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>编辑 <strong>站点配置文件</strong>，将 <code>language</code> 设置成你所需要的语言。<br>可用的语言如下：</p>
<ul>
<li>العَرَبِيَّة (ar)</li>
<li>English (en)</li>
<li>Español (es)</li>
<li>Français (fr)</li>
<li>Deutsche (de)</li>
<li>日本語 (ja)</li>
<li>Malay (ms)</li>
<li>简体中文 (zh-CN)</li>
<li>繁體中文 (zh-TW)</li>
</ul>
<blockquote>
<p>例如：选用繁體中文，则配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; language: zh-TW</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>编辑 <strong>站点配置文件</strong>，<code>url</code> 填写主域名，<code>root</code> 填写 子目录/根域名</p>
<blockquote>
<p>例如：站点域名为 <code>http://example.com/hexo</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; url: http://example.com</div><div class="line">&gt; root: /hexo</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>若你的站点没有运行在子目录中，则 <code>root</code> 填写为 <code>/</code>。</p>
<h3 id="作者名称"><a href="#作者名称" class="headerlink" title="作者名称"></a>作者名称</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述设置"><a href="#站点描述设置" class="headerlink" title="站点描述设置"></a>站点描述设置</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>，配置方式如插件 <code>README.md</code> 所示。<br>然后在 <a href="https://material.viosey.com/intro/#url" target="_blank" rel="external">url: rss</a> 中添加生成的 feed 路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装Hexo后，运行以下命令在目标中初始化Hexo ``。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=
    
    </summary>
    
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/26/hello-world/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/26/hello-world/</id>
    <published>2017-02-26T10:55:46.000Z</published>
    <updated>2017-02-26T10:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新产品开发过程（一）</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/25/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/25/新产品开发过程/</id>
    <published>2017-02-25T14:14:40.000Z</published>
    <updated>2017-03-01T13:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- 定义</div><div class="line">- 阶段回顾法</div><div class="line">- 阶段关卡发</div><div class="line">- 瀑布式开发法</div><div class="line">- 敏捷式开发法</div><div class="line">- 精益生产开发法</div><div class="line">- 设计思考</div><div class="line">- 过程拥有者</div></pre></td></tr></table></figure>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><h5 id="过程定义："><a href="#过程定义：" class="headerlink" title="-过程定义："></a>-过程定义：</h5><p>新产品开发过程</p>
<ol>
<li>一组严谨定义的任务与步骤，用以描述一家公司将初期构想各自转换成可以销售的产品与或服务的正规方法。</li>
<li>新产品开发词汇表。<strong><em>（存疑）</em></strong></li>
</ol>
<p>步骤、活动、决策、目标的组合</p>
<p>如果执行得当将会产生出组织需要的新产品</p>
<h5 id="为什么需要过程"><a href="#为什么需要过程" class="headerlink" title="-为什么需要过程"></a>-为什么需要过程</h5><p>10项能赢的重要成功因素</p>
<ol>
<li>独特优越的产品</li>
<li>强力的市场导向</li>
<li>更多前期的研究</li>
<li>在开发前敏锐而提早的产品定义</li>
<li>正确的组织架构 —— 团队合作</li>
<li>创新而又支持性的环境</li>
<li>领导阶层支持</li>
<li>创建一个漏斗而非隧道</li>
<li>将产品管理视为过程</li>
<li>给予产品开发足够的资源</li>
</ol>
<h5 id="前期多做研究是否意味上市时间落后？"><a href="#前期多做研究是否意味上市时间落后？" class="headerlink" title="- 前期多做研究是否意味上市时间落后？"></a>- 前期多做研究是否意味上市时间落后？</h5><p>​    在前期话费较多时间和金钱可以大幅改善成功的机会 - 对此有明显的证据</p>
<p>​    更多的黄钻被工作会导致更好更敏捷的产品和项目定义 - 这会加速开发阶段（较少不断地浪费时间）</p>
<p>​    完成前期准备工作可以预先考虑到产品问题和设计改更 - 这些产品设计变更可以在这过程早起完成，而不是等产品上市才做</p>
<h5 id="各种过程的演化"><a href="#各种过程的演化" class="headerlink" title="-各种过程的演化"></a>-各种过程的演化</h5><p>​    大多数公司修改新产品开发过程以符合所需</p>
<p>​    任何种类的新产品开发过程都比没有任何过程要有生产力</p>
<p>​    其他一致的系统有：</p>
<ul>
<li>阶段回顾</li>
<li>阶段关卡</li>
</ul>
<h4 id="阶段回顾法"><a href="#阶段回顾法" class="headerlink" title="阶段回顾法"></a>阶段回顾法</h4><h5 id="阶段回顾法-1"><a href="#阶段回顾法-1" class="headerlink" title="阶段回顾法"></a>阶段回顾法</h5><p>​    在阶段性的产品开发过程中，首先，一项功能完成一组任务，然后将产生的信息持续不断地传递给其他功能，在逐次地完成西一组任务并将所有信息传递给下一功能。</p>
<p>在这种产品开发过程中，非常缺乏多功能的团队合作。</p>
<p>也称为接力过程</p>
<p>大多数公司已从这种流程转移至使用多功能软对的阶段关卡发</p>
<p><br></p>
<p>阶段一：识别机会、选择</p>
<p>阶段二：产生概念</p>
<p>阶段三：概念项目评量</p>
<p>阶段四：开发</p>
<p>阶段五：上市</p>
<h5 id="模糊的的前端"><a href="#模糊的的前端" class="headerlink" title="模糊的的前端"></a>模糊的的前端</h5><p>阶段1~3成为模糊的前端</p>
<p>当产品概念仍然很模糊的时候，产品呢开发的刚起步时期会很混乱</p>
<p>在更正式的产品开发过程之前，一般包括三项任务</p>
<ul>
<li>策略规则</li>
<li>概念产生</li>
<li>预做技术评量</li>
</ul>
<p>这些活动通常杂乱无章，不可预期，毫无组织</p>
<p>比较起来，后来的新产品开发过程典型的有组织、可预期以及有条理，具有一组规定的活动，应回答的问题以及该做的决定</p>
<h4 id="阶段关卡法"><a href="#阶段关卡法" class="headerlink" title="阶段关卡法"></a>阶段关卡法</h4><p>阶段关卡过程是为了将一种新产品的项目从想法逐渐转变成上市产品的一种概念</p>
<p>阶段关卡法讲所要付出的努力以管理决策关卡区分成不同的阶段</p>
<p>跨功能团队在管理层批准进行下一阶段的产品开发之前，必须成功地完成每一阶段所规定的一组跨功能任务</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7nanvqd8g30fu02tmx8.gif" alt=""></p>
<h5 id="阶段-1-2"><a href="#阶段-1-2" class="headerlink" title="阶段(1/2)"></a>阶段(1/2)</h5><p>阶段是跨功能的（其中没有研究和开发或营销阶段）以及为了提升上市的速度，每一项活动是并行的</p>
<p>每一阶段的成本都高于前一阶段，结果是渐进的承诺。一旦不确定性降低，可以提高支出，风险也可管控（As uncertainties decrease, expenditures are allowed to rise and risk is managed.）</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7naxr3brg30ai02tjra.gif" alt=""></p>
<h5 id="阶段-2-2"><a href="#阶段-2-2" class="headerlink" title="阶段(2/2)"></a>阶段(2/2)</h5><p>活动：团队必须根据项目计划进行工作</p>
<p>集成分析：所有功能性活动结果的团队集成分析可以藉由跨功能互动推衍</p>
<p>集成物：代表集成分析的结果</p>
<p>活动 + 分析 = 交付物</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7nbb7jyog3080030q2t.gif" alt=""></p>
<h5 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h5><p>交付物：关卡查验的输入 - 项目领导者和团队交付至会议的东西</p>
<p>标准：为了能做出继续/终止以及优先序的决策，项目在接受评判时所需的条件</p>
<p>输出：关卡查验的结果。关卡必须清楚地表达结果，须包括：一项决策（继续、终止、暂停、循环）以及下一步怎么走（核准的项目计划，日期以及下一关卡所同意的交付物）</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7nbh2dvtg3080030wed.gif" alt=""></p>
<h5 id="关卡通过标准"><a href="#关卡通过标准" class="headerlink" title="关卡通过标准"></a>关卡通过标准</h5><h6 id="必须符合"><a href="#必须符合" class="headerlink" title="必须符合"></a>必须符合</h6><p>​    有是非题，一个NO表示终止的决定，检查清单是用来表示必须符合条目最平常的格式</p>
<h6 id="应该符合"><a href="#应该符合" class="headerlink" title="应该符合"></a>应该符合</h6><p>​    有高度渴望的项目特性，但是对问题回答NO并不会终止该项目；确切的地说是对这些问题加以评分并决定项目的分数，评分模型将‘应该符合’的问题处理得很好</p>
<h5 id="关卡会议"><a href="#关卡会议" class="headerlink" title="关卡会议"></a>关卡会议</h5><p>把关者（守门人）包括技术和商业人民</p>
<p>可以透过鄙视来对比评量标准以审核关于项目的想法</p>
<p>这一份必须符合标准的清单会以“是”、“否”来给分，并且所有的答案必须是“是”；只要有一个“否”便会终止此项目</p>
<p>当高层主管在关卡会议批准团队的行动计划，表示他们也愿意拨出资源：金钱，人力以及给予项目领导者和团队时间</p>
<h5 id="阶段0：探索发现-Discovery"><a href="#阶段0：探索发现-Discovery" class="headerlink" title="阶段0：探索发现 Discovery"></a>阶段0：探索发现 Discovery</h5><p>设计前置工作一发现并揭露机会以及产生想法（点子）</p>
<p>关键活动</p>
<pre><code>1. 想法的捕捉和处理系统
2. 在顾客产业中策略性分裂
3. 产生剧本
4. 顾客声音的研究
5. 和领先用户一同工作
6. 趋势导向的技术开发
</code></pre><h5 id="探索发现Discovery（阶段0）（1-2）"><a href="#探索发现Discovery（阶段0）（1-2）" class="headerlink" title="探索发现Discovery（阶段0）（1/2）"></a>探索发现Discovery（阶段0）（1/2）</h5><p>这是任何产品开发的第一部分，无论是否为阶段关卡模型都会使用</p>
<p>开发团队决定哪些项目是公司想要的并有能力追求的</p>
<p>对公司而言，在这阶段参与想法产生活动，例如头脑风暴或其他团队思考阶段，是很普通的</p>
<p>一旦点子产生团队选定一个他们想要进行的项目，此项目通过由组织决策选的第一关卡</p>
<h5 id="探索发现Discovery（阶段0）（2-2）"><a href="#探索发现Discovery（阶段0）（2-2）" class="headerlink" title="探索发现Discovery（阶段0）（2/2）"></a>探索发现Discovery（阶段0）（2/2）</h5><p>当寻找产品点子时，为了能启发商业机会，组织能去看看外面的世界是有益的</p>
<p>与顾客沟通以了解他们如何使用产品后，对于点子产生会有很大的突破。特别是和领先用户沟通可以对开发者提供极大的反馈，领先用户是最有可能对陈品感到热情的顾客</p>
<p>除了和领先用户沟通，和供货商沟通也许会有帮助。了解所有商业种类如何运用原料或许可以据此发现之前尚未被开发的可能性</p>
<h5 id="阶段0：主要输出"><a href="#阶段0：主要输出" class="headerlink" title="阶段0：主要输出"></a>阶段0：主要输出</h5><h6 id="机会概念"><a href="#机会概念" class="headerlink" title="机会概念"></a>机会概念</h6><p>一家公司的技能和资源，或顾客问题。技术驱动或者市场驱动或者两者都是</p>
<h6 id="产品创新章程"><a href="#产品创新章程" class="headerlink" title="产品创新章程"></a>产品创新章程</h6><p>组织努力的中心是将新产品推向市场，这包括项目开始的原因、目标、目的，指导方针以及项目的范围，章程要包括市场喜好，顾客需求，以及潜在销售和利润的假设。</p>
<h5 id="关卡-1：筛选点子"><a href="#关卡-1：筛选点子" class="headerlink" title="关卡 1：筛选点子"></a>关卡 1：筛选点子</h5><p>筛选点子是讲资源投入项目的第一项选择，项目就此诞生</p>
<p>假设在发现阶段获得很多点子，接着的任务便是筛选并排列出值得话费时间和金钱的点子</p>
<p>关卡1是一般性筛选，奖项木透过少数关键的“必须符合”以及“应该符合”的标准作判断</p>
<p>财务标准并非典型第一步筛选的一部分</p>
<blockquote>
<p>以下晚点更新</p>
</blockquote>
<h5 id="关卡-1-评估标准（1-2）"><a href="#关卡-1-评估标准（1-2）" class="headerlink" title="关卡 1 评估标准（1/2）"></a>关卡 1 评估标准（1/2）</h5><h5 id="关卡-1-评估标准（2-2）"><a href="#关卡-1-评估标准（2-2）" class="headerlink" title="关卡 1 评估标准（2/2）"></a>关卡 1 评估标准（2/2）</h5><h5 id="阶段1：定义范围"><a href="#阶段1：定义范围" class="headerlink" title="阶段1：定义范围"></a>阶段1：定义范围</h5><h5 id="阶段1：定义范围-1"><a href="#阶段1：定义范围-1" class="headerlink" title="阶段1：定义范围"></a>阶段1：定义范围</h5><h5 id="关卡2：二次筛选"><a href="#关卡2：二次筛选" class="headerlink" title="关卡2：二次筛选"></a>关卡2：二次筛选</h5><h5 id="关卡2：评估标准"><a href="#关卡2：评估标准" class="headerlink" title="关卡2：评估标准"></a>关卡2：评估标准</h5><h5 id="阶段2：建立商业论证"><a href="#阶段2：建立商业论证" class="headerlink" title="阶段2：建立商业论证"></a>阶段2：建立商业论证</h5><h5 id="主要输出"><a href="#主要输出" class="headerlink" title="主要输出"></a>主要输出</h5><h5 id="关卡3：开始开发"><a href="#关卡3：开始开发" class="headerlink" title="关卡3：开始开发"></a>关卡3：开始开发</h5><h5 id="关卡3：必须满足的评估标准"><a href="#关卡3：必须满足的评估标准" class="headerlink" title="关卡3：必须满足的评估标准"></a>关卡3：必须满足的评估标准</h5><h5 id="关卡3：应该满足的评估标准（1-2）"><a href="#关卡3：应该满足的评估标准（1-2）" class="headerlink" title="关卡3：应该满足的评估标准（1/2）"></a>关卡3：应该满足的评估标准（1/2）</h5><h5 id="关卡3：应该满足的评估标准（2-2）"><a href="#关卡3：应该满足的评估标准（2-2）" class="headerlink" title="关卡3：应该满足的评估标准（2/2）"></a>关卡3：应该满足的评估标准（2/2）</h5><h5 id="阶段3：开发"><a href="#阶段3：开发" class="headerlink" title="阶段3：开发"></a>阶段3：开发</h5><h5 id="关卡4：开始测试"><a href="#关卡4：开始测试" class="headerlink" title="关卡4：开始测试"></a>关卡4：开始测试</h5><h5 id="阶段4：测试与验证"><a href="#阶段4：测试与验证" class="headerlink" title="阶段4：测试与验证"></a>阶段4：测试与验证</h5><h5 id="阶段4：主要活动与输出"><a href="#阶段4：主要活动与输出" class="headerlink" title="阶段4：主要活动与输出"></a>阶段4：主要活动与输出</h5><h5 id="测试与验证（阶段4）"><a href="#测试与验证（阶段4）" class="headerlink" title="测试与验证（阶段4）"></a>测试与验证（阶段4）</h5><h5 id="关卡5：上市"><a href="#关卡5：上市" class="headerlink" title="关卡5：上市"></a>关卡5：上市</h5><h5 id="阶段5：上市"><a href="#阶段5：上市" class="headerlink" title="阶段5：上市"></a>阶段5：上市</h5><h5 id="产品上市（阶段5）"><a href="#产品上市（阶段5）" class="headerlink" title="产品上市（阶段5）"></a>产品上市（阶段5）</h5><h5 id="决策"><a href="#决策" class="headerlink" title="决策"></a>决策</h5><h5 id="过程例外"><a href="#过程例外" class="headerlink" title="过程例外"></a>过程例外</h5><h5 id="先产品开发是每个人的责任"><a href="#先产品开发是每个人的责任" class="headerlink" title="先产品开发是每个人的责任"></a>先产品开发是每个人的责任</h5><h4 id="瀑布式开发法"><a href="#瀑布式开发法" class="headerlink" title="瀑布式开发法"></a>瀑布式开发法</h4><blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="npdp" scheme="http://wanghaonanlpc.github.io/categories/npdp/"/>
    
    
  </entry>
  
  <entry>
    <title>支持NFC的手机（2016）</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/24/%E6%94%AF%E6%8C%81NFC%E7%9A%84%E6%89%8B%E6%9C%BA%EF%BC%882016%EF%BC%89/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/24/支持NFC的手机（2016）/</id>
    <published>2017-02-24T06:15:32.000Z</published>
    <updated>2017-02-24T06:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><p>华为Mate 9(64GB/全网通)<br>华为Mate S臻逸版(128GB/双4G)<br>华为Mate S压感屏版(128GB/电信4G)<br>华为Mate S臻享版(64GB/移动4G)<br>华为Mate S臻享版(32GB/电信4G)<br>华为Mate 8(64GB/全网通)<br>华为Mate 8(32GB/全网通)<br>华为Mate 8(64GB/电信4G)<br>华为Mate 8(32GB/电信4G)<br>华为Mate 8(32GB/移动4G)<br>华为Mate S臻享版(64GB/电信4G)<br>华为Mate S臻享版(64GB/双4G)<br>华为Nexus 7(移动4G)<br>华为Mate 7标准版(16GB/移动4G)</p>
<h4 id="荣耀"><a href="#荣耀" class="headerlink" title="荣耀"></a>荣耀</h4><p>荣耀V9标准版(64GB/全网通)<br>荣耀V9尊享版(128GB/全网通)<br>荣耀V9高配版(64GB/全网通)<br>荣耀8吴亦凡定制版(64GB/全网通)<br>荣耀8(32GB/双4G)<br>荣耀8高配版(32GB/全网通)<br>荣耀8高配版(64GB/全网通)<br>荣耀7超女定制版(64GB/全网通)<br>荣耀8(32GB/全网通)<br>荣耀V8(32GB/全网通)<br>荣耀畅玩4C 增强版(16GB/电信4G)<br>荣耀畅玩5X Plus(64GB/移动4G)<br>荣耀7(16GB/双4G)<br>荣耀7(16GB/电信4G)<br>荣耀7(64GB/全网通)<br>荣耀畅玩4C 标准版(8GB/电信4G)<br>荣耀6(32GB/移动4G)<br>荣耀6(16GB/移动4G)<br>荣耀6(16GB/联通4G)</p>
<h4 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h4><p>小米MIX(128GB/全网通)<br>小米5S(64GB/全网通)<br>小米5(32GB/全网通)<br>小米5S Plus(64GB/全网通)<br>小米5S(32GB/全网通)<br>小米5高配版(64GB/全网通)<br>小米5S Plus(128GB/全网通)<br>小米5S(128GB/全网通)<br>小米5尊享版(128GB/全网通)<br>小米Max(32GB/全网通)<br>小米MIX尊享版(256GB/全网通)<br>小米5尊享3D玻璃版(128GB/全网通)</p>
<h4 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h4><p>三星GALAXY S7 Edge皇帝版(128GB/全网通)<br>三星GALAXY C9 Pro(64GB/全网通)<br>三星GALAXY S7 Edge奥运典藏版(32GB/全网通)<br>三星GALAXY S7 Edge蝙蝠侠特别版(32GB/全网通)<br>三星2016版GALAXY J7(16GB/电信4G)<br>三星GALAXY S7 Edge(64GB/全网通)<br>三星GALAXY Note 5(64GB/全网通)<br>三星2016版Galaxy A5(16GB/移动4G)<br>三星GALAXY S7移动定制(32GB/移动4G)<br>三星GALAXY A9高配版(32GB/全网通)<br>三星2016版GALAXY J7(16GB/双4G)<br>三星2016版GALAXY J5(16GB/双4G)<br>三星2016版Galaxy A5(16GB/全网通)</p>
<p>三星GALAXY Note 7(64GB/全网通)<br>三星GALAXY A8升级版(32GB/移动4G)<br>三星SM-A310(16GB/全网通)<br>三星SM-A510(16GB/移动4G)<br>三星GALAXY S7 Edge(32GB/全网通)<br>三星Galaxy S6 Edge+(64GB/全网通)<br>三星Galaxy S6 Edge+(32GB/全网通)<br>三星GALAXY A8(32GB/全网通)<br>三星GALAXY S6 Mini(16GB/移动4G)<br>三星Project Zero 2(移动4G)<br>三星G430(移动4G)<br>三星GALAXY S6 Edge(64GB/全网通)<br>三星GALAXY S7(32GB/全网通)<br>三星GALAXY S6(32GB/电信4G)<br>三星GALAXY A8(16GB/全网通)<br>三星2016版Galaxy A9(32GB/全网通)</p>
<p>三星Galaxy S6 Active(移动4G)<br>三星GALAXY J3(8GB/电信4G)<br>三星GALAXY J5(16GB/移动4G)<br>三星GALAXY J7(16GB/移动4G)<br>三星GALAXY S6(32GB/移动4G)<br>三星GALAXY S6 Edge(32GB/全网通)<br>三星GALAXY Note 5(32GB/全网通)<br>三星W2015(16GB/电信4G)<br>三星GALAXY Note 4公开版(16GB/双4G)<br>三星Galaxy Note Edge(64GB/双4G)<br>三星GALAXY Note 4(16GB/联通4G)<br>三星GALAXY Note 4 N9109W(16GB/电信4G)<br>三星GALAXY S5 G9009W(16GB/电信4G)<br>三星GALAXY S6(32GB/全网通)<br>三星GALAXY S5 G9008W(16GB/移动4G)<br>三星GALAXY S5 G9008V(16GB/移动4G)</p>
<p>三星GALAXY S5 G9009D(16GB/电信3G)<br>三星GALAXY Note 4(16GB/移动4G)<br>三星GALAXY S5 G9006V(16GB/联通4G)<br>三星N9006 Galaxy Note 3(64GB/联通3G)<br>三星GALAXY S4 粉色版<br>三星GALAXY S4 棕色版<br>三星GALAXY S4 I9500(64GB/联通3G)</p>
<h4 id="OPPO"><a href="#OPPO" class="headerlink" title="OPPO"></a>OPPO</h4><p>OPPO A37(16GB/全网通)<br>OPPO Find 9<br>OPPO N3(32GB/移动4G)<br>OPPO N1 Mini(16GB/移动4G)<br>OPPO N3(32GB/双4G)<br>OPPO N1 Mini(16GB/联通4G)</p>
<h4 id="vivo"><a href="#vivo" class="headerlink" title="vivo"></a>vivo</h4><p>vivo Xplay 5美国队长定制版(128GB/全网通)<br>vivo Xplay 5旗舰版(128GB/全网通)<br>vivo X5Pro V(16GB/电信4G)<br>vivo X5Pro D 3G运存版(16GB/双4G)<br>vivo Xplay3S X520A(32GB/双4G)</p>
<h4 id="LG"><a href="#LG" class="headerlink" title="LG"></a>LG</h4><p>LG X300(16GB/双4G)<br>LG G4 DUAL皮质版(32G/移动4G)<br>LG V20(64GB/双4G)<br>LG G5 Lite(32GB/移动4G)<br>LG H740<br>LG G4s(8GB/移动4G)<br>LG V10(64GB/双4G)<br>LG G4国际版(32GB/双4G)<br>LG G4 Stylus(4G版)<br>LG VW820(移动4G)<br>LG G3 Beat D729(8GB/电信4G)<br>LG G4(32GB/电信4G)<br>LG G3 D859(32GB/电信3G)<br>LG G3 D858(32GB/移动4G)<br>LG G2 D820(16GB/电信3G)<br>LG G2(16GB/联通3G)<br>LG G2(32GB/联通3G)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;华为&quot;&gt;&lt;a href=&quot;#华为&quot; class=&quot;headerlink&quot; title=&quot;华为&quot;&gt;&lt;/a&gt;华为&lt;/h4&gt;&lt;p&gt;华为Mate 9(64GB/全网通)&lt;br&gt;华为Mate S臻逸版(128GB/双4G)&lt;br&gt;华为Mate S压感屏版(128GB/电信4
    
    </summary>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="NFC" scheme="http://wanghaonanlpc.github.io/tags/NFC/"/>
    
  </entry>
  
  <entry>
    <title>献给写作者的markdown新手指南</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/22/%E5%85%88%E7%BB%99%E5%86%99%E4%BD%9C%E8%80%85%E7%9A%84markdown%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/22/先给写作者的markdown新手指南/</id>
    <published>2017-02-22T14:58:59.000Z</published>
    <updated>2017-02-22T15:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hello-world！"><a href="#Hello-world！" class="headerlink" title="Hello world！"></a>Hello world！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Hello-world！&quot;&gt;&lt;a href=&quot;#Hello-world！&quot; class=&quot;headerlink&quot; title=&quot;Hello world！&quot;&gt;&lt;/a&gt;Hello world！&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>那些你听到的前端名词</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/22/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%90%AC%E5%88%B0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%90%8D%E8%AF%8D/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/22/那些你听到的前端名词/</id>
    <published>2017-02-22T12:55:04.000Z</published>
    <updated>2017-02-22T13:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>那些你听到的前端名词</p>
</blockquote>
<h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><blockquote>
<p>Node.js是JavaScript在服务器端的一个运行环境，也是一个工具库，用来和服务器端其他软件互动。它的JavaScript解释器，采用了Google公司的V8引擎。</p>
</blockquote>
<p>nodejs是由<a href="https://github.com/ry" target="_blank" rel="external">Ryan Dahl</a>写的。他做nodejs的初衷是为了做一个高性能是web服务器。<br>为了实现高性能服务器，实现要点是：</p>
<ul>
<li>事件驱动</li>
<li>非阻塞I / O（异步I / O）</li>
</ul>
<h4 id="nodejs的特点"><a href="#nodejs的特点" class="headerlink" title="nodejs的特点"></a>nodejs的特点</h4><ul>
<li>异步I / O</li>
<li>事件与回调函数</li>
<li>单线程</li>
</ul>
<h4 id="nodejs优缺点"><a href="#nodejs优缺点" class="headerlink" title="nodejs优缺点"></a>nodejs优缺点</h4><p>优点</p>
<ul>
<li>高并发（最重要的优点）</li>
<li>适合I / O密集型应用</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>不适合CPU密集型应用; CPU密集型应用给节点带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I / O无法发起<br>解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I / O调用的发起</li>
<li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃<br>解决方案：Nnigx反向代理，负载均衡，开多个进程，绑定多个端口;开多个进程监听同一个端口，使用集群模块;也可以使用forever或pm2模块</li>
<li>开源组件库质量参差不齐，更新快，向下不兼容</li>
</ul>
<h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><blockquote>
<p>Vue.js（读音 /vjuː/, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用<a href="http://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="external">单文件组件</a>和 <a href="http://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="external">Vue 生态系统支持的库</a>开发的复杂单页应用。</p>
</blockquote>
<h4 id="Vue-js-主要是干啥的？"><a href="#Vue-js-主要是干啥的？" class="headerlink" title="Vue.js 主要是干啥的？"></a>Vue.js 主要是干啥的？</h4><p>​    它是一个 MVVM 前端框架<br>​    Model / View / ViewModel<br>​    我们不需要撰写任何 DOM 操作代码：被绑定增强的 HTML 模板是底层数据状态的声明式的映射，    数据不过是普通 JavaScript 对象。我们的视图完全由数据驱动。</p>
<h4 id="为什么要用Vue-js"><a href="#为什么要用Vue-js" class="headerlink" title="为什么要用Vue.js"></a>为什么要用Vue.js</h4><pre><code>1.  清晰简单的API让业务代码更好的组织
2.  解决了前端交互复杂而带来的性能问题
3.  健全、颜值高的官⽅⽂档
4.  完整的开发生态链
</code></pre><h4 id="哪些公司在用Vue-js"><a href="#哪些公司在用Vue-js" class="headerlink" title="哪些公司在用Vue.js"></a>哪些公司在用Vue.js</h4><p>​    Google，Facebook，Airbnb，微博 小米 阿里巴巴，百度，饿了么，58</p>
<h3 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h3><blockquote>
<p>待整理</p>
</blockquote>
<h3 id="Angular-js"><a href="#Angular-js" class="headerlink" title="Angular.js"></a>Angular.js</h3><blockquote>
<p>待整理</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;那些你听到的前端名词&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;NodeJs&quot;&gt;&lt;a href=&quot;#NodeJs&quot; class=&quot;headerlink&quot; title=&quot;NodeJs&quot;&gt;&lt;/a&gt;NodeJs&lt;/h3&gt;&lt;blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://wanghaonanlpc.github.io/categories/%E5%89%8D%E7%AB%AF/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端app内置浏览器优化</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/移动端app内置浏览器优化/</id>
    <published>2017-02-21T13:01:06.000Z</published>
    <updated>2017-02-22T12:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>未总结完，待续</p>
</blockquote>
<h5 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h5><p>Blink内核与Webkit内核</p>
<p>Blink内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blink内核是由谷歌开发，chromium/chrome浏览器的内核，实际上也是由webkit衍生而来。</div></pre></td></tr></table></figure>
<p>Webkit内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webkit是通用内核，适合各种各样的平台，chromium只是其中一个。开源，有专门团队维护。苹果的safari浏览器脱自webkit内核，话语权中。后来Google chromium的理念与webkit有分歧，谷歌自立门户，开始Blink。</div></pre></td></tr></table></figure>
<h5 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安卓的好像是UC的，ios的应该是Safar</div></pre></td></tr></table></figure>
<p>安卓app替换webview</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">低于android 4.4 的webview 是蹩脚的Android WebKit浏览器内核（android版本越低性能就越差,android 4.4以上已经使用了Chromium ）</div></pre></td></tr></table></figure>
<h5 id="几款web引擎"><a href="#几款web引擎" class="headerlink" title="几款web引擎"></a>几款web引擎</h5><ol>
<li>Crosswalk</li>
<li>Tencent X5</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;未总结完，待续&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;微信&quot;&gt;&lt;a href=&quot;#微信&quot; class=&quot;headerlink&quot; title=&quot;微信&quot;&gt;&lt;/a&gt;微信&lt;/h5&gt;&lt;p&gt;Blink内核与Webkit内核&lt;/p&gt;
&lt;p&gt;Blin
    
    </summary>
    
      <category term="移动端" scheme="http://wanghaonanlpc.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="浏览器" scheme="http://wanghaonanlpc.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="ios" scheme="http://wanghaonanlpc.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Hexo与github搭建个人博客(二)</title>
    <link href="http://wanghaonanlpc.github.io/2017/02/21/Hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/"/>
    <id>http://wanghaonanlpc.github.io/2017/02/21/Hexo与github搭建个人博客-二/</id>
    <published>2017-02-21T11:25:48.000Z</published>
    <updated>2017-03-01T13:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍本地Hexo博客网站与Github叠加</p>
</blockquote>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效）。</p>
<p>注意事项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 注册的邮箱一定要验证，否则不会成功；</div><div class="line">2. 仓库名字必须是：username.github.io，其中username是你的用户名；</div><div class="line">3. 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</div></pre></td></tr></table></figure>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><blockquote>
<p>此部分以后在介绍</p>
</blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h3><p>首先，<code>ssh key</code>必须要配置好</p>
<p>然后，配置<code>_config.yml</code>中有关deploy的部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:wanghaonanlpc/wanghaonanlpc.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>此时直接执行<code>hexo d</code>的话一般会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Deployer not found: github 或者 Deployer not found: git</div></pre></td></tr></table></figure>
<p>原因是还需要安装一个插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>
<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p>
<h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #部署到GitHub</div><div class="line">hexo help  # 查看帮助</div><div class="line">hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure>
<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s -g #生成并本地预览</div><div class="line">hexo d -g #生成并上传</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此已经可以完成Hexo与Github搭建个人博客。</p>
<blockquote>
<p>相关文章<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#绑定域名" target="_blank" rel="external">小茗同学的博客园</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍本地Hexo博客网站与Github叠加&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="hexo" scheme="http://wanghaonanlpc.github.io/categories/hexo/"/>
    
    
  </entry>
  
</feed>
