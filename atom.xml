<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个老白 | 野厨</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanghaonanlpc.github.io/"/>
  <updated>2017-04-06T01:23:59.000Z</updated>
  <id>http://wanghaonanlpc.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 日常开发好习惯</title>
    <link href="http://wanghaonanlpc.github.io/2017/04/06/Android-%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/"/>
    <id>http://wanghaonanlpc.github.io/2017/04/06/Android-日常开发好习惯/</id>
    <published>2017-04-06T01:04:09.000Z</published>
    <updated>2017-04-06T01:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android编码规范"><a href="#Android编码规范" class="headerlink" title="Android编码规范"></a>Android编码规范</h3><ol>
<li>java代码中不出现中文，最多注释中可以出现中文；</li>
<li>局部变量命名、静态成员变量命名：只能包含字母，单词首字母出第一个都为大写，其他字母都为小写；</li>
<li>常量命名：只能包含字母和<em>，字母全部大写，单词之间用</em>隔开；</li>
<li>layout中的id命名：命名模式为：view缩写_模块名称_view的逻辑名称 view的缩写详情如下 LinearLayout：ll RelativeLayout:rl TextView:tv ImageView:iv ImageButton:ib Button:btn</li>
<li>activity中的view变量命名 命名模式为：view缩写+逻辑名称 建议：如果layout文件很复杂，建议将layout分成多个模块，每个模块定义一个moduleViewHolder，其成员变量包含所属view</li>
<li>strings.xml中的id命名： 命名模式：activity名称<em>功能模块名称</em>逻辑名称 activity名称<em>逻辑名称 common</em>逻辑名称 strings.xml中，使用activity名称注释，将文件内容区分开来</li>
<li>drawable中的图片命名 命名模式：activity名称<em>逻辑名称/common</em>逻辑名称 7.styles.xml：将layout中不断重现的style提炼出通用的style通用组件，放到styles.xml中；</li>
<li>使用layer-list和selector</li>
<li>图片尽量分拆成多个可重用的图片</li>
<li>服务端可以实现的，就不要放在客户端</li>
<li>引用第三方库要慎重，避免应用大容量的第三方库，导致客户端包非常大</li>
<li>处理应用全局异常和错误，将错误以邮件的形式发送给服务端</li>
<li>图片的.9处理</li>
<li>使用静态变量方式实现界面间共享要慎重</li>
<li>Log(系统名称 模块名称 接口名称，详细描述)</li>
<li>单元测试（逻辑测试、界面测试）</li>
<li>不要重用父类的handler，对应一个类的handler也不应该让其子类用到，否则会导致message.what冲突</li>
<li>activity中在一个View.OnClickListener中处理所有的逻辑</li>
<li>strings.xml中使用%1$s实现字符串的通配</li>
<li>如果多个Activity中包含共同的UI处理，那么可以提炼一个CommonActivity，把通用部分叫由它来处理，其他activity只要继承它即可</li>
<li>使用button+activitgroup实现tab效果时，使用Button.setSelected(true)，确保按钮处于选择状态，并使activitygroup的当前activity与该button对应</li>
<li>如果所开发的为通用组件，为避免冲突，将drawable/layout/menu/values目录下的文件名增加前缀</li>
<li>数据一定要效验，例如 字符型转数字型，如果转换失败一定要有缺省值； 服务端响应数据是否有效判断；</li>
</ol>
<h3 id="Android性能优化"><a href="#Android性能优化" class="headerlink" title="Android性能优化"></a>Android性能优化</h3><ol>
<li>http用gzip压缩，设置连接超时时间和响应超时时间 http请求按照业务需求，分为是否可以缓存和不可缓存，那么在无网络的环境中，仍然通过缓存的httpresponse浏览部分数据，实现离线阅读。</li>
<li>listview 性能优化<ol>
<li>复用convertView 在getItemView中，判断convertView是否为空，如果不为空，可复用。如果couvertview中的view需要添加listerner，代码一定要在if(convertView==null){}之外。</li>
<li>异步加载图片 item中如果包含有webimage，那么最好异步加载</li>
<li>快速滑动时不显示图片 当快速滑动列表时（SCROLL_STATE_FLING），item中的图片或获取需要消耗资源的view，可以不显示出来；而处于其他两种状态（SCROLL_STATE_IDLE 和SCROLL_STATE_TOUCH_SCROLL），则将那些view显示出来</li>
</ol>
</li>
<li>使用线程池，分为核心线程池和普通线程池，下载图片等耗时任务放置在普通线程池，避免耗时任务阻塞线程池后，导致所有异步任务都必须等待</li>
<li>异步任务，分为核心任务和普通任务，只有核心任务中出现的系统级错误才会报错，异步任务的ui操作需要判断原activity是否处于激活状态</li>
<li>尽量避免static成员变量引用资源耗费过多的实例,比如Context</li>
<li>使用WeakReference代替强引用，弱引用可以让您保持对对象的引用，同时允许GC在必要时释放对象，回收内存。对于那些创建便宜但耗费大量内存的对象，即希望保持该对象，又要在应用程序需要时使用，同时希望GC必要时回收时，可以考虑使用弱引用。</li>
<li>超级大胖子Bitmap 及时的销毁(Activity的onDestroy时，将bitmap回收) 设置一定的采样率 巧妙的运用软引用 drawable对应resid的资源，bitmap对应其他资源8.保证Cursor 占用的内存被及时的释放掉，而不是等待GC来处理。并且 Android明显是倾向于编程者手动的将Cursor close掉</li>
<li>线程也是造成内存泄露的一个重要的源头。线程产生内存泄露的主要原因在于线程生命周期的不可控</li>
<li>如果ImageView的图片是来自网络，进行异步加载</li>
<li>应用开发中自定义View的时候，交互部分，千万不要写成线程不断刷新界面显示，而是根据TouchListener事件主动触发界面的更新</li>
</ol>
<h3 id="Android-UI优化"><a href="#Android-UI优化" class="headerlink" title="Android UI优化"></a>Android UI优化</h3><ol>
<li>layout组件化，尽量使用merge及include复用</li>
<li>使用styles，复用样式定义</li>
<li>软键盘的弹出控制，不要让其覆盖输入框</li>
<li>数字、字母和汉字混排占位问题：将数字和字母全角化。由于现在大多数情况下我们的输入都是半角，所以 字母和数字的占位无法确定，但是一旦全角化之后，数字、字母的占位就和一个汉字的占位相同了，这样就可以避免由于占位导致的排版问题。</li>
<li>英文文档排版：textview自动换行时要保持单词的完整性，解决方案是计算字符串长度，然后手动设定每一行显示多少个字母并加上‘n‘</li>
<li>复杂布局使用RelativeLayout</li>
<li>自适应屏幕，使用dp替代pix</li>
<li>使用android:layout_weight或者TableLayout制作等分布局</li>
<li>使用animation-list制作动画效果</li>
</ol>
<h3 id="其他的一些Android开发建议"><a href="#其他的一些Android开发建议" class="headerlink" title="其他的一些Android开发建议"></a>其他的一些Android开发建议</h3><ol>
<li>跟上时代的步伐，把Eclipse换成Android Studio，把SVN换成Git，这当然要适合项目开发属性的需要，Git学习中文网站：<a href="https://git-scm.com/book/zh/" target="_blank" rel="external">https://git-scm.com/book/v2zh/v2</a></li>
<li>勤做总结，推荐使用印象笔记，把一些懂的经验总结起来，把还不懂的文章挂里面，有时间就慢慢消化；</li>
<li>定期code review，不断迭代，你总会发现一些不合理的代码，或者需要优化的地方。</li>
<li>关注一些知名的技术大V或网站，里面许多东西值得你去消化，推荐：<a href="http://p.codekk.com/" target="_blank" rel="external">Android 开源项目集合</a>，<a href="http://tech.meituan.com/" target="_blank" rel="external">http://tech.meituan.com/</a>，<a href="https://www.zhihu.com/people/stormzhang" target="_blank" rel="external">stormzhang</a>，但总归来说，去Android官网或者参考一份Java API文档虽说枯燥，但熟悉之后，你会有更大的进步。</li>
<li>如想更深入了解可阅读珍藏许久的文章：<a href="http://www.uml.org.cn/mobiledev/201211063.asp#1" target="_blank" rel="external">Android应用程序开发以及背后的设计思想深度剖析</a></li>
<li>如果你公司没有强大的测试团队，发布应用前最好把应用放到测试平台去测测，比如云测之类的；</li>
<li>取应用包名的时候切忌取太容易重复的，如果同款手机已经有该包名，那么会因为签名不同而导致安装不上，这也怪中国安卓市场太多，无法像Google Play那样进行包名审核。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android编码规范&quot;&gt;&lt;a href=&quot;#Android编码规范&quot; class=&quot;headerlink&quot; title=&quot;Android编码规范&quot;&gt;&lt;/a&gt;Android编码规范&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;java代码中不出现中文，最多注释中可以出现中文；&lt;/l
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Android StrictMode 使用详解</title>
    <link href="http://wanghaonanlpc.github.io/2017/04/03/Android-StrictMode-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://wanghaonanlpc.github.io/2017/04/03/Android-StrictMode-使用详解/</id>
    <published>2017-04-03T05:06:48.000Z</published>
    <updated>2017-04-03T05:09:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>   StrictMode类是Android 2.3 （API 9）引入的一个工具类，可以用来帮助开发者发现代码中的一些不规范的问题，以达到提升应用响应能力的目的。举个例子来说，如果开发者在UI线程中进行了网络操作或者文件系统的操作，而这些缓慢的操作会严重影响应用的响应能力，甚至出现ANR对话框。为了在开发中发现这些容易忽略的问题，我们使用StrictMode，系统检测出主线程违例的情况并做出相应的反应，最终帮助开发者优化和改善代码逻辑。</p>
<p>​       官网文档：<a href="https://link.juejin.im/?target=http%3A%2F%2Fdeveloper.android.com%2Freference%2Fandroid%2Fos%2FStrictMode.html" target="_blank" rel="external">http://developer.android.com/reference/android/os/StrictMode.html</a></p>
<h2 id="StrictMode具体能检测什么"><a href="#StrictMode具体能检测什么" class="headerlink" title="StrictMode具体能检测什么"></a>StrictMode具体能检测什么</h2><p>严苛模式主要检测两大问题，一个是线程策略，即TreadPolicy，另一个是VM策略，即VmPolicy。</p>
<h3 id="ThreadPolicy线程策略检测"><a href="#ThreadPolicy线程策略检测" class="headerlink" title="ThreadPolicy线程策略检测"></a>ThreadPolicy线程策略检测</h3><ul>
<li>线程策略检测的内容有</li>
<li>自定义的耗时调用 使用detectCustomSlowCalls()开启</li>
<li>磁盘读取操作 使用detectDiskReads()开启</li>
<li>磁盘写入操作 使用detectDiskWrites()开启</li>
<li>网络操作 使用detectNetwork()开启</li>
</ul>
<h3 id="VmPolicy虚拟机策略检测"><a href="#VmPolicy虚拟机策略检测" class="headerlink" title="VmPolicy虚拟机策略检测"></a>VmPolicy虚拟机策略检测</h3><ul>
<li>Activity泄露 使用detectActivityLeaks()开启</li>
<li>未关闭的Closable对象泄露 使用detectLeakedClosableObjects()开启</li>
<li>泄露的Sqlite对象 使用detectLeakedSqlLiteObjects()开启</li>
<li>检测实例数量 使用setClassInstanceLimit()开启</li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>​       其实StrictMode实现原理也比较简单，以IO操作为例，主要是通过在open，read，write，close时进行监控。libcore.io.BlockGuardOs文件就是监控的地方。以open为例，如下进行监控。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public FileDescriptor open(String path, int flags, int mode) throws ErrnoException &#123;</div><div class="line">  BlockGuard.getThreadPolicy().onReadFromDisk();</div><div class="line">    if ((mode &amp; O_ACCMODE) != O_RDONLY) &#123;</div><div class="line">      BlockGuard.getThreadPolicy().onWriteToDisk();</div><div class="line">    &#125;</div><div class="line">    return os.open(path, flags, mode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中onReadFromDisk()方法的实现，代码位于StrictMode.java中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void onReadFromDisk() &#123;</div><div class="line">    if ((mPolicyMask &amp; DETECT_DISK_READ) == 0) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    if (tooManyViolationsThisLoop()) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    BlockGuard.BlockGuardPolicyException e = new StrictModeDiskReadViolation(mPolicyMask);</div><div class="line">    e.fillInStackTrace();</div><div class="line">    startHandlingViolationException(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>​       严格模式的开启可以放在Application或者Activity以及其他组件的onCreate方法。为了更好地分析应用中的问题，建议放在Application的onCreate方法中。<br>​       其中，我们只需要在app的开发版本下使用 StrictMode，线上版本避免使用 StrictMode，这里定义了一个布尔值变量DEV_MODE来进行控制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private boolean DEV_MODE = true</div><div class="line"> public void onCreate() &#123;</div><div class="line">     if (DEV_MODE) &#123;</div><div class="line">         StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()</div><div class="line">                 .detectCustomSlowCalls() //API等级11，使用StrictMode.noteSlowCode</div><div class="line">                 .detectDiskReads()</div><div class="line">                 .detectDiskWrites()</div><div class="line">                 .detectNetwork()   // or .detectAll() for all detectable problems</div><div class="line">                 .penaltyDialog() //弹出违规提示对话框</div><div class="line">                 .penaltyLog() //在Logcat 中打印违规异常信息</div><div class="line">                 .penaltyFlashScreen() //API等级11</div><div class="line">                 .build())</div><div class="line">         StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                 .detectLeakedSqlLiteObjects()</div><div class="line">                 .detectLeakedClosableObjects() //API等级11</div><div class="line">                 .penaltyLog()</div><div class="line">                 .penaltyDeath()</div><div class="line">                 .build())</div><div class="line">     &#125;</div><div class="line">     super.onCreate()</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>​       其中Android3.0引入的方法包括detectCustomSlowCalls()和noteSlowCode()，它们都是用来检测应用中执行缓慢代码的或者潜在的缓慢代码。</p>
<h2 id="查看报告结果"><a href="#查看报告结果" class="headerlink" title="查看报告结果"></a>查看报告结果</h2><p>​       严格模式有很多种报告违例的形式，但是想要分析具体违例情况，还是需要查看日志，终端下过滤StrictMode就能得到违例的具体stacktrace信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat | grep StrictMode</div></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/0ea33120a6ffe723f35677b3ae654fe4" alt="这里写图片描述"></p>
<p>当然也可以选择弹窗形式来简明提醒开发者</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/4f5db78b7fd3f070d2ffed2e87c6c91e" alt="弹窗警告"></p>
<h2 id="ThreadPolicy-详解"><a href="#ThreadPolicy-详解" class="headerlink" title="ThreadPolicy 详解"></a>ThreadPolicy 详解</h2><p>StrictMode.ThreadPolicy.Builder 主要方法如下</p>
<ul>
<li><h4 id="detectNetwork-用于检查UI线程中是否有网络请求操作"><a href="#detectNetwork-用于检查UI线程中是否有网络请求操作" class="headerlink" title="detectNetwork() 用于检查UI线程中是否有网络请求操作"></a>detectNetwork() 用于检查UI线程中是否有网络请求操作</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">检测UI线程中网络请求案例：</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    Button btnTest;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()</div><div class="line">                .detectNetwork()</div><div class="line">                .penaltyLog()</div><div class="line">                .build());</div><div class="line">        btnTest = (Button) findViewById(R.id.btn_test);</div><div class="line">        btnTest.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        int id = v.getId();</div><div class="line">        switch (id) &#123;</div><div class="line">            case R.id.btn_test:</div><div class="line">                postNetwork();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 网络连接的操作</div><div class="line">     */</div><div class="line">    private void postNetwork() &#123;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(&quot;http://www.wooyun.org&quot;);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            conn.connect();</div><div class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(</div><div class="line">                    conn.getInputStream()));</div><div class="line">            String lines = null;</div><div class="line">            StringBuffer sb = new StringBuffer();</div><div class="line">            while ((lines = reader.readLine()) != null) &#123;</div><div class="line">                sb.append(lines);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，触发的警告如下</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/0ea33120a6ffe723f35677b3ae654fe4" alt="这里写图片描述"></p>
<ul>
<li><h4 id="detectDiskReads-和-detectDiskWrites-是磁盘读写检查"><a href="#detectDiskReads-和-detectDiskWrites-是磁盘读写检查" class="headerlink" title="detectDiskReads() 和 detectDiskWrites() 是磁盘读写检查"></a>detectDiskReads() 和 detectDiskWrites() 是磁盘读写检查</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">磁盘读写检查案例：</div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    Button btnTest;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()</div><div class="line">                .detectDiskWrites()</div><div class="line">                .detectDiskReads()</div><div class="line">                .penaltyLog()</div><div class="line">                .build());</div><div class="line">        btnTest = (Button) findViewById(R.id.btn_test);</div><div class="line">        btnTest.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        int id = v.getId();</div><div class="line">        switch (id) &#123;</div><div class="line">            case R.id.btn_test:</div><div class="line">                writeToExternalStorage();</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 文件系统的操作</div><div class="line">     */</div><div class="line">    public void writeToExternalStorage() &#123;</div><div class="line">        File externalStorage = Environment.getExternalStorageDirectory();</div><div class="line">        File mbFile = new File(externalStorage, &quot;castiel.txt&quot;);</div><div class="line">        try &#123;</div><div class="line">            OutputStream output = new FileOutputStream(mbFile, true);</div><div class="line">            output.write(&quot;www.wooyun.org&quot;.getBytes());</div><div class="line">            output.flush();</div><div class="line">            output.close();</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，触发的警告如下<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/97ceb1872ac8c380f07db43e7914e0b9" alt="这里写图片描述"></p>
<ul>
<li><h4 id="noteSlowCall针对执行比较耗时的检查"><a href="#noteSlowCall针对执行比较耗时的检查" class="headerlink" title="noteSlowCall针对执行比较耗时的检查"></a>noteSlowCall针对执行比较耗时的检查</h4><p>​</p>
<p>​       StrictMode从 API 11开始允许开发者自定义一些耗时调用违例，这种自定义适用于自定义的任务执行类中，比如我们有一个进行任务处理的类，为TaskExecutor。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class TaskExecutor &#123;</div><div class="line">    public void execute(Runnable task) &#123;</div><div class="line">        task.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​       先需要跟踪每个任务的耗时情况，如果大于500毫秒需要提示给开发者，noteSlowCall就可以实现这个功能，如下修改代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class TaskExecutor &#123;</div><div class="line"></div><div class="line">    private static long SLOW_CALL_THRESHOLD = 500;</div><div class="line">    public void executeTask(Runnable task) &#123;</div><div class="line">        long startTime = SystemClock.uptimeMillis();</div><div class="line">        task.run();</div><div class="line">        long cost = SystemClock.uptimeMillis() - startTime;</div><div class="line">        if (cost &gt; SLOW_CALL_THRESHOLD) &#123;</div><div class="line">            StrictMode.noteSlowCall(&quot;slowCall cost=&quot; + cost);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行一个耗时2000毫秒的任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">TaskExecutor executor = new TaskExecutor();</div><div class="line">executor.executeTask(new Runnable() &#123;</div><div class="line">  @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">          Thread.sleep(2000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>​       得到的违例日志，注意其中~duration=20 ms并非耗时任务的执行时间，而我们的自定义信息msg=slowCall cost=2000才包含了真正的耗时。</p>
<ul>
<li><h4 id="penaltyDeath-，当触发违规条件时，直接Crash掉当前应用程序。"><a href="#penaltyDeath-，当触发违规条件时，直接Crash掉当前应用程序。" class="headerlink" title="penaltyDeath()，当触发违规条件时，直接Crash掉当前应用程序。"></a>penaltyDeath()，当触发违规条件时，直接Crash掉当前应用程序。</h4></li>
<li><h4 id="penaltyDeathOnNetwork-，当触发网络违规时，Crash掉当前应用程序。"><a href="#penaltyDeathOnNetwork-，当触发网络违规时，Crash掉当前应用程序。" class="headerlink" title="penaltyDeathOnNetwork()，当触发网络违规时，Crash掉当前应用程序。"></a>penaltyDeathOnNetwork()，当触发网络违规时，Crash掉当前应用程序。</h4></li>
<li><h4 id="penaltyDialog-，触发违规时，显示对违规信息对话框。"><a href="#penaltyDialog-，触发违规时，显示对违规信息对话框。" class="headerlink" title="penaltyDialog()，触发违规时，显示对违规信息对话框。"></a>penaltyDialog()，触发违规时，显示对违规信息对话框。</h4></li>
<li><h4 id="penaltyFlashScreen-，会造成屏幕闪烁，不过一般的设备可能没有这个功能。"><a href="#penaltyFlashScreen-，会造成屏幕闪烁，不过一般的设备可能没有这个功能。" class="headerlink" title="penaltyFlashScreen()，会造成屏幕闪烁，不过一般的设备可能没有这个功能。"></a>penaltyFlashScreen()，会造成屏幕闪烁，不过一般的设备可能没有这个功能。</h4></li>
<li><h4 id="penaltyDropBox-，将违规信息记录到-dropbox-系统日志目录中（-data-system-dropbox），你可以通过如下命令进行插件："><a href="#penaltyDropBox-，将违规信息记录到-dropbox-系统日志目录中（-data-system-dropbox），你可以通过如下命令进行插件：" class="headerlink" title="penaltyDropBox()，将违规信息记录到 dropbox 系统日志目录中（/data/system/dropbox），你可以通过如下命令进行插件："></a>penaltyDropBox()，将违规信息记录到 dropbox 系统日志目录中（/data/system/dropbox），你可以通过如下命令进行插件：</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys dropbox dataappstrictmode</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="permitCustomSlowCalls-、permitDiskReads-、permitDiskWrites-、permitNetwork：-如果你想关闭某一项检测，可以使用对应的permit-方法。"><a href="#permitCustomSlowCalls-、permitDiskReads-、permitDiskWrites-、permitNetwork：-如果你想关闭某一项检测，可以使用对应的permit-方法。" class="headerlink" title="permitCustomSlowCalls()、permitDiskReads ()、permitDiskWrites()、permitNetwork： 如果你想关闭某一项检测，可以使用对应的permit*方法。"></a>permitCustomSlowCalls()、permitDiskReads ()、permitDiskWrites()、permitNetwork： 如果你想关闭某一项检测，可以使用对应的permit*方法。</h4></li>
</ul>
<h2 id="VMPolicy-详解"><a href="#VMPolicy-详解" class="headerlink" title="VMPolicy 详解"></a>VMPolicy 详解</h2><p>StrictMode.VmPolicy.Builder 主要方法如下</p>
<ul>
<li><h4 id="detectActivityLeaks-用户检查-Activity-的内存泄露情况"><a href="#detectActivityLeaks-用户检查-Activity-的内存泄露情况" class="headerlink" title="detectActivityLeaks() 用户检查 Activity 的内存泄露情况"></a>detectActivityLeaks() 用户检查 Activity 的内存泄露情况</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">内存泄露检查案例：</div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                .detectActivityLeaks()</div><div class="line">                .penaltyLog()</div><div class="line">                .build()</div><div class="line">        );</div><div class="line"></div><div class="line">        new Thread() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line"></div><div class="line">                    SystemClock.sleep(1000);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们反复旋转屏幕就会输出提示信息（重点在 instances=2; limit=1 这一行）<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/e3c9e921a730c5e7a8bd546a405ee0cb" alt="这里写图片描述"><br>​       这时因为，我们在Activity中创建了一个Thread匿名内部类，而匿名内部类隐式持有外部类的引用。而每次旋转屏幕是，Android会新创建一个Activity，而原来的Activity实例又被我们启动的匿名内部类线程持有，所以不会释放，从日志上看，当先系统中该Activty有4个实例，而限制是只能创建1各实例。我们不断翻转屏幕，instances 的个数还会持续增加。</p>
<ul>
<li><h4 id="detectLeakedClosableObjects-用于资源没有正确关闭时提醒"><a href="#detectLeakedClosableObjects-用于资源没有正确关闭时提醒" class="headerlink" title="detectLeakedClosableObjects()用于资源没有正确关闭时提醒"></a>detectLeakedClosableObjects()用于资源没有正确关闭时提醒</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                .detectLeakedClosableObjects()</div><div class="line">                .penaltyLog()</div><div class="line">                .build()</div><div class="line">        );</div><div class="line"></div><div class="line">        File newxmlfile = new File(Environment.getExternalStorageDirectory(), &quot;castiel.txt&quot;);</div><div class="line">        try &#123;</div><div class="line">            newxmlfile.createNewFile();</div><div class="line">            FileWriter fw = new FileWriter(newxmlfile);</div><div class="line">            fw.write(&quot;猴子搬来的救兵WooYun&quot;);</div><div class="line">            </div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后触发警告如下<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/c65025d4aed04406cc2fb57458ee9d7f" alt="这里写图片描述"></p>
<ul>
<li><h4 id="detectLeakedSqlLiteObjects-和-detectLeakedClosableObjects-的用法类似，只不过是用来检查-SQLiteCursor-或者-其他-SQLite-对象是否被正确关闭"><a href="#detectLeakedSqlLiteObjects-和-detectLeakedClosableObjects-的用法类似，只不过是用来检查-SQLiteCursor-或者-其他-SQLite-对象是否被正确关闭" class="headerlink" title="detectLeakedSqlLiteObjects() 和 detectLeakedClosableObjects()的用法类似，只不过是用来检查 SQLiteCursor 或者 其他 SQLite 对象是否被正确关闭"></a>detectLeakedSqlLiteObjects() 和 detectLeakedClosableObjects()的用法类似，只不过是用来检查 SQLiteCursor 或者 其他 SQLite 对象是否被正确关闭</h4></li>
<li><h4 id="detectLeakedRegistrationObjects-用来检查-BroadcastReceiver-或者-ServiceConnection-注册类对象是否被正确释放"><a href="#detectLeakedRegistrationObjects-用来检查-BroadcastReceiver-或者-ServiceConnection-注册类对象是否被正确释放" class="headerlink" title="detectLeakedRegistrationObjects() 用来检查 BroadcastReceiver 或者 ServiceConnection 注册类对象是否被正确释放"></a>detectLeakedRegistrationObjects() 用来检查 BroadcastReceiver 或者 ServiceConnection 注册类对象是否被正确释放</h4></li>
<li><h4 id="setClassInstanceLimit-，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露"><a href="#setClassInstanceLimit-，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露" class="headerlink" title="setClassInstanceLimit()，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露"></a>setClassInstanceLimit()，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">检测内存泄露案例</div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private static class CastielClass&#123;&#125;</div><div class="line">    private static List classList;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        classList = new ArrayList();</div><div class="line"></div><div class="line">        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                .setClassInstanceLimit(CastielClass.class, 2)</div><div class="line">                .penaltyLog()</div><div class="line">                .build());</div><div class="line"></div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后触发警告如下</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/145a4310ac2183dcfbaba3ce4307cfa2" alt="这里写图片描述"></p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>​       除了通过日志查看之外，我们也可以在开发者选项中开启严格模式，开启之后，如果主线程中有执行时间长的操作，屏幕则会闪烁，这是一个更加直接的方法。<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/f2adecc3e7f0e358b2fcad32eb405b6b" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   StrictMode类是Android 2.3 （API 9）引入的一个工具类，可以用来帮助开发者发现代码中的一些不规范的问题，以达到提升应用响应能力的目的。举个例子来说，如果开发者在UI线程中进行了网络操作或者文件系统的操作，而这些缓慢的操作会严重影响应用的响应能力
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac os 10.8 一键安装PHP、Mysql、Nginx</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/24/Mac-os-10-8-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85PHP%E3%80%81Mysql%E3%80%81Nginx/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/24/Mac-os-10-8-一键安装PHP、Mysql、Nginx/</id>
    <published>2017-03-24T02:05:09.000Z</published>
    <updated>2017-03-24T02:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于HomeBrew安装，如果没有安装Brew，请先执行安装命令。</p>
<p>levi提供了一个更详细的方案，就不重复造车了。<br><a href="http://levi.cg.am/?p=3129" target="_blank" rel="external">http://levi.cg.am/?p=3129</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于HomeBrew安装，如果没有安装Brew，请先执行安装命令。&lt;/p&gt;
&lt;p&gt;levi提供了一个更详细的方案，就不重复造车了。&lt;br&gt;&lt;a href=&quot;http://levi.cg.am/?p=3129&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android团队项目开发之统一代码规范</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/21/Android%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/21/Android团队项目开发之统一代码规范/</id>
    <published>2017-03-21T01:12:06.000Z</published>
    <updated>2017-04-03T05:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原    址:<a href="https://m.aliyun.com/yunqi/articles/11875?spm=5176.100239.0.0.9l3OVA" target="_blank" rel="external">【项目篇】Android团队项目开发之统一代码规范</a></p>
<p>作    者:<a href="https://m.aliyun.com/yunqi/users/1895759156739057?spm=5176.100239.0.0.ZbMlP9" target="_blank" rel="external">hudan2714 ( 云溪社区 ) </a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>团队项目开发前的统一三要素：统一需求/开发文档，统一代码规范，统一环境（编译/测试/发布）。</p>
<p>一个项目团队，要想有高效的产出，必须在团队协作上下好功夫，必须在项目开发统一进度上做好协调。只有在高效的协同环境下，才能有优质的产出。这是我多年的经验之谈。也是配合过多个团队之后的深刻感悟。</p>
<p>每一个程序员都是有独立开发思维模式，都有自己的编码行为和操作习惯。所以，在一个团队中，怎么做到更高效的协同，不仅仅是每个开发者自身的协同配合能力，更重要的是项目管理者，怎样做到统一要求和统一实行。</p>
<p>举个很简单的例子。以前在一个小团队里，每次进行代码更新的时候，都是有一大堆更新。最后发现很多不是代码功能的个性，而只是大家的code style不一样。每次merge代码都要diff查看修改的地方，这样很影响效率。而且如果你只是做为一个普通的开发者，要求其它人和你用统一style，别人未必接受。这时的项目管理者，才是最需要去统一规范的。保持规范统一，才是高效协作产出的前提。</p>
<p>Android项目开发需要统一哪些规范呢？<br>在些列出一些常用规范，和容易出问题的地方，方便自己查找，也方便和更多的朋友交流！<br>一、编码方式统一：UTF-8。一般项目都用utf-8。有其它编码的，可自行要求修改。<br>在项目代码中右键，就能出现如下：<br><img src="http://img.blog.csdn.net/20160328150409162" alt="修改编码"></p>
<p>或者去个性配置文件：<br><img src="http://img.blog.csdn.net/20160328150459694" alt="修改编码"></p>
<p>二、代码样式code style：比如，tab缩进4个空格，或者 tab size等。<br>\1. 自定义的编码格式xml 文件。没有的话，可以下载<br>\2. 把xml文件复制到 C:/Users/YourUserName/.AndroidStudio/config/codestyles 目录下，如果没有codestyles目录可以自己新建一个。 (目前还不支持导入)<br>\3. 重启android studio<br>\4. android studio 中 Setting-&gt; Editor-&gt; Code Style-&gt; JAVA-&gt; Scheme 选择自定义的编码格式文件。<br>具体如下图：<br><img src="http://img.blog.csdn.net/20160328153328856" alt="样式"></p>
<p>保持代码格式的一致性，对项目的协同开发很有必要。优秀的代码习惯是，提交代码前格式化代码，让代码统一规则上传，保证代码的整洁。所以，在团队中必须支持规范代码。提交前所有修改的类都必须ctrl+f（规范代码），然后再提前。良好的编码习惯，能让代码变得更优雅漂亮。</p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>Java代码一般使用驼峰式规则，用名词或名词词组命名，每个单词的首字母大写。常用类的命名：</p>
<blockquote>
<ul>
<li>activity类，命名以Activity为后缀，如：LoginActivity</li>
<li>fragment类，命名以Fragment为后缀，如：ShareDialogFragment</li>
<li>service类，命名以Service为后缀，如：DownloadService</li>
<li>adapter类，命名以Adapter为后缀，如：CouponListAdapter</li>
<li>工具类，命名以Util为后缀，如：EncryptUtil</li>
<li>模型类，命名以BO为后缀，如：CouponBO</li>
<li>接口实现类，命名以Impl为后缀，如：ApiImpl</li>
</ul>
</blockquote>
<h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><blockquote>
<ul>
<li>初始化方法，命名以init开头，例：initView</li>
<li>按钮点击方法，命名以to开头，例：toLogin</li>
<li>设置方法，命名以set开头，例：setData</li>
<li>具有返回值的获取方法，命名以get开头，例：getData</li>
<li>通过异步加载数据的方法，命名以load开头，例：loadData</li>
<li>布尔型的判断方法，命名以is或has，或具有逻辑意义的单词如equals，例：isEmpty</li>
</ul>
</blockquote>
<h3 id="控件命名"><a href="#控件命名" class="headerlink" title="控件命名"></a>控件命名</h3><p>控件命名，一般都有各自习惯。但为了保证代码的整洁，尽量保持统一风格。<br><img src="http://img.blog.csdn.net/20160328155235197" alt="控件"></p>
<h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>全部为大写单词，单词之间用下划线分开。<br>public final static int PAGE_SIZE = 20;</p>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>{范围描述+}意义描述+类型描述的组合，用驼峰式，首字母小<br><code>private TextView headerTitleTxt; // 标题栏的标题 private Button loginBtn; // 登录按钮</code></p>
<h3 id="控件id命名"><a href="#控件id命名" class="headerlink" title="控件id命名"></a>控件id命名</h3><p>控件缩写<em>{范围</em>}意义，范围可选，只在有明确定义的范围内才需要加上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 这是标题栏的标题 --&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/txt_header_title&quot;</div><div class="line">    ... /&gt;</div><div class="line"></div><div class="line">&lt;!-- 这是登录按钮 --&gt;</div><div class="line">&lt;Button</div><div class="line">    android:id=&quot;@+id/btn_login&quot;</div><div class="line">    ... /&gt;</div></pre></td></tr></table></figure>
<h3 id="layout命名"><a href="#layout命名" class="headerlink" title="layout命名"></a>layout命名</h3><p>组件类型<em>{范围</em>}功能，范围可选，只在有明确定义的范围内才需要加上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">activity_&#123;范围_&#125;功能，为Activity的命名格式 </div><div class="line">fragment_&#123;范围_&#125;功能，为Fragment的命名格式</div><div class="line">dialog_&#123;范围_&#125;功能，为Dialog的命名格式 </div><div class="line">item_list_&#123;范围_&#125;功能，为ListView的item命名格式</div><div class="line">item_grid_&#123;范围_&#125;功能，为GridView的item命名格式</div><div class="line">header_list_&#123;范围_&#125;功能，为ListView的HeaderView命名格式</div><div class="line">footer_list_&#123;范围_&#125;功能，为ListView的FooterView命名格式</div></pre></td></tr></table></figure>
<h3 id="strings的命名"><a href="#strings的命名" class="headerlink" title="strings的命名"></a>strings的命名</h3><p>类型<em>{范围</em>}功能，范围可选。<br>以下为几种常用的命名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">页面标题，命名格式为：title_页面</div><div class="line">按钮文字，命名格式为：btn_按钮事件</div><div class="line">标签文字，命名格式为：label_标签文字</div><div class="line">选项卡文字，命名格式为：tab_选项卡文字</div><div class="line">消息框文字，命名格式为：toast_消息</div><div class="line">编辑框的提示文字，命名格式为：hint_提示信息</div><div class="line">图片的描述文字，命名格式为：desc_图片文字</div><div class="line">对话框的文字，命名格式为：dialog_文字</div><div class="line">menu的item文字，命名格式为：action_文字</div></pre></td></tr></table></figure>
<h3 id="colors的命名"><a href="#colors的命名" class="headerlink" title="colors的命名"></a>colors的命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">背景颜色，添加bg前缀</div><div class="line">文本颜色，添加text前缀</div><div class="line">分割线颜色，添加div前缀</div><div class="line">区分状态时，默认状态的颜色，添加normal后缀</div><div class="line">区分状态时，按下时的颜色，添加pressed后缀</div><div class="line">区分状态时，选中时的颜色，添加selected后缀</div><div class="line">区分状态时，不可用时的颜色，添加disable后缀</div></pre></td></tr></table></figure>
<h3 id="drawable的命名"><a href="#drawable的命名" class="headerlink" title="drawable的命名"></a>drawable的命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">图标类，添加ic前缀</div><div class="line">背景类，添加bg前缀</div><div class="line">分隔类，添加div前缀</div><div class="line">默认类，添加def前缀</div><div class="line">区分状态时，默认状态，添加normal后缀</div><div class="line">区分状态时，按下时的状态，添加pressed后缀</div><div class="line">区分状态时，选中时的状态，添加selected后缀</div><div class="line">区分状态时，不可用时的状态，添加disable后缀</div><div class="line">多种状态的，添加selector后缀（一般为ListView的selector或按钮的selector）</div></pre></td></tr></table></figure>
<h3 id="动画文件命名"><a href="#动画文件命名" class="headerlink" title="动画文件命名"></a>动画文件命名</h3><p>动画类型_动画方向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fade_in，淡入</div><div class="line">fade_out，淡出</div><div class="line">push_down_in，从下方推入</div><div class="line">push_down_out，从下方推出</div><div class="line">slide_in_from_top，从头部滑动进入</div><div class="line">zoom_enter，变形进入</div><div class="line">shrink_to_middle，中间缩小</div></pre></td></tr></table></figure>
<h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><ol>
<li>文件头注释</li>
</ol>
<p>文件顶部统一添加版权声明，声明的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Copyright (c) 2015. Keegan小钢 Inc. All rights reserved.</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li>类和接口注释<br>类和接口统一添加javadoc注释，格式如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 类或接口的描述信息</div><div class="line"> *</div><div class="line"> * @author $&#123;USER&#125;</div><div class="line"> * @date $&#123;DATE&#125;</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li>方法注释<br>下面几种方法，都必须添加javadoc注释，说明该方法的用途和参数说明，以及返回值的说明。<ul>
<li>接口中定义的所有方法</li>
<li>抽象类中自定义的抽象方法</li>
<li>抽象父类的自定义公用方法</li>
<li>工具类的公用方法</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 登录</div><div class="line"> *</div><div class="line"> * @param loginName 登录名</div><div class="line"> * @param password  密码</div><div class="line"> * @param listener  回调监听器</div><div class="line"> */</div><div class="line">public void login(String loginName, String password, ActionCallbackListener&lt;Void&gt; listener);</div></pre></td></tr></table></figure>
<ol>
<li>变量和常量注释</li>
</ol>
<p>下面几种情况下的常量和变量，都要添加注释说明，优先采用右侧//来注释，若注释说明太长则在上方添加注释。</p>
<ul>
<li>接口中定义的所有常量</li>
<li>公有类的公有常量</li>
<li>枚举类定义的所有枚举常量</li>
<li>实体类的所有属性变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static final int TYPE_CASH = 1; // 现金券</div><div class="line">public static final int TYPE_DEBIT = 2; // 抵扣券</div><div class="line">public static final int TYPE_DISCOUNT = 3; // 折扣券</div><div class="line"></div><div class="line">private int id;                // 券id</div><div class="line">private String name;           // 券名称</div><div class="line">private String introduce;      // 券简介</div></pre></td></tr></table></figure>
<p>注：部分信息来源于网络，若有使用不当，请联系！感谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原    址:&lt;a href=&quot;https://m.aliyun.com/yunqi/articles/11875?spm=5176.100239.0.0.9l3OVA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【项目篇】An
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android移动app架构设计浅谈</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/21/Android%E7%A7%BB%E5%8A%A8app%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%B5%85%E8%B0%88/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/21/Android移动app架构设计浅谈/</id>
    <published>2017-03-21T00:55:58.000Z</published>
    <updated>2017-03-21T01:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原    址:<a href="https://m.aliyun.com/yunqi/articles/11876?spm=5176.100239.0.0.9l3OVA" target="_blank" rel="external"> [ 架构篇 ] Android 移动 app 架构设计浅谈</a></p>
<p>作    者:<a href="https://m.aliyun.com/yunqi/users/1895759156739057?spm=5176.100239.0.0.ZbMlP9" target="_blank" rel="external">hudan2714 ( 云溪社区 ) </a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>架构，又名软件架构，是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p>
</blockquote>
<h3 id="软件架构设计目标"><a href="#软件架构设计目标" class="headerlink" title="软件架构设计目标"></a>软件架构设计目标</h3><ol>
<li>可靠性（Reliable）。软件架构的可靠是产品设计的前提。 </li>
<li>安全性（Secure）。软件架构的安全性是产品可持续发展的条件。 </li>
<li>可扩展性（Scalable）。软件架构必须能够不同的功能需求情况下，支持可扩散性。 </li>
<li>可定制化（Customizable）。同样的一套软件，可以根据客户群的不同和市场需求的变化进行调整。 </li>
<li>可伸缩 （Extensible）。在新技术出现的时候，一个软件架构应当允许导入新技术，从而对现有系统进行功能和性能的扩展。 </li>
<li>可维护性（Maintainable）。软件系统的维护包括两方面，一是排除现有的错误，二是将新的软件需求反映到现有系统中去。一个易于维护的系统可以有效地降低技术支持的花费。</li>
</ol>
<p>架构是项目形成到一定阶段的趋势。是对整个产品是否合格的有效保证。对于很多项目设计人员，<strong>在不考虑产品本身，不考虑团队，不考虑时间周期的前提下，一味的强调软件构架，是不合理的，也不利于整个产品的发展</strong>。当然，一个好的项目架构师，是很能清楚，项目在不同阶段，所需要处理的不同职责。能够最大限度的发挥能效，将产品周期，与功能模块做出最合适的匹配规划，这才是一个架构师所必须追求的。</p>
<p>以下是个人对Android移动项目架构设计简单的经验之谈。欢迎与更多的朋友交流，若有疑问，或不合理之处，都可以随时交流。</p>
<h3 id="从项目功能开始"><a href="#从项目功能开始" class="headerlink" title="从项目功能开始"></a><strong>从项目功能开始</strong></h3><p>每一个项目架构师，在拿到一个新项目的时候，都会不同的着重点。在项目规划风格上，都会有不同的考虑。而我个人在着手项目时，都会从功能上去着手。先了解项目整体的功能模块，区分出主体功能模块有哪些类，对不同的功能模块进行细致的划分。这是我开始的第一步。因为，只有对项目整体有个把握，才能更快的对项目有了解，才能知道怎样去合理安排项目的研发，才能更好的去安排项目进度流程，和人员的安排调度。</p>
<p>功能划分之后，接下来就是项目的实际研发阶段。这个阶段就是项目实际进展阶段了。必须要有合理的安排调度，才是保证项目的高效。比如：我们进行的大部分项目，都有网络交互的部分，也有本地功能部分，还有一些基础数据模块部分，这些功能必须要有合理的时间安排。</p>
<p>项目研发之前，几点提要说明： </p>
<ol>
<li>团队之间统一编码规范。 </li>
<li>需求文档统一管理。 </li>
<li>多人协同开发，根据文档开发（一切以文档为主）。</li>
</ol>
<p><strong>项目以功能划分，功能以模块划分</strong>。在项目初期，除了产品原型可能是提前设计成形外，其它的项目文档都还未出来，产品也是有个确定功能，但是细节文档还未成形，这个时候已经是项目开始阶段，即使在有一些文档还未成形前，也可以开始项目的基础开发了。</p>
<h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a><strong>功能模块</strong></h3><p><strong>网络模块，数据库存储模块，数据加密模块，数据缓存模块，数据解析器，日志信息收集模块等</strong>。这些都是项目的基本模块，也可以独立于功能的模块，可以提前开发，测试。便于后期直接使用。</p>
<h3 id="移动安全机制"><a href="#移动安全机制" class="headerlink" title="移动安全机制"></a><strong>移动安全机制</strong></h3><p>做过移动项目的都知道，移动安全是项目前期需要考虑的一个重要环节。所以，在项目之初，就应该对自身的数据存储做必要的数据加密，对网络传输的数据进行必要加密。<br>移动数据加密分为两种：<br>一种是本地数据加密，只是本机存储的信息，本地加密保存。<br>一种是网络传输数据加密，这是涉及到网络协议，与服务器之间的加密协议。</p>
<p>本地加密方式有很多种： </p>
<ol>
<li>MD5加密算法。 MD5是个不可逆的算法 没有解密的算法（目前据说也有方法破解）。 </li>
<li>DES加密。可逆。 </li>
<li>RSA加密。可逆 </li>
</ol>
<p>对于不是需要绝对足够安全的项目，以上三种加密足够用。</p>
<p>网络数据加密主要从两个方面考虑： </p>
<ol>
<li>保证API的调用者是经过自己授权的App； </li>
<li>保证数据传输的安全。</li>
</ol>
<p>保证API是自己授权的App，采用设计签名的方式。对每个移动平台，都会有不同的AppKey和AppSecret。在调用API时，将AppKey加入到请求参数中，然后，把AppSecret与其它参数，通过某种签名算法生成一个签名字符串，把数据传输给服务器端。而服务器根据AppKey和AppSecret，用相同的签名算法生成的签名与之一致，则说明请求安全。签名算法可以采用自己规定的一套签名算法（更安全），也可采用外部公开的签名算法（初期使用）。另外，在参数列表中再加入一个时间戳，还可以防止部分重放攻击。<br>对于数据传输安全，可以使用HTTPS。因为HTTPS添加了ssl安全协议。但是android项目开发，大部分都没有去实现。主要是没有对ssl证书进行安全性检查。</p>
<h3 id="API协议标准化"><a href="#API协议标准化" class="headerlink" title="API协议标准化"></a><strong>API协议标准化</strong></h3><p>项目开发，协议一定需要标准化，并且需要严格执行接口协议。完成每个版本的协议文档更新，方便后续使用者查看。<br>目前协议都是使用Json格式传输。需要注意的是，JSON数据和实体对象在传输时，序列化和反序列化因平台不同，会产生不同的区别。比如：JSON库将Date类型的数据序列化时会转为String，传输到服务器时，服务器反序列化经常会出现不同的结果。</p>
<h3 id="API接口版本控制"><a href="#API接口版本控制" class="headerlink" title="API接口版本控制"></a><strong>API接口版本控制</strong></h3><p>一般解决接口更新变化问题，我们采取的做法是，每个API接口，都会带有协议的版本，若是协议发生改变，则版本号相应改变，在处理数据请求时，则可以根据不同协议的版本进行处理，解决了版本的兼容性问题。</p>
<h3 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a><strong>架构分层</strong></h3><p>架构设计，主要的目的就解决功能和代码的复用，减少重复开发，方便功能扩展，降低功能和代码层级的耦合。<br>目前移动设计框架，主流的有三种：MVC、MVP、MVVM三种方式（具体详情，<a href="http://blog.csdn.net/hudan2714/article/details/50990359" target="_blank" rel="external">请参考框架小结</a>）。<br>任何的框架设计都是在满足开发需求为前提，千万不能为了设计而设计，不要问我这三种设计，哪种最合适开发？如果你还这样去问，那只能说你还不是一个成熟的产品设计者。三种框架都有各自的利弊，是应该在不同的阶段和不同人员的配备情况下，选择更合理的方式。我曾经参与一个创业团队开发视频项目，前期只有两个移动开发人员，项目时间紧的情况下。项目负责人就只会天天在那里修改需求，谈项目架构。初期的项目，在产品验证功能阶段，在项目需要快速迭代阶段，应该使用最有效的框架，才是合理的选择。而且项目的发展，一定是随着项目功能的确立，产品的定型和需求完善，对项目本身的稳定性和性能的要求，才是一个逐步提高的过程。想要一步达到完美的产品，不仅是在设计上很难做到，而且在目前所有的产品中，都是很难达到的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">任何框架都是在此三层数据模型上。View，Model，Controller/Presenter/ViewModel。上层View：用户行为操作，数据结果显示。底层Model：数据处理，提供显示数据。中间的就是业务逻辑层。</div></pre></td></tr></table></figure>
<p>Android项目设计，重在对项目的理解，重在对需求功能的划分，重在对团队合理分配。高效的产出，快速的迭代，才是移动项目的生存之道。</p>
<h3 id="Android测试"><a href="#Android测试" class="headerlink" title="Android测试"></a><strong>Android测试</strong></h3><p>移动开发，为保证质量产出，需要进行必须要逻辑测试。而在项目框架设计中，简单的mvc模式，若view和model中混有业务逻辑，则不利于接口测试。所以，在后续版本的迭代中，需要逐渐使用mvp或mvvm框架设计，让view和model与业务逻辑实现完整的解耦合。</p>
<h3 id="Android环境"><a href="#Android环境" class="headerlink" title="Android环境"></a><strong>Android环境</strong></h3><p>自从Android提供了更高效稳定的android studio之后，对于开发者来说是更便捷，更方便了。在android gradle多平台打包。proguard代码优化，混淆。随着android studio的越来越强大，越来越稳定，相信开发android项目也会变得越来越so easy了。</p>
<h3 id="总结在最后"><a href="#总结在最后" class="headerlink" title="总结在最后"></a><strong>总结在最后</strong></h3><p>一个合格的移动项目架构师，必须是在不断的项目开发中成长的。不仅仅懂得项目的高效快速部署，也懂得怎样合理优化团队，才能有更优质的产品产出。移动产品，是一个快速产出的产品，怎样做出适合团队产出的产品，才是移动架构师的学习之道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原    址:&lt;a href=&quot;https://m.aliyun.com/yunqi/articles/11876?spm=5176.100239.0.0.9l3OVA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; [ 架构篇 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> 实用的 atom 插件</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/19/%E5%AE%9E%E7%94%A8%E7%9A%84-atom-%E6%8F%92%E4%BB%B6/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/19/实用的-atom-插件/</id>
    <published>2017-03-19T05:33:53.000Z</published>
    <updated>2017-03-19T05:35:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>sublime text 确实是前端开发的神器，但入坑三四年一直使用，难免会有些视觉疲劳，最近折腾起了atom编辑器，发现这货也是前端开发的利器，没错，就是利器。</p>
</blockquote>
<p>俗话说，人靠衣装，佛靠金装，再好的编辑器也不会在软件本身集成各种插件，第三方支持等，于是就需要我们针对自己的日常开发选择一些常用的、实用的插件，最大程度的提高日常开发效率。</p>
<h3 id="Ⅰ：atom-是什么"><a href="#Ⅰ：atom-是什么" class="headerlink" title="Ⅰ：atom 是什么"></a>Ⅰ：atom 是什么</h3><p>Atom 是github在2015年开源的一款编辑器，相比较于sublime text，最吸引人的莫过于 Atom 是基于 Chromium Embedded Framework，基本上就是个 web app，源码都是 CoffeeScript 写的，连界面都可以用 CSS 来自定义。</p>
<p>Atom 的扩展也是用 JS 或者 Coffee 在 Node + webkit 的环境下开发，并且可以使用 npm 的包，这对于前端和 Node 开发者是很有诱惑力的，需要的话完全可以把 Atom 打造成一个 IDE。</p>
<p>官网：<a href="https://atom.io/" target="_blank" rel="external">atom官网</a>，可以在官网下载进行安装，安装过程很简单，这里就不进行赘述了。</p>
<h3 id="Ⅱ：好用的-atom-插件"><a href="#Ⅱ：好用的-atom-插件" class="headerlink" title="Ⅱ：好用的 atom 插件"></a>Ⅱ：好用的 atom 插件</h3><ul>
<li>点击菜单里面的 Preferences（抑或使用快捷键 <code>cmd + ,</code>），点击 install 选项，输入要安装的插件，点击安装即可。</li>
<li>通过 Preferences-install 来安装插件经常会遇到问题，好在atom做的很人性化，我们可以通过终端来进行插件安装，命令为 apm，是不是有点眼熟，这个基于atom 的一个包管理器，他过这个命令可以愉快的他过终端来安装你想要的插件啦，是不是很方便</li>
</ul>
<p>apm 安装的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 安装指定包</div><div class="line">$ apm install &lt;package_name&gt;</div><div class="line"># 安装指定版本的包</div><div class="line">$ apm install &lt;package_name&gt;@&lt;package_version&gt;</div><div class="line"># 查找包</div><div class="line">$ apm search &lt;package_name&gt;</div><div class="line"># 查看包更多详情</div><div class="line">$ apm view &lt;packge_name&gt;</div><div class="line"># 查看当前已安装包(包含atom里面自带的一些包和你自己安装的包)</div><div class="line">$ apm list</div></pre></td></tr></table></figure>
<p>apm list 里面我安装的如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/Users/liucui/.atom/packages</div><div class="line">├── activate-power-mode@0.5.2</div><div class="line">├── atom-beautify@0.29.7</div><div class="line">├── autocomplete-paths@1.0.2</div><div class="line">├── color-picker@2.1.1</div><div class="line">├── docblockr@0.7.3</div><div class="line">├── emmet@2.4.3</div><div class="line">├── file-icons@1.7.11</div><div class="line">├── git-plus@5.13.4</div><div class="line">├── javascript-snippets@1.2.1</div><div class="line">├── linter@1.11.4</div><div class="line">├── linter-jshint@2.1.0</div><div class="line">├── markdown-scroll-sync@2.1.2</div><div class="line">├── markdown-table-formatter@2.8.3</div><div class="line">├── minimap@4.23.5</div><div class="line">├── minimap-find-and-replace@4.5.1</div><div class="line">├── terminal-panel@1.14.1</div><div class="line">└── vim-mode@0.65.1</div></pre></td></tr></table></figure>
<p>那么到底有哪些好用的、必备的插件呢，下面就来给大家推荐几个所常用的。</p>
<h4 id="1、emmet"><a href="#1、emmet" class="headerlink" title="1、emmet"></a>1、emmet</h4><p>前端开发都懂得的，html 代码补全，使用方法还有文档可以查阅<a href="http://docs.emmet.io/" target="_blank" rel="external">emmet使用文档</a>。</p>
<p>下载链接：<a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a></p>
<h4 id="2、file-icons"><a href="#2、file-icons" class="headerlink" title="2、file-icons"></a>2、file-icons</h4><p>不同格式的文本现实不同颜色和类型的图标，便于分辨。</p>
<p><img src="http://images.iqianduan.net/file_icons_bg.png" alt="file_icons_bg"></p>
<p>下载链接：<a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a></p>
<p>另外：siti-ui 主题也可以以不同的颜色和类型图标展示不同类型文件，大家可以下载试试。</p>
<h4 id="3、color-picker"><a href="#3、color-picker" class="headerlink" title="3、color-picker"></a>3、color-picker</h4><p>顾名思义，颜色采集器，非常清晰好用。快捷键 cmd+shift+code 启动。</p>
<p><img src="http://images.iqianduan.net/color_picker_bg.png" alt="color-picker"></p>
<p>下载链接：<a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a></p>
<h4 id="4、atom-beautify"><a href="#4、atom-beautify" class="headerlink" title="4、atom-beautify"></a>4、atom-beautify</h4><p>美化格式插件，规范缩进，删除多余空行等等。快捷键 ctrl+option+b 启动使用。</p>
<p>下载链接：<a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a></p>
<h4 id="5、markdown-scroll-sync"><a href="#5、markdown-scroll-sync" class="headerlink" title="5、markdown-scroll-sync"></a>5、markdown-scroll-sync</h4><p>atom 自带markdown 预览功能，快捷键 ctrl+shift+m会打开两个面板的视图，但文档太长的时候，不会跟着同步滚动，这个插件就是做这个用的，滚动文档的时候预览内容同步滚动。</p>
<p><img src="http://images.iqianduan.net/markdown_scroll_sync_bg.gif" alt="markdown-scroll-sync"></p>
<p>下载链接：<a href="https://atom.io/packages/markdown_scroll_sync" target="_blank" rel="external">markdown-scroll-sync</a></p>
<h4 id="6、minimap"><a href="#6、minimap" class="headerlink" title="6、minimap"></a>6、minimap</h4><p>编辑器右侧小面板，快捷展示当前编辑的内容在整个文档中的位置。</p>
<p><img src="http://images.iqianduan.net/minimap.png" alt="minimap"></p>
<p>下载链接：<a href="https://github.com/atom-minimap/minimap" target="_blank" rel="external">minimap</a></p>
<h4 id="7、docblocker"><a href="#7、docblocker" class="headerlink" title="7、docblocker"></a>7、docblocker</h4><p>便捷的添加注释代码，/** 按tab键即添加注释代码快。</p>
<p><img src="http://images.iqianduan.net/docblocker_bg.gif" alt="docblocker"></p>
<p>下载链接：<a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblocker</a></p>
<h4 id="8、terminal-panel"><a href="#8、terminal-panel" class="headerlink" title="8、terminal-panel"></a>8、terminal-panel</h4><p>快速调取使用终端面板，快捷键 『ctrl+`』 启动，底部工具条的 + 也可以点击展示终端面板。</p>
<p><img src="http://images.iqianduan.net/terminal_panel_bg.gif" alt="terminal-panel"></p>
<p>下载链接：<a href="https://atom.io/packages/terminal-panel" target="_blank" rel="external">terminal-panel</a></p>
<h4 id="9、javascript-snippets"><a href="#9、javascript-snippets" class="headerlink" title="9、javascript-snippets"></a>9、javascript-snippets</h4><p>js/nodejs 方法快捷输入，不过有些方法的简写需要去文档里面熟悉一下，多用几次你会发现真的可以提高效率。</p>
<p><img src="http://images.iqianduan.net/javascript_snippets_bg.gif" alt="javascript-snippets"></p>
<p>下载链接：<a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">javascript-snippets</a></p>
<h4 id="10、autocomplete-paths"><a href="#10、autocomplete-paths" class="headerlink" title="10、autocomplete-paths"></a>10、autocomplete-paths</h4><p>代码提示补全插件，</p>
<p><img src="http://images.iqianduan.net/autocomplete_paths.gif" alt="autocomplete-paths"></p>
<p>下载地址：<a href="https://atom.io/packages/autocomplete-paths" target="_blank" rel="external">autocomplete-paths</a></p>
<h4 id="11、linter"><a href="#11、linter" class="headerlink" title="11、linter"></a>11、linter</h4><p>代码风格检查工具</p>
<p><img src="http://images.iqianduan.net/code_linter_bg.gif" alt="linter"></p>
<blockquote>
<p>单单装了linter 还不行，我们要针对自己使用的语言不同去安装不同的语言支持，例如，我装了js的检查工具：linter-jshint，大家可以根据需要自行安装，<a href="http://atomlinter.github.io/" target="_blank" rel="external">语言风格审查列表</a></p>
</blockquote>
<p>下载链接：<a href="https://atom.io/packages/linter" target="_blank" rel="external">linter</a></p>
<h4 id="12、vim-mode"><a href="#12、vim-mode" class="headerlink" title="12、vim-mode"></a>12、vim-mode</h4><p>atom 的vim 模式，安装后按ESC键即启用vim 模式，在另一篇文章 <a href="http://iqianduan.net/blog/the-editor-vim-mode" target="_blank" rel="external">编辑器的vim模式使用</a> 中，有详细的介绍，让你的 Atom 用起来超乎你的想象。</p>
<h4 id="13、activate-power-mode"><a href="#13、activate-power-mode" class="headerlink" title="13、activate-power-mode"></a>13、activate-power-mode</h4><p>这个插件纯粹是用来炫技的，只适合拿来玩玩，长时间使用，我相信你的视力一定会下降的，不要怪我没提醒你哦。</p>
<p><img src="http://images.iqianduan.net/activate_power_mode_bg.gif" alt="activate-power-mode"></p>
<p>下载链接：<a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">activate-power-mode</a></p>
<h3 id="Ⅲ：另附–常用快捷键"><a href="#Ⅲ：另附–常用快捷键" class="headerlink" title="Ⅲ：另附–常用快捷键"></a>Ⅲ：另附–常用快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>shift + cmd + p</td>
<td>命令版(可以看到所有快捷键)</td>
</tr>
<tr>
<td>alt + shift + s</td>
<td>查看文件相关语言的代码块(snippet)</td>
</tr>
<tr>
<td>cmd + f</td>
<td>搜索当前文件</td>
</tr>
<tr>
<td>cmd+shift+f</td>
<td>搜索整个项目</td>
</tr>
<tr>
<td>alt + cmd + [</td>
<td>代码折叠, 我不喜欢用</td>
</tr>
<tr>
<td>alt + cmd + ]</td>
<td>代码展开</td>
</tr>
<tr>
<td>cmd + /</td>
<td>快速注释当前行</td>
</tr>
<tr>
<td>cmd + [</td>
<td>代码左缩进</td>
</tr>
<tr>
<td>cmd + ]</td>
<td>代码右缩进</td>
</tr>
<tr>
<td>cmd + b</td>
<td>快速跳转打开的文件</td>
</tr>
<tr>
<td>alt+B或alt+left</td>
<td>光标按单词左移</td>
</tr>
<tr>
<td>alt+F或alt+right</td>
<td>光标按单词右移</td>
</tr>
<tr>
<td>cmd+right或ctrl+e</td>
<td>光标移动到行最右最后一个非空字符</td>
</tr>
<tr>
<td>cmd+left或ctrl+a</td>
<td>光标移动到行最左第一个非空字符</td>
</tr>
<tr>
<td>cmd + up</td>
<td>光标移动到文件头</td>
</tr>
<tr>
<td>cmd + down</td>
<td>贯标移动到文件尾</td>
</tr>
<tr>
<td>ctrl + g</td>
<td>行跳转, 语法为行号:列号</td>
</tr>
<tr>
<td>cmd + r</td>
<td>按当前文件方法跳转</td>
</tr>
<tr>
<td>cmd + t</td>
<td>全项目模糊查找关键字并跳转</td>
</tr>
<tr>
<td>ctrl + m</td>
<td>按照括号匹配跳转</td>
</tr>
<tr>
<td>cmd + F2或cmd+fn+f2</td>
<td>给某一行设置书签显示在行号右侧</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;sublime text 确实是前端开发的神器，但入坑三四年一直使用，难免会有些视觉疲劳，最近折腾起了atom编辑器，发现这货也是前端开发的利器，没错，就是利器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;俗话说，人靠衣装，佛靠金装，再好的编辑器也
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Using Pug Templates With Express</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/19/Using-Pug-Templates-With-Express/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/19/Using-Pug-Templates-With-Express/</id>
    <published>2017-03-19T03:47:40.000Z</published>
    <updated>2017-03-19T03:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>In my <a href="http://funkyjavascript.com/web-dev-with-express/" target="_blank" rel="external">first post about express</a>, I showed you a simple hello world example. All the app did was show the text “Wazzup?”</p>
<p>If we want to make web applications, we need to generate some HTML, and if we want to be able to programmatically customize that HTML while it’s still on the server we need a templating language like <a href="https://github.com/pugjs" target="_blank" rel="external">Pug</a>.</p>
<p><a href="https://github.com/pugjs/pug/issues/2184" target="_blank" rel="external">Pug used to be called Jade</a>. In fact, there doesn’t seem to be a documentation site with the new name yet. Looks like <a href="http://jade-lang.com/" target="_blank" rel="external">jade-lang.com</a> is still the spot to go for docs.</p>
<p>Whatever its name is, pug or jade, its a simple templating language you can use to generate HTML. If you’d like to follow along with this example I’m about to throw down, just create a new Node project and install <code>express</code> and <code>pug</code>.</p>
<p>Next, let’s create a super-simple template:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html  </div><div class="line">  head</div><div class="line">    title= title</div><div class="line">  body</div><div class="line">    h1= message</div></pre></td></tr></table></figure>
<p>Create a <code>views</code> directory and save the above file as <code>views/index.pug</code>.</p>
<p>Now let’s make our <code>index.js</code> file:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;)  </div><div class="line">var app = express()  </div><div class="line">app.set(&apos;view engine&apos;, &apos;pug&apos;)</div><div class="line"></div><div class="line">app.get(&apos;/&apos;, function (req, res) &#123;  </div><div class="line">    res.render(</div><div class="line">        &apos;index&apos;,</div><div class="line">        &#123; title: &apos;Hey Hey Hey!&apos;, message: &apos;Yo Yo&apos;&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(3000, function () &#123;  </div><div class="line">    console.log(&apos;Example app listening on port 3000!&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>The HTML that gets rendered to <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> should look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;  </div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;Hey Hey Hey!&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Yo Yo&lt;/h1&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>Pretty slick right? Instead of having to write brackets as well as opening and closing tags, you can just write the tag name, and that’s it! Any dynamic parts you need can just be handed to the rendering engine as an object.</p>
<p>Pug is a language all it’s own. There’s lots to take advantage of here. I’ll go into the details in a later post, maybe a few posts. :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In my &lt;a href=&quot;http://funkyjavascript.com/web-dev-with-express/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;first post about express&lt;/a&gt;, I showed yo
    
    </summary>
    
      <category term="nodejs" scheme="http://wanghaonanlpc.github.io/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title>Express application generator</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/19/Express-application-generator/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/19/Express-application-generator/</id>
    <published>2017-03-19T03:20:18.000Z</published>
    <updated>2017-03-19T03:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>花了一天的时间学习了下nodejs 及 nodejs 框架express基础知识</p>
<p>分享下 express-generator </p>
</blockquote>
<h4 id="指令"><a href="#指令" class="headerlink" title="指令:"></a>指令:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//用应用程序生成器工具</div><div class="line">$ npm install express-generator -g</div><div class="line"></div><div class="line">//添加依赖:</div><div class="line">$ cd myapp</div><div class="line">$ npm install</div><div class="line"></div><div class="line">//运行程序</div><div class="line">$ DEBUG=myapp:* npm start</div></pre></td></tr></table></figure>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志:"></a>日志:</h4><blockquote>
<p>本机执行指令的结果</p>
</blockquote>
<p>Last login: Sun Mar 19 10:23:16 on ttys000<br>AlexdeMacBook-Air:~ apple$ cd /Users/apple/Documents/nodejs学习/02_expressjs_INTA/02_express_generator<br>AlexdeMacBook-Air:02_express_generator apple$ npm install express-generator -g<br>/usr/local/bin/express -&gt; /usr/local/lib/node_modules/express-generator/bin/express<br>/usr/local/lib<br>└── express-generator@4.14.1 </p>
<p>AlexdeMacBook-Air:02_express_generator apple$ express -h</p>
<p>  Usage: express [options] [dir]</p>
<p>  Options:</p>
<pre><code>-h, --help           output usage information
    --version        output the version number
-e, --ejs            add ejs engine support
    --pug            add pug engine support
    --hbs            add handlebars engine support
-H, --hogan          add hogan.js engine support
-v, --view &lt;engine&gt;  add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)
-c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)
    --git            add .gitignore
-f, --force          force on non-empty directory
</code></pre><p>AlexdeMacBook-Air:02_express_generator apple$ express –view=pug yigelaobai</p>
<p>   create : yigelaobai<br>   create : yigelaobai/package.json<br>   create : yigelaobai/app.js<br>   create : yigelaobai/public<br>   create : yigelaobai/public/javascripts<br>   create : yigelaobai/public/images<br>   create : yigelaobai/public/stylesheets<br>   create : yigelaobai/public/stylesheets/style.css<br>   create : yigelaobai/routes<br>   create : yigelaobai/routes/index.js<br>   create : yigelaobai/routes/users.js<br>   create : yigelaobai/views<br>   create : yigelaobai/views/index.pug<br>   create : yigelaobai/views/layout.pug<br>   create : yigelaobai/views/error.pug<br>   create : yigelaobai/bin<br>   create : yigelaobai/bin/www</p>
<p>   install dependencies:<br>     $ cd yigelaobai &amp;&amp; npm install</p>
<p>   run the app:<br>     $ DEBUG=yigelaobai:* npm start</p>
<p>AlexdeMacBook-Air:02_express_generator apple$ cd yigelaobai<br>AlexdeMacBook-Air:yigelaobai apple$ npm install<br>yigelaobai@0.0.0 /Users/apple/Documents/nodejs学习/02_expressjs_INTA/02_express_generator/yigelaobai<br>├─┬ body-parser@1.16.1<br>│ ├── bytes@2.4.0<br>│ ├── content-type@1.0.2<br>│ ├── debug@2.6.1<br>│ ├── depd@1.1.0<br>│ ├─┬ http-errors@1.5.1<br>│ │ ├── inherits@2.0.3<br>│ │ ├── setprototypeof@1.0.2<br>│ │ └── statuses@1.3.1<br>│ ├── iconv-lite@0.4.15<br>│ ├─┬ on-finished@2.3.0<br>│ │ └── ee-first@1.1.1<br>│ ├── qs@6.2.1<br>│ ├─┬ raw-body@2.2.0<br>│ │ └── unpipe@1.0.0<br>│ └─┬ type-is@1.6.14<br>│   ├── media-typer@0.3.0<br>│   └─┬ mime-types@2.1.14<br>│     └── mime-db@1.26.0<br>├─┬ cookie-parser@1.4.3<br>│ ├── cookie@0.3.1<br>│ └── cookie-signature@1.0.6<br>├─┬ debug@2.6.3<br>│ └── ms@0.7.2<br>├─┬ express@4.14.1<br>│ ├─┬ accepts@1.3.3<br>│ │ └── negotiator@0.6.1<br>│ ├── array-flatten@1.1.1<br>│ ├── content-disposition@0.5.2<br>│ ├─┬ debug@2.2.0<br>│ │ └── ms@0.7.1<br>│ ├── encodeurl@1.0.1<br>│ ├── escape-html@1.0.3<br>│ ├── etag@1.7.0<br>│ ├─┬ finalhandler@0.5.1<br>│ │ └─┬ debug@2.2.0<br>│ │   └── ms@0.7.1<br>│ ├── fresh@0.3.0<br>│ ├── merge-descriptors@1.0.1<br>│ ├── methods@1.1.2<br>│ ├── parseurl@1.3.1<br>│ ├── path-to-regexp@0.1.7<br>│ ├─┬ proxy-addr@1.1.3<br>│ │ ├── forwarded@0.1.0<br>│ │ └── ipaddr.js@1.2.0<br>│ ├── qs@6.2.0<br>│ ├── range-parser@1.2.0<br>│ ├─┬ send@0.14.2<br>│ │ ├─┬ debug@2.2.0<br>│ │ │ └── ms@0.7.1<br>│ │ ├── destroy@1.0.4<br>│ │ └── mime@1.3.4<br>│ ├── serve-static@1.11.2<br>│ ├── utils-merge@1.0.0<br>│ └── vary@1.1.0<br>├─┬ morgan@1.7.0<br>│ ├── basic-auth@1.0.4<br>│ ├─┬ debug@2.2.0<br>│ │ └── ms@0.7.1<br>│ └── on-headers@1.0.1<br>├─┬ pug@2.0.0-beta11<br>│ ├─┬ pug-code-gen@1.1.1<br>│ │ ├─┬ constantinople@3.1.0<br>│ │ │ ├── acorn@3.3.0<br>│ │ │ └── is-expression@2.1.0<br>│ │ ├── doctypes@1.1.0<br>│ │ ├── js-stringify@1.0.2<br>│ │ ├── pug-attrs@2.0.2<br>│ │ ├── pug-error@1.3.2<br>│ │ ├── void-elements@2.0.1<br>│ │ └─┬ with@5.1.1<br>│ │   └─┬ acorn-globals@3.1.0<br>│ │     └── acorn@4.0.11<br>│ ├─┬ pug-filters@2.1.1<br>│ │ ├─┬ clean-css@3.4.25<br>│ │ │ ├─┬ commander@2.8.1<br>│ │ │ │ └── graceful-readlink@1.0.1<br>│ │ │ └─┬ source-map@0.4.4<br>│ │ │   └── amdefine@1.0.1<br>│ │ ├─┬ jstransformer@1.0.0<br>│ │ │ ├── is-promise@2.1.0<br>│ │ │ └─┬ promise@7.1.1<br>│ │ │   └── asap@2.0.5<br>│ │ ├── pug-walk@1.1.1<br>│ │ ├─┬ resolve@1.3.2<br>│ │ │ └── path-parse@1.0.5<br>│ │ └─┬ uglify-js@2.8.13<br>│ │   ├── source-map@0.5.6<br>│ │   ├── uglify-to-browserify@1.0.2<br>│ │   └─┬ yargs@3.10.0<br>│ │     ├── camelcase@1.2.1<br>│ │     ├─┬ cliui@2.1.0<br>│ │     │ ├─┬ center-align@0.1.3<br>│ │     │ │ ├─┬ align-text@0.1.4<br>│ │     │ │ │ ├─┬ kind-of@3.1.0<br>│ │     │ │ │ │ └── is-buffer@1.1.5<br>│ │     │ │ │ ├── longest@1.0.1<br>│ │     │ │ │ └── repeat-string@1.6.1<br>│ │     │ │ └── lazy-cache@1.0.4<br>│ │     │ ├── right-align@0.1.3<br>│ │     │ └── wordwrap@0.0.2<br>│ │     ├── decamelize@1.2.0<br>│ │     └── window-size@0.1.0<br>│ ├─┬ pug-lexer@3.0.0<br>│ │ ├─┬ character-parser@2.2.0<br>│ │ │ └─┬ is-regex@1.0.4<br>│ │ │   └─┬ has@1.0.1<br>│ │ │     └── function-bind@1.1.0<br>│ │ └─┬ is-expression@3.0.0<br>│ │   └── acorn@4.0.11<br>│ ├── pug-linker@2.0.2<br>│ ├─┬ pug-load@2.0.5<br>│ │ └── object-assign@4.1.1<br>│ ├─┬ pug-parser@2.0.2<br>│ │ └── token-stream@0.0.1<br>│ ├── pug-runtime@2.0.3<br>│ └── pug-strip-comments@1.0.2<br>└── serve-favicon@2.3.2 </p>
<p>AlexdeMacBook-Air:yigelaobai apple$ DEBUG=yigelaobai:* npm start</p>
<blockquote>
<p>yigelaobai@0.0.0 start /Users/apple/Documents/nodejs学习/02_expressjs_INTA/02_express_generator/yigelaobai<br>node ./bin/www</p>
</blockquote>
<p>  yigelaobai:server Listening on port 3000 +0ms<br>GET / 200 564.023 ms - 170<br>GET /stylesheets/style.css 200 6.483 ms - 111<br>GET /favicon.ico 404 35.647 ms - 1665</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;花了一天的时间学习了下nodejs 及 nodejs 框架express基础知识&lt;/p&gt;
&lt;p&gt;分享下 express-generator &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;指令&quot;&gt;&lt;a href=&quot;#指令&quot; class=&quot;he
    
    </summary>
    
      <category term="nodejs" scheme="http://wanghaonanlpc.github.io/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title> nodejs 学习</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/18/nodejs-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/18/nodejs-学习/</id>
    <published>2017-03-18T09:01:33.000Z</published>
    <updated>2017-03-18T09:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.intalesson.com/" target="_blank" rel="external">推荐:http://www.intalesson.com/</a></p>
</blockquote>
<p><a href="https://pan.baidu.com/s/1kVv61NL" target="_blank" rel="external">手巧代码</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.intalesson.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐:http://www.intalesson.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node 升级 node.js</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/17/node-%E5%8D%87%E7%BA%A7-node-js/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/17/node-升级-node-js/</id>
    <published>2017-03-17T03:32:03.000Z</published>
    <updated>2017-03-17T03:34:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-升级-node-js"><a href="#node-升级-node-js" class="headerlink" title="node 升级 node.js"></a>node 升级 node.js</h3><p>第一步，先查看本机node.js版本：</p>
<pre><code>$ node -v
</code></pre><p>第二步，清除node.js的cache：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm cache clean -f</div></pre></td></tr></table></figure>
<p>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”<br>    $ sudo npm install -g n</p>
<p>第四步，安装最新版本的node.js<br>    $ sudo n stable</p>
<p>第五步，再次查看本机的node.js版本：<br>    $ node -v</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;node-升级-node-js&quot;&gt;&lt;a href=&quot;#node-升级-node-js&quot; class=&quot;headerlink&quot; title=&quot;node 升级 node.js&quot;&gt;&lt;/a&gt;node 升级 node.js&lt;/h3&gt;&lt;p&gt;第一步，先查看本机node.js版本
    
    </summary>
    
      <category term="node.js" scheme="http://wanghaonanlpc.github.io/categories/node-js/"/>
    
    
  </entry>
  
  <entry>
    <title> 阿里巴巴 fastjson 爆出远程代码执行高危漏洞</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/17/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-fastjson-%E7%88%86%E5%87%BA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/17/阿里巴巴-fastjson-爆出远程代码执行高危漏洞/</id>
    <published>2017-03-17T01:59:28.000Z</published>
    <updated>2017-03-17T02:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>官方解决方案: <a href="https://github.com/alibaba/fastjson/wiki/security_update_20170315" target="_blank" rel="external">GitHub-fastjson-security_update_20170315</a></p>
</blockquote>
<h1 id="安全升级公告"><a href="#安全升级公告" class="headerlink" title="安全升级公告"></a>安全升级公告</h1><p>最近发现fastjson在1.2.24以及之前版本存在远程代码执行高危安全漏洞，为了保证系统安全，请升级到1.2.28/1.2.29或者更新版本。</p>
<p>1.2.29是在1.2.28版本上修复了一些大家升级过程中遇到的问题的版本，非安全问题，如果升级到1.2.24~1.2.28以及各种sec01版本的，也是没有安全问题的。</p>
<p>1.2.25/1.2.26/1.2.27都是在升级的过程中修复不兼容问题发布的过度版本，如果你是在此之前升级到这些版本，不用因为这次的安全问题再次升级。</p>
<h2 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h2><h3 id="1-Maven依赖配置更新"><a href="#1-Maven依赖配置更新" class="headerlink" title="1. Maven依赖配置更新"></a>1. Maven依赖配置更新</h3><p>通过maven配置更新，使用最新版本，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2.29&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>注意，版本号1.2.3~1.2.9版本都比1.2.29小，都是需要升级的。</p>
<h3 id="2-直接下载"><a href="#2-直接下载" class="headerlink" title="2. 直接下载"></a>2. 直接下载</h3><p>1.2.28版本下载地址 <a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.29/" target="_blank" rel="external">http://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.29/</a></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-升级遇到不兼容问题怎么办？"><a href="#1-升级遇到不兼容问题怎么办？" class="headerlink" title="1. 升级遇到不兼容问题怎么办？"></a>1. 升级遇到不兼容问题怎么办？</h3><p>1.2.28/1.2.29已经修复了绝大多数兼容问题，但是总会有一些特殊的用法导致不兼容，如果你遇到不兼容问题，通过 <a href="https://github.com/alibaba/fastjson/wiki/incompatible_change_list" target="_blank" rel="external">https://github.com/alibaba/fastjson/wiki/incompatible_change_list</a> 查看不兼容问题，链接的后面提供了遇到不兼容问题之后的使用相应的sec01版本解决办法。</p>
<h3 id="2-升级之后报错autotype-is-not-support"><a href="#2-升级之后报错autotype-is-not-support" class="headerlink" title="2. 升级之后报错autotype is not support"></a>2. 升级之后报错autotype is not support</h3><p>安全升级包禁用了部分autotype的功能，也就是”@type”这种指定类型的功能会被限制在一定范围内使用。如果你使用场景中包括了这个功能，<a href="https://github.com/alibaba/fastjson/wiki/enable_autotype" target="_blank" rel="external">https://github.com/alibaba/fastjson/wiki/enable_autotype</a> 这里有一个介绍如何添加白名单或者打开autotype功能。</p>
<h3 id="3-通过配置打开autotype之后是否存在安全漏洞"><a href="#3-通过配置打开autotype之后是否存在安全漏洞" class="headerlink" title="3. 通过配置打开autotype之后是否存在安全漏洞"></a>3. 通过配置打开autotype之后是否存在安全漏洞</h3><p>在1.2.28/1.2.29以及所有的.sec01版本中，有多重保护，但打开autotype之后仍会存在风险，不建议打开，而是使用一个较小范围的白名单。</p>
<h3 id="4-Android环境使用是否需要升级"><a href="#4-Android环境使用是否需要升级" class="headerlink" title="4. Android环境使用是否需要升级"></a>4. Android环境使用是否需要升级</h3><p>目前未发现漏洞对Android系统产生影响，在Android环境中使用不用升级。</p>
<h3 id="5-升级遇到问题希望提供支持怎么办？"><a href="#5-升级遇到问题希望提供支持怎么办？" class="headerlink" title="5. 升级遇到问题希望提供支持怎么办？"></a>5. 升级遇到问题希望提供支持怎么办？</h3><p>作者愿意帮助大家一起解决问题，如果遇到文档中没说明到的问题，请通过如下方式联系作者：</p>
<ul>
<li>钉钉号 wenshaojin2017</li>
<li>微信号 wenshaojin</li>
<li>微博 <a href="http://weibo.com/wengaotie" target="_blank" rel="external">http://weibo.com/wengaotie</a></li>
</ul>
<h3 id="6-有没有漏洞利用详情可以提供"><a href="#6-有没有漏洞利用详情可以提供" class="headerlink" title="6. 有没有漏洞利用详情可以提供"></a>6. 有没有漏洞利用详情可以提供</h3><p>为了保证更多用户的安全，目前不适合扩散漏洞利用的细节</p>
<h3 id="7-是否有在WAF上检测的办法"><a href="#7-是否有在WAF上检测的办法" class="headerlink" title="7. 是否有在WAF上检测的办法"></a>7. 是否有在WAF上检测的办法</h3><p>检测post内容中是否包含如下字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;@type&quot;</div></pre></td></tr></table></figure>
<p>注意，为了减少误报，包括双引号</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官方解决方案: &lt;a href=&quot;https://github.com/alibaba/fastjson/wiki/security_update_20170315&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub-fa
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to Write For Your Business While Still Sounding Like a Human</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/11/How-to-Write-For-Your-Business-While-Still-Sounding-Like-a-Human/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/11/How-to-Write-For-Your-Business-While-Still-Sounding-Like-a-Human/</id>
    <published>2017-03-11T02:36:36.000Z</published>
    <updated>2017-03-11T02:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原    文：<a href="http://blog.meetedgar.com/how-to-write-for-your-business-while-still-sounding-like-a-human/" target="_blank" rel="external">How to Write For Your Business While Still Sounding Like a Human</a></p>
<p>作    者：<a href="https://meetedgar.com" target="_blank" rel="external">MeetEdgar</a></p>
</blockquote>
<p>(It’s also okay if emoji aren’t really appropriate for you and your business, too. They’re not for everyone!)</p>
<p><strong>Your Website:</strong></p>
<p>Products and services may change, but <a href="http://blog.meetedgar.com/branding-101-dont-waste-time-trying-to-be-better-than-your-competition/" target="_blank" rel="external">your company’s overall brand voice</a> should be strong and consistent, and speak directly to your customer or client. That audience’s background and vernacular might be different from the average bear’s, so feel free to show off your expertise a little and lean into the language of your brand on your website!</p>
<p><strong>Your Blog:</strong></p>
<p>If you’re a solopreneur, your blog can be more conversational and more personal than the rest of your website copy. Think of your blog as a place for people to get to know you a little better as you give them news or advice.</p>
<p>(Want to learn more about blogging? You can <a href="https://meetedgar.com/secret-blogging-formula/" target="_blank" rel="external">download MeetEdgar’s Secret Blogging Formula for free!</a>)</p>
<p>Even if you prefer to publish informative articles on your blog, you can still be conversational! Think short, impactful sentences and paragraphs – and find a way to engage readers by asking for their thoughts on implementing your tips.</p>
<p><strong>Industry-specific Stuff:</strong></p>
<p>White papers, B2B publications, and technical sites geared toward a specific industry are spaces to flex your jargon muscles. If your readers are accustomed to technical terms for what you do, you’ll want to show your expertise – so don’t be afraid to use high-level language!</p>
<h3 id="2-Speak-to-real-world-results"><a href="#2-Speak-to-real-world-results" class="headerlink" title="2: Speak to real world results"></a><strong>2: Speak to real world results</strong></h3><p>Everybody has seen what happens when business jargon and adjectives pile up into an unintelligible wall of gobbledygook.</p>
<p>Stuff like this:</p>
<p><em>Buy my product! It offers an amazing, brilliant, luxurious transformation into the totally butt-kicking glamour queen rock star you were always meant to be.</em></p>
<p>Hmmmm. What could this <em>mean</em>?</p>
<p>Do you get a makeover?</p>
<p>Do you learn a martial art so you can actually kick actual butts?</p>
<p>And what’s a glamour queen rock star, anyway? (An ‘80s hair band?)</p>
<p><strong>Don’t leave your adjectives out there by themselves.</strong></p>
<p>Instead, support adjectives by giving them meaning!</p>
<p>Say you want to use the word <em>amazing</em>. Ask yourself these questions.</p>
<p>WHO makes it amazing?</p>
<p>HOW do you get amazing results?</p>
<p>WHAT does amazing feel like?</p>
<p>Let’s see what copy looks like if adjectives are supported with the answers to the above questions.</p>
<p><strong>*Business 101 for Girls Trapped in Fairy Tales*</strong></p>
<p><em>This amazing six week program is run by Starlight, a former princess turned entrepreneur who believes girls can get out of their castle, slay their own dragons, and build an empire with a solid business model that doesn’t rely on pillaging the neighboring kingdom.</em></p>
<p><em>Did you spend your childhood trapped in fancy dresses when your secret idea of glamour was to gallop freely through the forest on horseback? Build your confidence and see yourself quickly transform into the kind of queen that takes charge of your destiny with ease.</em></p>
<p>This school may not exist, but you sure get a picture of what it’s about! And if you’re the ideal client, it probably does sound kind of amazing.</p>
<p>(Like, <em>really</em> amazing. Can we actually go there, please?)</p>
<h3 id="3-Give-brand-stories-context"><a href="#3-Give-brand-stories-context" class="headerlink" title="3: Give brand stories context"></a><strong>3: Give brand stories context</strong></h3><p>Adjectives require <em>support and substance</em> to give them meaning. Brand stories and personal stories require <em>context</em>.</p>
<p>The structure of your brand determines just how much or how little your audience will want to know about you personally.</p>
<p>If you’re a solopreneur, your audience should definitely know your story. Especially for a service-based business, people want to work with someone they know, like, and trust!</p>
<p><img src="http://blog.meetedgar.com/wp-content/uploads/2017/02/Wizard-of-Oz.gif?w=1000" alt="Wizard of Oz"></p>
<p><strong>That doesn’t mean that you need to tell them your whole life story. Context is key.</strong></p>
<p><strong>Business coach?</strong> If your story is about how someone without an MBA can create a successful brand, it’s okay to admit mistakes and vulnerability!  Just share mistakes in the context of what you’ve learned from them. This makes you human and relatable while keeping the focus on the client, and how they benefit from your story (they don’t have to make the same mistakes you did).</p>
<p><strong>Tax professional?</strong> Not a good idea to talk about how much you hated math in high school and that your parents made you study accounting – that doesn’t benefit your client. After all, they are trusting you to do the math for them.</p>
<p>If you want to mention your high school math issues, put it in context:</p>
<p><em>“I grew up in a family of accountants, but in high school, math didn’t really excite me. However, when I learned how smart accounting makes or breaks a small business, I became interested in using my aptitude for numbers to help local businesses thrive.”</em></p>
<p><strong>Larger company?</strong> Try putting some context into employee bios to show how each hire is a perfect fit for the culture and environment you are trying to create. For example, if Ted was a consultant for local nonprofit organizations before landing a role in PR at your agency, maybe he’s fantastic at building community. (And PR is <em>all about</em> building relationships within the community!)</p>
<h3 id="4-Talk-it-out"><a href="#4-Talk-it-out" class="headerlink" title="4: Talk it out"></a><strong>4: Talk it out</strong></h3><p>If you’ve ever been stuck in an elevator when someone gives a canned elevator pitch, it can be cringe-worthy. Somehow the words they’ve memorized so studiously sound like a late-night infomercial when spoken aloud.</p>
<p>Don’t let this happen to you!</p>
<p><strong>Speak your copy out loud.</strong> You’ll know right away whether it sounds too technical for the audience, awkward, or overly familiar.</p>
<p><img src="http://blog.meetedgar.com/wp-content/uploads/2017/02/New-Girl-Schmidt-You-Got-This.gif" alt="New Girl Schmidt You Got This"></p>
<p>If you have someone read to, even better! They should be able to grasp and summarize your main points without having to ask for clarification.</p>
<p>Just be sure to choose someone similar to your target client. If your cat can grasp all the points of your aeronautical engineering white paper and he isn’t an engineer himself, you might want to dig into your topic a little deeper!</p>
<p>(Also, congratulations on having a <em>very</em> smart cat.)</p>
<p>Bonus: Talking it out is also a great way to pick up mistakes that your eyes naturally gloss over when reading. The more familiar you are with something, the harder it can be <a href="https://meetedgar.com/secret-blogging-formula/" target="_blank" rel="external">to catch mistakes!</a></p>
<h3 id="5-Don’t-be-afraid-to-recycle"><a href="#5-Don’t-be-afraid-to-recycle" class="headerlink" title="5: Don’t be afraid to recycle"></a><strong>5: Don’t be afraid to recycle</strong></h3><p>When you take the time to carefully craft language for social, website, blog, and industry use, you’ll build a resource you can turn to time and again.</p>
<p>Catch phrases and headlines return again and again for a reason. They help you identify a brand – so don’t be afraid to reuse and recycle your best stuff!</p>
<p>Not many people will read <em>every single word your business ever writes in every single medium.</em> In fact, you’re probably the only person who will!</p>
<p>That means the words you write can have <a href="http://blog.meetedgar.com/marketers-speak-out-which-type-of-content-really-performs-best/" target="_blank" rel="external">more than one application</a> – blog posts turn into video scripts, landing pages turn into emails, carved stone tablets turn into social media updates. (And social media updates can <a href="http://blog.meetedgar.com/five-big-brands-strategies-for-recycling-social-media-updates/" target="_blank" rel="external">be used again and again over time!</a>)</p>
<p><img src="http://blog.meetedgar.com/wp-content/uploads/2017/02/NY-Times-Tweet-Repeat-Vertical.jpg" alt="NY Times Tweet Repeat Vertical"></p>
<p>See? It works!</p>
<h3 id="Who-does-it-best"><a href="#Who-does-it-best" class="headerlink" title="Who does it best?"></a><strong>Who does it best?</strong></h3><p>There you have it – a few handy tips to keep in mind when you want to write like a human!</p>
<p>Got a favorite trick of you own for perfecting your voice?</p>
<p>Or maybe a fave business you think does it especially well?</p>
<p>Let us know in the comments below!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原    文：&lt;a href=&quot;http://blog.meetedgar.com/how-to-write-for-your-business-while-still-sounding-like-a-human/&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="写作" scheme="http://wanghaonanlpc.github.io/categories/%E5%86%99%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>何为软件即服务（SaaS）？</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/10/%E4%BD%95%E4%B8%BA%E8%BD%AF%E4%BB%B6%E5%8D%B3%E6%9C%8D%E5%8A%A1%EF%BC%88SaaS%EF%BC%89%EF%BC%9F/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/10/何为软件即服务（SaaS）？/</id>
    <published>2017-03-10T09:02:57.000Z</published>
    <updated>2017-03-10T09:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原    文：<a href="https://empireflippers.com/saas-business-model-explained/" target="_blank" rel="external">The SaaS Business Model Explained</a><br>译    文：Alex<br>作    者：Greg Elfrink</p>
</blockquote>
<p>软件即服务（SaaS）是一种相对较新的商业模式。</p>
<p>这是另一个模型，字面上不存在没有互联网。前提是一件软件托管在云基础架构上（即通过网络浏览器操作），企业每月支付费用以访问该软件。</p>
<p>SaaS业务一般可能是我们的解释器系列中最复杂的业务模式。它通常需要大量的编码知识，结合大量的用户界面设计技能，真正使SaaS产品值得。</p>
<p>SaaS企业和软件公司之间的主要区别是SaaS托管在云中。基本上，这消除了对最终用户许可证激活软件和托管软件的任何基础设施的需要。相反，SaaS公司承载其成员资格。客户只需登录他们的帐户，他们就可以获得完全访问权限。</p>
<h2 id="SaaS在需求"><a href="#SaaS在需求" class="headerlink" title="SaaS在需求"></a>SaaS在需求</h2><p>你可以想象，这是一个令人难以置信的吸引力作为一种服务。不想投入大量资金创建IT基础架构的企业主通常使用SaaS解决方案，而且SaaS解决方案通常对其业务（例如使用SalesForce的销售团队或使用Zendesk的客户服务部门）变得非常不可或缺。SaaS业务为为其业务使用服务的客户消除了这种风险，他们通常只支付小额的会员费用。</p>
<p>虽然SaaS业务有很多方式可以赚钱，但SaaS业务的面包和黄油通常是会员收入。这个会员费是让客户访问产品和软件的功能。</p>
<p>当我们进入增长战略时，我们将更深入地了解其他收入流，SaaS业务所有者可以考虑增加他们的频道。</p>
<p>在我们这样做之前，重要的是要注意，重视SaaS业务可能与我们覆盖的其他业务模式有点不同。这是因为经常需要增长SaaS业务的巨大再投资可以通过所有的利润吃饭，导致许多人基于他们对持续，稳定增长的信心购买SaaS业务。</p>
<h2 id="SaaS业务的3个时期"><a href="#SaaS业务的3个时期" class="headerlink" title="SaaS业务的3个时期"></a>SaaS业务的3个时期</h2><p>对于每个SaaS业务，有三个主要阶段，他们将要体验。大多数人都理解启动阶段，然后每个人都梦想稳定的金鹅阶段，当钱正在滚动。其中一个阶段，通常没有谈到，虽然它是一个SaaS业务的主要压力时期之一他们要么打破它，要么打破它，被称为Hypergrowth。</p>
<p>让我们深入三个阶段：</p>
<ol>
<li><strong>启动</strong> - 这包括获得一切，编程工作产品，“上市”，以获得您的前几个客户。</li>
<li><strong>过度增长</strong> - 如果市场喜欢您的产品，您可能会在企业采用您的软件时很快体验到巨大的增长。虽然这听起来不错，但这通常会花费更多的钱，因为您需要快速扩展数据，存储，带宽和各种技术特性，以支持新收购的客户。记住SaaS产品的客户经常喜欢的产品，因为他们不需要为他们的业务创建一个IT基础设施？嗯，他们不需要创建一个的原因是因为你的SaaS产品通过他们的成员为他们提供后端。</li>
<li><strong>稳定的黄金鹅</strong> - 这是您的SaaS业务稳定下来的阶段。你开始获得一个非常健康的利润，并以快速的速度获得新客户不会测试你的基础设施限制，就像在增长阶段。你也会熟悉“搅拌”，我们即将进入。</li>
</ol>
<p>许多SaaS产品实际上是相当不错的，但是不能管理过度增长是许多企业所遭受的，这可能导致许多失败。我们将在本解释文章的“生长策略”部分中讨论如何缓解这一点。</p>
<h2 id="成功的SaaS业务示例"><a href="#成功的SaaS业务示例" class="headerlink" title="成功的SaaS业务示例"></a>成功的SaaS业务示例</h2><p>SaaS业务可以是涵盖许多不同事物的一系列软件。然而，SaaS企业通过允许其更有效地运行，对其他企业最有帮助。</p>
<p>让我们来看看SaaS世界中的一些重大成功。</p>
<p><a href="http://www.salesforce.com/" target="_blank" rel="external">SalesForce.com</a></p>
<p>销售队伍是最早成立于1999年的软件公司SaaS业务之一。他们帮助无数企业管理他们的销售团队，处理他们的潜在客户，并有效地帮助他们跟踪他们最好的潜在客户。该产品已取得巨大成功，并且是大多数SaaS业主希望通过自己的产品实现的典范。</p>
<p><a href="https://meetedgar.com/" target="_blank" rel="external">认识Edgar</a></p>
<p>Edgar是一种社交媒体自动化SaaS产品，可以在某人的工作负载上消除数百小时的时间。它自动填充一个社交队列，并允许职位被回收一段时间。</p>
<p>它运行的前提是，由于大多数社交媒体帖子不会被跟随某人的Twitter Feed或Facebook页面的人所看到，因此该内容可以被回收，并随着时间的推移向更多的受众展示。</p>
<p>虽然当然小于SalesForce.com，但是Edgar在社交媒体SaaS领域已经变得非常重要，值得观看和模拟其他SaaS业务。</p>
<p><a href="https://meetedgar.com/" target="_blank" rel="external">Zendesk</a></p>
<p>然后有这个SaaS的juggernaut。Zendesk是一个客户服务票务系统，因其小型，中型甚至大型企业的可用性而闻名，更好地控制其客户服务，最终为终端消费者带来更好的体验。</p>
<h2 id="SaaS商业模式的优势"><a href="#SaaS商业模式的优势" class="headerlink" title="SaaS商业模式的优势"></a>SaaS商业模式的优势</h2><p>SaaS业务模式的优点是，您的客户可以疯狂地忠实于您的产品。如果您的SaaS产品代表的是其业务不可或缺的一部分，这一点尤其重要。毕竟，他们通常成为你的秘密社会的“成员”。</p>
<p>例如，Zendesk提供的软件可帮助企业创建有效的客户服务解决方案。可能有一个新的票务软件出来，打击了Zendesk出水，但因为Zendesk对于企业的成功至关重要，并且对于该业务流程是不可或缺的，业务不可能改变新的和改进的解决方案的一切。</p>
<p>这种忠诚度可以创造持续多年和多年的客户，增加了新兴的经常性收入，使SaaS产品如此有利可图。</p>
<p>显然，这是SaaS模式的下一个大项目。每个客户在技术上只是每月租用您的软件，而不是直接拥有一次性购买。</p>
<p>这意味着每个月你都会从这个客户那里赚取更多的利润。经常性收入往往是那些参与在线业务的人的梦想，而SaaS业务模式有这种经常性收入的想法的核心。</p>
<h2 id="SaaS模型的缺点"><a href="#SaaS模型的缺点" class="headerlink" title="SaaS模型的缺点"></a>SaaS模型的缺点</h2><p>虽然经常性收入是非常好的，大量的金钱，让你的SaaS业务进行不是几乎同样有吸引力。</p>
<p>有一开始你必须做的各种投资，如雇用良好的开发人员和程序员和UI设计师，将结合他们的技能，使您的产品尽可能用户友好和高效。</p>
<p>一旦你有一个产品落地，并有少数客户证明模型的价值，你很可能需要重新投资你的所有利润 - 加上一些更多的资本，以扩大业务。您将需要扩展您的数据功能，安全性，存储，让您的团队周围处理维护，并管理任何意外的问题，可能会在这个增长阶段出现。</p>
<p>在资本密集型商业模式之外，SaaS的另一个消极面是，它通常不是一个简单的产品。虽然模型本身很容易理解，即使对于理解所有编码的人来说，有效地保持实际的产品也是困难的。</p>
<p>这可能会使SaaS产品的销售更加困难，因为您正在寻找更多的潜在商业买家，比如对<a href="https://empireflippers.com/amazon-fba-business-model-explained/" target="_blank" rel="external">亚马逊FBA</a>或<a href="https://empireflippers.com/lead-gen-business-model-explained/" target="_blank" rel="external">主要业务</a>感兴趣的人。</p>
<h2 id="买家需要知道的"><a href="#买家需要知道的" class="headerlink" title="买家需要知道的"></a>买家需要知道的</h2><p>当涉及到购买一个较小的SaaS业务时，只有真正了解软件所涉及的编程或编码才是值得的。这当然不是这样的情况，如果它是一个更大的SaaS业务 - 开发团队与收购，卖方已经概述了所有的流程和系统，所以如果团队已经离开，你可以找到另一个开发商相对容易占据他们的地位。</p>
<p>您还要确保卖家拥有SaaS业务的所有编码，知识产权和品牌。确保您购买的是整个交易，而不仅仅是SaaS业务的一部分。</p>
<p>您绝对需要知道流失率是什么（客户每月订阅软件的速率）以及终身价值（LTV）和每个客户的成本获取（CAC）。这些是重要的指标，因为这些是业务的生命迹象。如果你的CAC太高，太低的LTV由于高流失率，SaaS业务不会是有吸引力的购买。</p>
<p>除非你相当擅长调整和增长各种营销渠道。在这种情况下，如果您知道产品运行良好，并且您确切知道营销漏斗或用户界面的哪些部分需要修复以解决这种情况，那么SaaS业务可能是您的极低价值的购买。</p>
<p>最后，当寻找SaaS业务来购买时，最好购买一个已经达到一个一致的客户增长水平，而不是爆炸性增长。如前所述，爆炸式增长可能会导致相当多的问题，在适当扩大一切。</p>
<p>最好是购买一个稳定的业务（几乎总是），而不是一个仍在经历大规模增长周期的业务。稳定的业务将使您能够更有效地调整您的营销渠道并优化业务。</p>
<h2 id="什么卖家需要知道"><a href="#什么卖家需要知道" class="headerlink" title="什么卖家需要知道"></a>什么卖家需要知道</h2><p>SaaS业务卖家可以做的第一件事是找到尽可能增加他们的LTV的方法。</p>
<p>LTV数字越高，业务越有吸引力，因为SaaS业务是所有经常性收入。如果LTV足够高或者轨道增加，这可能是一个巨大的交易者。</p>
<p>显然，你也想减少你的CAC和搅动。这可以通过调整营销渠道，甚至可以更改订阅定价。</p>
<p>除了这两个明显的指标，你应该有一个良好的开发团队，交给新的所有者。或者至少，有大量的文档和资源供买家用来寻找新的开发人员。用于创建软件的代码应完全由您拥有，包括与业务相关的所有内容（品牌，营销等）。</p>
<p>最后，训练你的软件买家。提供某种培训手册供他们阅读，以熟悉实际的产品和业务。在这个培训中，你应该真正突出你所拥有的任何障碍，以及增长潜力在哪里，所以新买家可以开始向这个方向移动。</p>
<p>不要害怕谈论你的业务的负面因素。很多时候，负面因素正是启发新买家实际购买您的SaaS业务的原因，因为他们看到解决这个问题的解决方案。</p>
<h2 id="谁最适合SaaS商业模式？"><a href="#谁最适合SaaS商业模式？" class="headerlink" title="谁最适合SaaS商业模式？"></a>谁最适合SaaS商业模式？</h2><p>如上所述，购买SaaS业务的人的利基将比其他业务模式更为狭窄，因为增长和维护这种业务所需的内在技能。</p>
<p>话虽如此，有些人适合各种各样的买家角色，仍然非常渴望购买像这样的企业 - 有很好的理由。</p>
<h3 id="战略Sally"><a href="#战略Sally" class="headerlink" title="战略Sally"></a>战略Sally</h3><p>SaaS业务对像战略Sally这样的人来说非常有意义，他们试图转向某个市场或人口。例如，如果Strategic Sally还有一个信息产品业务进行有效的客户关系管理，她可能会注意到一个SaaS业务，可以用作CRM来推销她的信息产品客户。</p>
<h3 id="DIY戴夫"><a href="#DIY戴夫" class="headerlink" title="DIY戴夫"></a>DIY戴夫</h3><p>SaaS业务模式真的会吸引那些拥有“自己动手”态度的人。这些业务非常适合像DIY Dave这样的人深入了解。他们可以深入了解实际产品的编程和编码，学习如何降低客户获取成本（CAC），同时调整营销渠道以提高每个客户的终身价值（LTV）。</p>
<h3 id="投资者伊万"><a href="#投资者伊万" class="headerlink" title="投资者伊万"></a>投资者伊万</h3><p>SaaS业务是投资者Ivan投资一些资本的理想场所。SaaS业务可以有巨大的收入潜力，经常性收入来启动，并且由于SaaS业务确实需要一些资金真正起起来和运行，投资者Ivan可能会发现一个业务合作伙伴在这个利基比一个<a href="https://empireflippers.com/adsense-business-model-explained/" target="_blank" rel="external">Adsense业务</a>更容易<a href="https://empireflippers.com/adsense-business-model-explained/" target="_blank" rel="external">模型</a>。</p>
<h2 id="SaaS增长策略"><a href="#SaaS增长策略" class="headerlink" title="SaaS增长策略"></a>SaaS增长策略</h2><p>当涉及到SaaS业务的发展时，你可以采取很多方向。</p>
<p>你选择的增长策略确实取决于你的核心竞争力和过去为你带来的最大的挑战。无论如何，这里有一些想法，可以用来将SaaS业务发展到下一阶段的收入。</p>
<h3 id="增加有机流量"><a href="#增加有机流量" class="headerlink" title="增加有机流量"></a>增加有机流量</h3><p>不言而喻，转换最高流量的最佳流量通常是来自Google和Bing等地区的自然搜索流量。有一种方法可以看到如何增加你的有机搜索是通过简单地看看你当前排名使用一个工具，如SEMRush的位置。</p>
<p>这实际上是一个很容易实施的策略，我在这篇文章中详细讨论<a href="https://empireflippers.com/growing-adsense-amazon-sites/" target="_blank" rel="external">了Adsense和亚马逊企业的低迷</a>。</p>
<h3 id="推出新的营销渠道"><a href="#推出新的营销渠道" class="headerlink" title="推出新的营销渠道"></a>推出新的营销渠道</h3><p>当谈到测试一个新的战略，有一些牵引目标到位。确保您将在新的营销渠道投入足够的资金，您可以达到统计显着的数字。否则，投资没有真正的意义。</p>
<p>一个新的营销渠道可以简单到拿你最好的有机排名或最流行的内容，并将这些内容转换成Youtube视频。毕竟，这是世界上第二大的搜索引擎，所以值得在那里找到。</p>
<h3 id="添加产品销量"><a href="#添加产品销量" class="headerlink" title="添加产品销量"></a>添加产品销量</h3><p>这是一个梦幻般的选择提供给现有客户，因为它为他们更好地，并将赢得更多。这些加售可以是更高端的包，其中客户每月支付更多以接收额外的特征，好处，数据存储或所有上述。它也可以是一个单一的加售 - 也许是一个信息产品，如高影响力的网络研讨会，如何使用该软件，以你的最佳优势。</p>
<p>无论您决定何种加售，始终确保考虑提供该服务的成本，因此您可以将其纳入您的客户必须为升级服务支付的最终定价。</p>
<h3 id="更快。更强。清洁器。"><a href="#更快。更强。清洁器。" class="headerlink" title="更快。更强。清洁器。"></a>更快。更强。清洁器。</h3><p>你可以做的一件事来提高客户满意度和忠诚度（并降低一些基础设施成本）是通过减少坏的代码使你的软件运行更快。冗长的错误或浪费的代码可以提高你的软件的速度，从而增加你的客户整体的幸福与产品巨大的不同。</p>
<p>使它精益，平均，甚至更有利可图。</p>
<h3 id="添加联属计划"><a href="#添加联属计划" class="headerlink" title="添加联属计划"></a>添加联属计划</h3><p>添加联属计划可以为您的业务带来巨大的福利。特别是如果你提供一个有利可图的程序，可以吸引熟练的附属机构推广你的报价。</p>
<p>有很多路线可以去，但如果你想要最好的方式吸引附属公司，你可能想提供一个剩余收入机会。在SaaS业务模式中，这通常比一次性付款更有吸引力。</p>
<p>另一方面，如果你有你的CAC和LTV号码，你可能只是提供一个大的，预付，一次性付款给联属网络 - 知道一般客户将留在足够长的时间，以收回支付联盟的成本那钱。</p>
<p>一些关联公司实际上更喜欢这种，因为他们的营销活动通常是在剃刀薄利润。</p>
<p>无论如何，联盟计划可以是一个惊人的方式，以提高你的营销力量，同时还需要大量的实际营销工作，你的盘子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原    文：&lt;a href=&quot;https://empireflippers.com/saas-business-model-explained/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The SaaS Business 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IaaS，PaaS和SaaS公司做什么？</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/10/IaaS%EF%BC%8CPaaS%E5%92%8CSaaS%E5%85%AC%E5%8F%B8%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/10/IaaS，PaaS和SaaS公司做什么？/</id>
    <published>2017-03-10T04:08:59.000Z</published>
    <updated>2017-03-10T09:35:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原    文：<a href="http://venturebeat.com/2011/11/14/cloud-iaas-paas-saas/" target="_blank" rel="external">Cloud 101: What the heck do IaaS, PaaS and SaaS companies do?</a><br>作    者：<a href="http://venturebeat.com/author/sean-ludwig" target="_blank" rel="external">SEAN LUDWIG</a><br>译    文：<a href="https://wanghaonanlpc.github.io/">一个老白</a></p>
</blockquote>
<p>任何遵循技术趋势的人都无疑听到过去几个月中云服务在几十亿亿次的时间里出现。但是如果你不知道PaaS，IaaS和SaaS之间的区别，不要担心 - 你远不是孤独。</p>
<p>让我们从头开始。“云”是互联网的比喻，“云计算”正在使用互联网来访问存储或运行在远程服务器上的应用程序，数据或服务。</p>
<p>当你打破它，任何提供基于互联网的计算，存储和开发方法的公司可以在技术上被称为云公司。然而，并不是所有的云公司都是一样的。通常，这些公司专注于提供三类云计算服务之一。这些不同的段被称为云的“层”。</p>
<p>不是每个人都是CTO或IT经理，所以有时候跟随云技术背后的隐语可能会很艰难。随着我们在本月底<a href="http://venturebeat.com/events/cloudbeat2011/" target="_blank" rel="external">召开</a>的第一届<a href="http://venturebeat.com/events/cloudbeat2011/" target="_blank" rel="external">CloudBeat 2011年会议</a>，我们认为这将是一个很好的机会，了解每一层服务的目的和一些公司的例子，以帮助给每个词更有意义。</p>
<h3 id="云层"><a href="#云层" class="headerlink" title="云层"></a>云层</h3><p>云计算公司是通过互联网提供其服务的任何公司。这些服务分为三个不同的类别或层。云计算的各个层面相互依存，是基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）。基础设施位于底部，平台在中间，软件在顶部。其他“软”层也可以添加在这些层的顶部，使用成本和安全性等元素扩展了云的大小和灵活性。</p>
<p>下面是一个图表，显示了云计算的三个主要层的简化说明：</p>
<p><a href="http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2011/11/iaas-paas-saas.jpg" target="_blank" rel="external"><img src="http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2011/11/iaas-paas-saas.jpg" alt="IaaS-PaaS-SaaS"></a></p>
<h3 id="IaaS：基础设施即服务"><a href="#IaaS：基础设施即服务" class="headerlink" title="IaaS：基础设施即服务"></a>IaaS：基础设施即服务</h3><p>第一个主要层是基础架构即服务或IaaS。（有时称为硬件即服务）几年前，如果你想在办公室运行业务应用程序并控制公司网站，你会购买服务器和其他昂贵的硬件，以控制本地应用程序，并使你的业务运行顺利。</p>
<p>但现在，使用IaaS，您可以将您的硬件需求外包给其他人。IaaS公司提供非现场服务器，存储和网络硬件，您可以通过Internet租用和访问。从维护成本和浪费的办公空间中，公司可以在这个硬件上运行他们的应用程序，并随时访问它。</p>
<p>IaaS中的一些最大的名字包括亚马逊，微软，VMWare，Rackspace和红帽。虽然这些公司有不同的专业 - 有些，如亚马逊和微软，想要提供给你而不仅仅是IaaS - 他们是通过销售你原始计算能力和托管你的网站的愿望。</p>
<h3 id="PaaS：平台即服务"><a href="#PaaS：平台即服务" class="headerlink" title="PaaS：平台即服务"></a>PaaS：平台即服务</h3><p>云的第二个主要层称为平台即服务（PaaS），有时称为中间件。这个类别的基本思想是，您公司的所有开发都可以在这一层上发生，从而节省您的时间和资源。</p>
<p>PaaS公司提供各种各样的解决方案，用于通过Internet开发和部署应用程序，如虚拟化服务器和操作系统。这为您节省了硬件上的金钱，也使分散的员工更容易协作。Web应用程序管理，应用程序设计，应用程序托管，存储，安全和应用程序开发协作工具都属于这一类。</p>
<p>目前最大的PaaS提供商有Google App Engine，Microsoft Azure，Saleforce的Force.com，Salesforce拥有的Heroku和<a href="http://venturebeat.com/2011/08/23/engine-yard-acquires-orchestra/" target="_blank" rel="external">Engine Yard</a>。我们撰写的一些PaaS初创公司包括<a href="http://venturebeat.com/2011/08/11/appfog-raises-8m-to-host-powerful-web-apps-in-the-cloud/" target="_blank" rel="external">AppFog</a>，<a href="http://venturebeat.com/2011/10/31/mendix-grabs-13m-to-fuel-fast-enterprise-app-development/" target="_blank" rel="external">Mendix</a>和<a href="http://venturebeat.com/2011/11/10/standing-cloud-cloud-app-management/" target="_blank" rel="external">Standing Cloud</a>。</p>
<h3 id="SaaS：软件即服务"><a href="#SaaS：软件即服务" class="headerlink" title="SaaS：软件即服务"></a>SaaS：软件即服务</h3><p>云的第三层和最后一层是软件即服务或SaaS。这个层是你最有可能在你的日常生活中进行交互的层，它几乎总是可以通过网络浏览器访问。在可以通过Internet访问的远程服务器上托管的任何应用程序都被视为SaaS。</p>
<p>您完全从网络消费的服务，如Netflix，MOG，Google Apps，Box.net，Dropbox和<a href="http://venturebeat.com/2011/10/28/icloud-steve-jobs-legacy/" target="_blank" rel="external">苹果的新iCloud</a>属于这一类。无论这些Web服务是用于商业，娱乐还是两者，它们都是技术上的一部分。</p>
<p>用于业务的一些常见SaaS应用包括Citrix的GoToMeeting，Cisco的WebEx，Salesforce的CRM，ADP，Workday和SuccessFactors。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原    文：&lt;a href=&quot;http://venturebeat.com/2011/11/14/cloud-iaas-paas-saas/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloud 101: What the 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Studio 2.3</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/09/Android-Studio-2-3/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/09/Android-Studio-2-3/</id>
    <published>2017-03-09T09:39:58.000Z</published>
    <updated>2017-03-09T10:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为 Google 官方出版并维护的 IDE，被全球数以百万计的 Android 开发者钟爱并使用的开发工具，Android Studio，在前几天的三月二号，正式迎来了 2.3 稳定版的更新。身为 Android 迷的你，赶快来和我一起看看新版 Android Studio 给我们带来了哪些变化吧。</p>
<h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><h3 id="Instant-Run-的改进和-UI-变化"><a href="#Instant-Run-的改进和-UI-变化" class="headerlink" title="Instant Run 的改进和 UI 变化"></a>Instant Run 的改进和 UI 变化</h3><p>Instant Run 基本上能够解决中小型项目的编译缓慢问题。作为 Google 重点关注的一个功能，Android Studio 2.3 版本在原来的基础上再次做了优化，进一步减少安装替换代码的时间。同时，在 Android Studio 的导航栏上将 run 和 instant run 按钮分开显示，供开发者选择调试策略。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/e37bc920cdc6f91459686f612a118e89.png" alt="img"></p>
<p><a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="external">Learn more</a></p>
<h3 id="Build-Cache"><a href="#Build-Cache" class="headerlink" title="Build Cache"></a>Build Cache</h3><p>编译缓存是 Android Studio 2.2 版本被引入的的一个功能，能够缓存项目中导入的 AAR、Libray，能够加快调试过程中的编译时间。新版本在此基础上进一步优化，同时默认打开这个功能，在 2.2 版本上默认处于关闭状态。</p>
<p><a href="http://d.android.com/studio/build/build-cache.html" target="_blank" rel="external">Learn more</a></p>
<h2 id="设计相关"><a href="#设计相关" class="headerlink" title="设计相关"></a>设计相关</h2><h3 id="约束布局中的链接和比例"><a href="#约束布局中的链接和比例" class="headerlink" title="约束布局中的链接和比例"></a>约束布局中的链接和比例</h3><p>Constraint Layout (约束布局) 想必大家有所耳闻了，但不知道是否用的习惯，目前我还没有在项目中正式使用。不过 Google 官方对此布局方式尤为看重，这不新版 Android Studio 又来改进了。介绍改进点之前，先给大家推荐一篇「郭霖」对于约束布局的介绍，非常详尽：<a href="http://blog.csdn.net/guolin_blog/article/details/53122387" target="_blank" rel="external">Android新特性介绍，ConstraintLayout完全解析</a>。看完之后，保证你一定跃跃欲试。</p>
<p>2.3 版本的 Android Studio 支持在约束布局中使用链接（Chains）和比例（Ratios）。Chains 的概念大致是，在使用约束布局的 layout 中，我们可以链接多个控件，一起设置约束条件，比如：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/6e82c17219040c4d02a810de608afc49.gif" alt="img"></p>
<p>Ratios 的概念也比较好理解，看图说话：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/f20d095c463087429690a0d9fc8f1989.gif" alt="img"></p>
<p>Chains 和 Ratios 都支持动态设置，有相应的 <a href="https://developer.android.com/reference/android/support/constraint/ConstraintSet.html" target="_blank" rel="external">ConstraintSet APIs</a> 可用。</p>
<p><a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="external">Learn more</a></p>
<h3 id="布局控件面板"><a href="#布局控件面板" class="headerlink" title="布局控件面板"></a>布局控件面板</h3><p>如果你经常使用拖拽控件的形式设计布局的话，那这个更新点对你简直如虎添翼。新版 Widget Palette 提供搜索、排序和过滤功能，帮助我们找到所需要的控件。同时，在你选择拖拽之前，提供对应控件的 UI 预览。如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/2bec92a95115899403b4ed5d391a9328.png" alt="img">Layout Editor Widget Palette</p>
<p><a href="https://developer.android.com/studio/write/layout-editor.html" target="_blank" rel="external">Learn more</a></p>
<h3 id="收藏常用属性"><a href="#收藏常用属性" class="headerlink" title="收藏常用属性"></a>收藏常用属性</h3><p>在 layout design 模式下，我们可以在 Properties 面板中保存常用属性，然后这些属性就会出现在收藏区域，帮助我们快速使用。如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/7c8d47a888e13699640dbe3d48f9bc8b.gif" alt="img">Favorites Attributes on Layout Editor Properties Panel</p>
<p><a href="https://developer.android.com/studio/write/layout-editor.html#edit-properties" target="_blank" rel="external">Learn more</a></p>
<h3 id="支持-WebP"><a href="#支持-WebP" class="headerlink" title="支持 WebP"></a>支持 WebP</h3><p>相比 PNG 格式的图片，WebP 无损压缩格式能够减少 <a href="https://developers.google.com/speed/webp/docs/webp_lossless_alpha_study#results" target="_blank" rel="external">25%</a> 的文件大小。在 Android Studio 2.3 版本中，我们可以自由转换图片格式，PNG to WebP，或者是 WebP to PNG，同时你还可以通过控制质量从而调整文件大小。如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/3719fcda2bf934649d15dd5030a991af.png" alt="img">WebP Image Conversion Wizard</p>
<p><a href="https://developer.android.com/studio/write/convert-webp.html" target="_blank" rel="external">Learn more</a></p>
<h3 id="Material-Icon-库"><a href="#Material-Icon-库" class="headerlink" title="Material Icon 库"></a>Material Icon 库</h3><p>新版的 Material Icon 矢量图标库支持搜索过滤功能，同时为每个 Icon 设置相应的 Label，以供搜索。一个非常人性化的改进：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/263a9adc96df33cd0c44c6a981ab2db8.png" alt="img">Vector Asset Wizard</p>
<p><a href="https://developer.android.com/studio/write/vector-asset-studio.html#materialicon" target="_blank" rel="external">Learn more</a></p>
<h2 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h2><h3 id="Lint-基准线"><a href="#Lint-基准线" class="headerlink" title="Lint 基准线"></a>Lint 基准线</h3><p>Android Lint 是优化项目必不可少的一个工具，使用中你可能会遇到这样的问题。在此之前，每次执行 Lint 命令，该工具会自动遍历所有的目标文件，并将不符规范的问题分类列举出来，然后我们一一处理。但如果你没有处理完的话，再次 Lint 时就又得从头开始解决问题，新旧问题融合到一起。此时如果你只想处理新的问题的话，就无迹可寻。而基准线（BaseLine）的出现就能解你燃眉之急。给每一次执行 Lint 设置一个 BaseLine，让你只想解决新 issues 的想法成为可能。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/eb03cbbc5a30a3161a3a0e2e1ed23f57.png" alt="img">Lint Baseline Support</p>
<p><a href="https://developer.android.com/studio/write/lint.html#snapshot" target="_blank" rel="external">Learn more</a> and <a href="https://developer.android.com/studio/releases/index.html" target="_blank" rel="external">new Lint checks &amp; annotations</a></p>
<h3 id="App-Links-助手"><a href="#App-Links-助手" class="headerlink" title="App Links 助手"></a>App Links 助手</h3><p>在 2015 年 I/O 大会上，Google 正式宣布 Android M 系统支持 App 链接，在 web url 到 native app 之间建立关联通道。比如，点击手机短信中的 url 链接和浏览器中的某个 url 就可以打开支持 App Links 的相应 App，一个非常赞的设计。要做到这个功能，需要在项目中添加相应的设置，修改 Manifest 文件等。新版本开发工具提供了可视化的工具帮助我们进行这些设置，如：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/3418d2ab53ff92b544e8ae4dd22589f9.png" alt="img">App Links Assistant</p>
<p><a href="https://developer.android.com/studio/write/app-link-indexing.html" target="_blank" rel="external">Learn more</a></p>
<h3 id="模版更新"><a href="#模版更新" class="headerlink" title="模版更新"></a>模版更新</h3><p>从 Android Studio 2.3 版本开始，新建项目时用到的所有 templates 默认使用 ConstraintLayout，而在此之前，默认都是 RelativeLayout。这一点，也再次说明约束布局的重要性。同时，新版也增加一个新的底部导航模式的模板，默认实现 Material Design 设计中的 Bottom Navigation，设计细节参考：<a href="https://material.io/guidelines/components/bottom-navigation.html" target="_blank" rel="external">guideline</a>。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/76ba4e9f9a0b8bdb94df2124f32ac6f4.png" alt="img">New Project Wizard Templates</p>
<p><a href="https://developer.android.com/studio/projects/templates.html" target="_blank" rel="external">Learn more templates</a></p>
<h2 id="IntelliJ-Platform-更新"><a href="#IntelliJ-Platform-更新" class="headerlink" title="IntelliJ Platform 更新"></a>IntelliJ Platform 更新</h2><p>Android Studio 2.3 版本使用 IntelliJ 2016.2 release，在一些 IDE 上的更新窗口和通知系统上有所改进。</p>
<p><a href="https://www.jetbrains.com/idea/whatsnew/#v2016-2" target="_blank" rel="external">Learn more</a></p>
<h2 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h2><h3 id="安卓模拟器复制粘贴功能"><a href="#安卓模拟器复制粘贴功能" class="headerlink" title="安卓模拟器复制粘贴功能"></a>安卓模拟器复制粘贴功能</h3><p>为响应广大开发者的需求，Google 在新版模拟器 (v25.3.1) 上实现了 PC 主机和模拟器之间的相互复制粘贴功能，主要通过共享剪贴板实现。需要注意的事，Copy &amp; Paste 功能仅在 x86 Google API Emulator 同时 API Level 19（Android 4.4-Kitkat）和更高版本中起到作用。效果如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/2175955c855819ee70d64e2ccd38a775.gif" alt="img">Copy &amp; Paste support in Android Emulator</p>
<h3 id="安卓模拟器命令行工具"><a href="#安卓模拟器命令行工具" class="headerlink" title="安卓模拟器命令行工具"></a>安卓模拟器命令行工具</h3><p>Android SDK Tools 25.3 开始，SDK Tools 文件夹中的 emulator 文件被转移到一个独立的模拟器文件夹，过去使用的 <code>android avd</code> 命令被废弃和替换。如果过去你使用到有关于此的脚本文件就需要在目录路径上稍作改动。当然，如果使用 Android Studio 启动模拟器的话，不受任何影响。</p>
<p><a href="https://developer.android.com/studio/releases/sdk-tools.html" target="_blank" rel="external">Learn more</a></p>
<p>至此，Android Studio 2.3 版本的更新内容介绍完毕。英文阅读无障碍的话，也可以自备<a href="http://buytizi.com/?r=225bb619613ec09e" target="_blank" rel="external">梯子</a>，查阅 [Android Developers Blog]。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为 Google 官方出版并维护的 IDE，被全球数以百万计的 Android 开发者钟爱并使用的开发工具，Android Studio，在前几天的三月二号，正式迎来了 2.3 稳定版的更新。身为 Android 迷的你，赶快来和我一起看看新版 Android Studi
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Android插件化从入门到放弃</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Android插件化从入门到放弃/</id>
    <published>2017-03-03T14:41:51.000Z</published>
    <updated>2017-03-03T15:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近研究插件化， 偶然发现此合集， 按照部分链接的文章实际简单写了些demo，受益良多， 觉得确实不错，特转载过来，给需要的人。</p>
</blockquote>
<h6 id="相关项目：Android-组件化和插件化开发"><a href="#相关项目：Android-组件化和插件化开发" class="headerlink" title="相关项目：Android 组件化和插件化开发"></a><a href="https://wanghaonanlpc.github.io/2017/03/03/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/">相关项目：Android 组件化和插件化开发</a></h6><p>插件化涉及的东西很多，所以我们需要多个维度去学习。大概分为5个部分：预备知识、入门、进阶、系列、类库。一步一步深入了解插件的原理。本专栏会不定时更新相关内容，请留意更新的消息。请加入QQ群：149581646.会统一通知最新的文章。<br>Posted2016-03-16<br>by Jomeslu.</p>
<p><strong>基础</strong><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="external">1.Java 类加载器</a><br>类加载器（class loader）是 Java中的一个很重要的概念。类加载器负责加载 Java 类的字节代码到 Java 虚拟机中。本文首先详细介绍了 Java 类加载器的基本概念，包括代理模式、加载类的具体过程和线程上下文类加载器等，接着介绍如何开发自己的类加载器，最后介绍了类加载器在 Web 容器和 OSGi中的应用。</p>
<p><a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH16.md" target="_blank" rel="external">2.反射原理</a><br>Java 提供的反射機制允許您於執行時期動態載入類別、檢視類別資訊、生成物件或操作生成的物件，要舉反射機制的一個應用實例，就是在整合式開發環境中所提供的方法提示或是類別檢視工具，另外像 JSP 中的 JavaBean 自動收集請求資訊也使用到反射，而一些軟體開發框架（Framework）也常見到反射機制的使用，以達到動態載入使用者自訂類別的目的。</p>
<p><a href="http://www.jianshu.com/p/6f6bb2f0ece9" target="_blank" rel="external">3.代理模式及Java实现动态代理</a><br>定义：给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。</p>
<p><strong>入门</strong><br><a href="http://blog.csdn.net/u013478336/article/details/50734108" target="_blank" rel="external">1.Android动态加载dex技术初探</a><br>Android使用Dalvik虚拟机加载可执行程序，所以不能直接加载基于class的jar，而是需要将class转化为dex字节码，从而执行代码。优化后的字节码文件可以存在一个<em>.jar中，只要其内部存放的是</em>.dex即可使用。</p>
<p><a href="http://104.236.134.90/2016/02/02/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%9F%BA%E7%A1%80/" target="_blank" rel="external">2.Android插件化入门</a><br>开发者将插件代码封装成Jar或者APK。宿主下载或者从本地加载Jar或者APK到宿主中。将宿主调用插件中的算法或者Android特定的Class（如Activity）</p>
<p><a href="http://blog.csdn.net/u010687392/article/details/47121729?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">3.插件化开发—动态加载技术加载已安装和未安装的apk</a><br>动态加载技术就是使用类加载器加载相应的apk、dex、jar（必须含有dex文件），再通过反射获得该apk、dex、jar内部的资源（class、图片、color等等）进而供宿主app使用。</p>
<p><a href="https://blog.tingyun.com/web/article/detail/166" target="_blank" rel="external">4.Android动态加载技术三个关键问题详解</a><br>动态加载技术（也叫插件化技术）在技术驱动型的公司中扮演着相当重要的角色，当项目越来越庞大的时候，需要通过插件化来减轻应用的内存和CPU占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。</p>
<p><strong>进阶</strong><br><a href="http://mp.weixin.qq.com/s?__biz=MzAwMTcwNTE0NA==&amp;mid=400217391&amp;idx=1&amp;sn=86181541ce0164156dfab135ed99bb5c&amp;scene=0&amp;key=b410d3164f5f798e61a5d4afb759fa38371c8b119384c6163a30c28163b4d4d5f59399f2400800ec842f1d0e0ffb84af&amp;ascene=0&amp;uin=MjExMjQ&amp;pass_ticket=Nt5Jaa28jjFxcQO9o+vQiXX+0iXG5DlZlHNW97Fk1Ew=" target="_blank" rel="external">1.携程Android App插件化和动态加载实践</a><br>携程Android App的插件化和动态加载框架已上线半年，经历了初期的探索和持续的打磨优化，新框架和工程配置经受住了生产实践的考验。本文将详细介绍Android平台插件式开发和动态加载技术的原理和实现细节，回顾携程Android App的架构演化过程，期望我们的经验能帮助到更多的Android工程师。</p>
<p><a href="http://blog.csdn.net/hkxxx/article/details/42194387" target="_blank" rel="external">2.动态加载APK原理分享</a><br>被加载的apk称之为插件，因为机制类似于生物学的”寄生”，加载了插件的应用也被称为宿主。 往往不是所有的apk都可作为插件被加载，往往需要遵循一定的”开发规范”，还需要插件项目引入某种api类库，业界通常都是这么做的。</p>
<p><a href="http://www.cnblogs.com/coding-way/p/4669591.html" target="_blank" rel="external">3.Android插件化的一种实现</a><br>Android的插件化已经是老生常谈的话题了，插件化的好处有很多：解除代码耦合，插件支持热插拔，静默升级，从根本上解决65K属性和方法的bug等等。下面给大家介绍一下我们正在用的差价化框架。本片主要以类图的方式向大家介绍插件话框架的实现。</p>
<p><a href="http://mogu.io/117-117" target="_blank" rel="external">4.蘑菇街 App 的组件化之路</a><br>随着我街业务的蓬勃发展，产品和运营随时上新功能新活动的需求越来越强烈，经常可以听到“有个功能我想周x上，行不行”。行么？当然是不行啦，上新功能得发新版本啊，到时候费时费力打乱开发节奏不说，覆盖率也是个问题。</p>
<p><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/FFish/DynamicLoadApk%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">5.DynamicLoadApk 源码解析</a><br>DynamicLoadApk 是一个开源的 Android 插件化框架。插件化的优点包括：(1) 模块解耦，(2) 动态升级，(3) 高效并行开发(编译速度更快) (4) 按需加载，内存占用更低等等DynamicLoadApk 提供了 3 种开发方式，让开发者在无需理解其工作原理的情况下快速的集成插件化功能。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="external">6.Android apk动态加载机制的研究</a><br>问题是这样的：我们知道，apk必须安装才能运行，如果不安装要是也能运行该多好啊，事实上，这不是完全不可能的，尽管它比较难实现。在理论层面上，我们可以通过一个宿主程序来运行一些未安装的apk，当然，实践层面上也能实现，不过这对未安装的apk有要求。我们的想法是这样的，首先要明白apk未安装是不能被直接调起来.</p>
<p><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">7.美团Android DEX自动拆包及动态加载简介</a><br>作为一个android开发者，在开发应用时，随着业务规模发展到一定程度，不断地加入新功能、添加新的类库，代码在急剧的膨胀，相应的apk包的大小也急剧增加， 那么终有一天，你会不幸遇到这个错误.</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwOTE0ODEwMQ==&amp;mid=401731625&amp;idx=1&amp;sn=9bf2bacfbba43ba9dc7b2e854b64e66c&amp;scene=23&amp;srcid=1231ni0s2Y0OMfYSoNhkkJ47#rd&amp;ADUIN=289832127&amp;ADSESSION=1451551778&amp;ADTAG=CLIENT.QQ.5425_.0&amp;ADPUBNO=26509" target="_blank" rel="external">8.途牛原创|途牛Android App的插件实现</a><br>途牛的插件化是基于dynamic-load-apk（github）实现的。定义了宿主和插件的通信方式，使得两者能够互起对方的页面，调用彼此的功能。同时对activity的启动方式singletask等进行了模式实现，并增加了对Service的支持等。总之使得插件开发最大限度的保持着原有的Android开发习惯。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/23387079" target="_blank" rel="external">9. Android apk资源加载和activity生命周期管理</a><br>博主分析了Android中apk的动态加载机制，并在文章的最后指出需要解决的两个复杂问题：资源的访问和activity生命周期的管理，而本文将会分析这两个复杂问题的解决方法。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639" target="_blank" rel="external">10.APK动态加载框架（DL）解析</a><br>首先要说的是动态加载技术（或者说插件化）在技术驱动型的公司中扮演这相当重要的角色，当项目越来越庞大的时候，需要通过插件化来减轻应用的内存和cpu占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。</p>
<p><strong>系列</strong><br><a href="https://segmentfault.com/a/1190000004062866" target="_blank" rel="external">1.Kaedea—Android动态加载技术 简单易懂的介绍</a><br>我们很早开始就在Android项目中采用了动态加载技术，主要目的是为了达到让用户不用重新安装APK就能升级应用的功能（特别是 SDK项目），这样一来不但可以大大提高应用新版本的覆盖率，也减少了服务器对旧版本接口兼容的压力，同时如果也可以快速修复一些线上的BUG。</p>
<p><a href="https://segmentfault.com/a/1190000004062880" target="_blank" rel="external">2.Kaedea—Android动态加载基础 ClassLoader的工作机制</a><br>早期使用过Eclipse等Java编写的软件的同学可能比较熟悉，Eclipse可以加载许多第三方的插件（或者叫扩展），这就是动态加载。这些插件大多是一些Jar包，而使用插件其实就是动态加载Jar包里的Class进行工作。</p>
<p><a href="https://segmentfault.com/a/1190000004062899" target="_blank" rel="external">3.Kaedea—Android动态加载补充 加载SD卡的SO库</a><br>Android中JNI的使用其实就包含了动态加载，APP运行时动态加载.so库并通过JNI调用其封装好的方法。后者一般是使用NDK工具从C/C++代码编译而成，运行在Native层，效率会比执行在虚拟机的Java代码高很多，所以Android中经常通过动态加载.so库来完成一些对性能比较有需求的工作（比如T9搜索、或者Bitmap的解码、图片高斯模糊处理等）。</p>
<p><a href="https://segmentfault.com/a/1190000004062952" target="_blank" rel="external">4.Kaedea—Android动态加载入门 简单加载模式</a><br>Java程序中，JVM虚拟机是通过类加载器ClassLoader加载.jar文件里面的类的。Android也类似，不过Android用的是Dalvik/ART虚拟机，不是JVM，也不能直接加载.jar文件，而是加载dex文件。</p>
<p><a href="https://segmentfault.com/a/1190000004062972" target="_blank" rel="external">5.Kaedea—Android动态加载进阶 代理Activity模式</a><br>简单模式中，使用ClassLoader加载外部的Dex或Apk文件，可以加载一些本地APP不存在的类，从而执行一些新的代码逻辑。但是使用这种方法却不能直接启动插件里的Activity。</p>
<p><a href="https://segmentfault.com/a/1190000004077469" target="_blank" rel="external">6.Kaedea—Android动态加载黑科技 动态创建Activity模式</a><br>还记得我们在代理Activity模式里谈到启动插件APK里的Activity的两个难题吗，由于插件里的Activity没在主项目的Manifest里面注册，所以无法经历系统Framework层级的一系列初始化过程，最终导致获得的Activity实例并没有生命周期和无法使用res资源。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823" target="_blank" rel="external">7.尼古拉斯—插件开发基础篇：动态加载技术解读</a><br>在目前的软硬件环境下，Native App与Web App在用户体验上有着明显的优势，但在实际项目中有些会因为业务的频繁变更而频繁的升级客户端，造成较差的用户体验，而这也恰恰是Web App的优势。本文对网上Android动态加载jar的资料进行梳理和实践在这里与大家一起分享，试图改善频繁升级这一弊病。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/41384667" target="_blank" rel="external">8.尼古拉斯—插件开发开篇：类加载器分析</a><br>这篇文章主要介绍了Android中主要的两个类加载器：PathClassLoader和DexClassLoader,他们的区别，联系，用法等问题，以及我们在制作插件的过程中会遇到哪些常见的问题。这篇文章也是后续两篇文章的基础，因为如果不了解这两个类的话，我们将无法进行后续的操作。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/47679843" target="_blank" rel="external">9.尼古拉斯—插件开发中篇：资源加载问题(换肤原理解析)</a><br>这篇文章主要通过现在一些应用自带的换肤技术的解读来看看，在开发插件的过程中如何解决一些资源加载上的问题，这个问题为何要单独拿出来解释，就是因为他涉及的知识很多，也是后面一篇文章的基础，我们在需要加载插件中的资源文件的时候。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104455" target="_blank" rel="external">10.尼古拉斯—插件开发终极篇：动态加载Activity(免安装运行程序)</a><br>这篇文章主要是讲解了如何加载插件中的Activity。从而实现免安装运行程序，同时这篇文章也是对前三篇文章知识的综合使用。下载很多应用都会使用到插件技术，因为包的大小和一些功能的优先级来决定哪些模块可以制作成插件。</p>
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="external">11.Weishu—Android插件化原理解析——概要</a><br>类的加载可以使用Java的ClassLoader机制，但是对于Android来说，并不是说类加载进来就可以用了，很多组件都是有“生命”的；因此对于这些有血有肉的类，必须给它们注入活力，也就是所谓的组件生命周期管理.</p>
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/" target="_blank" rel="external">12.Weishu—Android插件化原理解析——Hook机制之动态代理</a><br>使用代理机制进行API Hook进而达到方法增强是框架的常用手段，比如J2EE框架Spring通过动态代理优雅地实现了AOP编程，极大地提升了Web开发效率；同样，插件框架也广泛使用了代理机制来增强系统API从而达到插件化的目的.</p>
<p><a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/" target="_blank" rel="external">13.Weishu—Android插件化原理解析——Hook机制之Binder Hook</a><br>Android系统通过Binder机制给应用程序提供了一系列的系统服务，诸如ActivityManagerService，ClipboardManager， AudioManager等；这些广泛存在系统服务给应用程序提供了诸如任务管理，音频，视频等异常强大的功能。</p>
<p><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/" target="_blank" rel="external">14.Weishu—Android 插件化原理解析——Hook机制之AMS&amp;PMS</a><br>在前面的文章中我们介绍了DroidPlugin的Hook机制，也就是代理方式和Binder Hook；插件框架通过AOP实现了插件使用和开发的透明性。在讲述DroidPlugin如何实现四大组件的插件化之前，有必要说明一下它对AMS以及PMS的Hook方式。</p>
<p><a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/" target="_blank" rel="external">15.Weishu—Android 插件化原理解析——Activity生命周期管理</a><br>之前的 Android插件化原理解析 系列文章揭开了Hook机制的神秘面纱，现在我们手握倚天屠龙，那么如何通过这种技术完成插件化方案呢？具体来说，插件中的Activity，Service等组件如何在Android系统上运行起来？</p>
<p><a href="http://weishu.me/2016/04/05/understand-plugin-framework-classloader/" target="_blank" rel="external">16.Weishu—Android 插件化原理解析——插件加载机制</a><br>上文 Activity生命周期管理 中我们地完成了『启动没有在AndroidManifest.xml中显式声明的Activity』的任务；通过Hook AMS和拦截ActivityThread中H类对于组件调度我们成功地绕过了AndroidMAnifest.xml的限制。</p>
<p><a href="http://weishu.me/2016/04/12/understand-plugin-framework-receiver/" target="_blank" rel="external">17.Weishu—Android插件化原理解析——广播的管理</a><br>在Activity生命周期管理 以及 插件加载机制 中我们详细讲述了插件化过程中对于Activity组件的处理方式，为了实现Activity的插件化我们付出了相当多的努力；那么Android系统的其他组件，比如BroadcastReceiver，Service还有ContentProvider，它们又该如何处理呢？</p>
<p><a href="http://weishu.me/2016/05/11/understand-plugin-framework-service/" target="_blank" rel="external">18.Weishu—Android 插件化原理解析——Service的插件化</a><br>在 Activity生命周期管理 以及 广播的管理 中我们详细探讨了Android系统中的Activity、BroadcastReceiver组件的工作原理以及它们的插件化方案，相信读者已经对Android Framework和插件化技术有了一定的了解；</p>
<p><strong>类库</strong><br><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">1.DroidPlugin</a><br>是360手机助手在Android系统上实现了一种新的插件机制<br><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">2.Android-Plugin-Framework</a><br>此项目是Android插件开发框架完整源码及示例。用来通过动态加载的方式在宿主程序中运行插件APK。<br><a href="https://github.com/wequick/Small" target="_blank" rel="external">3.Small</a><br>世界那么大，组件那么小。Small，做最轻巧的跨平台插件化框架。里面有很详细的文档<br><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">4.dynamic-load-apk</a><br>Android 使用动态加载框架DL进行插件化开发<br><a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">5.AndroidDynamicLoader</a><br>Android 动态加载框架，他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">6.DynamicAPK</a><br>实现Android App多apk插件化和动态加载，支持资源分包和热修复.携程App的插件化和动态加载框架.<br><a href="https://github.com/bunnyblue/ACDD/blob/master/README-Zh.md" target="_blank" rel="external">7.ACDD</a><br>非代理Android动态部署框架<br><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">8.android-pluginmgr</a><br>不需要插件规范的apk动态加载框架。</p>
<p><strong>参考视频</strong><br><a href="http://www.infoq.com/cn/presentations/the-realization-principle-and-application-of-droidplugin" target="_blank" rel="external">1.DroidPlugin的实现原理及其应用</a><br>Droid Plugin是360手机助手在2015年初研发的一个全新的基于Android平台的插件机制.<br><a href="http://v.youku.com/v_show/id_XNTMzMjYzMzM2.html" target="_blank" rel="external">2.android插件化及动态部署</a><br>阿里技术沙龙第十六期《android插件化及动态部署》视频</p>
<p><strong>最近期待</strong></p>
<p><a href="2016/12/27/VirtualAPK-滴滴-Android-插件化的实践之路/">VirtualAPK: 滴滴 Android 插件化的实践之路</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近研究插件化， 偶然发现此合集， 按照部分链接的文章实际简单写了些demo，受益良多， 觉得确实不错，特转载过来，给需要的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;相关项目：Android-组件化和插件化开发&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="插件化" scheme="http://wanghaonanlpc.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android 组件化和插件化开发</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Android-组件化和插件化开发/</id>
    <published>2017-03-03T14:37:18.000Z</published>
    <updated>2017-03-04T02:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>重点是末尾开源框架列表</p>
</blockquote>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fda139k6jgj30fa080mxf.jpg" alt=""></p>
<p>组件化开发就是将一个app分成多个模块，每个模块都是一个组件（Module），开发的过程中我们可以让这些组件相互依赖或者单独调试部分组件等，但是最终发布的时候是将这些组件合并统一成一个apk，这就是组件化开发。</p>
<p>插件化开发和组件化开发略有不用，插件化开发时将整个app拆分成很多模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk（组件化的每个模块是个lib），最终打包的时候将宿主apk和插件apk分开或者联合打包。</p>
<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>android工程的组件一般分为两种，lib组件和application组件</p>
<p>application组件是指该组件本身就可以运行并打包成apk</p>
<p>lib组件是指该组件属于app的一部分，可以供其它组件使用但是本身不能打包成apk</p>
<h4 id="为什么要有组件化？"><a href="#为什么要有组件化？" class="headerlink" title="为什么要有组件化？"></a>为什么要有组件化？</h4><p>加入一个app工程只有一个组件，随着app业务的壮大模块越来越多，代码量超10万是很正常的，这个时候我们会遇到以下问题</p>
<ul>
<li>稍微改动一个模块的一点代码都要编译整个工程，耗时耗力</li>
<li>公共资源、业务、模块混在一起耦合度太高</li>
<li>不方便测试</li>
</ul>
<h4 id="组件化正确的姿势"><a href="#组件化正确的姿势" class="headerlink" title="组件化正确的姿势"></a>组件化正确的姿势</h4><p>既然选择使用组件化，那么如何正确的使用它呢？这里给出一种解决方案，如果你有更好的方案，欢迎交流。</p>
<p>我们创建了一个app工程project，默认里面有一个app组件，这个app组件是可以直接运行的。</p>
<p>怎么划分组件呢？</p>
<ul>
<li>1.新建一个lib组件，new Module—&gt;Andorid Library，取名BaseUtilLib，我们将所有的公共的工具类、网络分装等类放在其中</li>
<li>2.新建一个lib组件，BaseReslLib，我们将所有的公共资源、drawable、String等类放在其中</li>
<li>3.将app按照自己的规则划分成多个模块，比如按业务按地区等都可以</li>
<li>4.逐一开发某个模块，比如Test模块，新建一个TestApp组件，TestApp组件引用[1][2]步骤的BaseUtilLib和BaseReslLib，在TestApp组件里添加并引用TestLib组件。在TestLib的activity中写代码写业务逻辑，TestApp只负责跳转和测试</li>
<li>5.将工程中的所有类似TestLib组件（不是TestApp组件）引入到工程的app中<br>看着有点乱，整理出一张图<br><img src="http://img2.tuicool.com/NbQZV3R.png!web" alt="img"></li>
</ul>
<p>这样的好处有</p>
<p>每个模块可以独立开发编译运行</p>
<p>开发单个模块时可以共享资源和工具类</p>
<p>可以针对单个模块测试</p>
<p><a href="https://github.com/halibobo/ModuleBuild" target="_blank" rel="external">demo地址：https://github.com/halibobo/ModuleBuild</a></p>
<h2 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h2><h4 id="为什么有插件化？"><a href="#为什么有插件化？" class="headerlink" title="为什么有插件化？"></a>为什么有插件化？</h4><p>有了组件化，为什么还要用插件化呢？插件化开发总的来说有以下几点好处（不同插件框架不一样）：</p>
<ul>
<li>宿主和插件分开编译</li>
<li>并发开发</li>
<li>动态更新插件</li>
<li>按需下载模块</li>
<li>方法数或变量数爆棚</li>
</ul>
<h4 id="处境"><a href="#处境" class="headerlink" title="处境"></a>处境</h4><p>开放出来的插件化开发框架比较多，他们各自都有自己的优势和和不足，实现的原理也有差别下面列</p>
<h4 id="开源的插件化框架"><a href="#开源的插件化框架" class="headerlink" title="开源的插件化框架"></a>开源的插件化框架</h4><ul>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">Qihoo360/DroidPlugin</a></li>
<li><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">CtripMobile/DynamicAPK</a></li>
<li><a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">mmin18/AndroidDynamicLoader</a></li>
<li><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">singwhatiwanna/dynamic-load-apk</a></li>
<li><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">houkx/android-pluginmgr</a></li>
<li><a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">bunnyblue/ACDD</a></li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">wequick/Small</a></li>
<li>……</li>
</ul>
<p>目前开源的这几个框架有宿主和插件分离的也有融合在一起的，每个框架的详细介绍和demo在github里都可以查看到。插件化demo运行起来比较简单，但是真正将它用到实际项目中还是要考虑很多小细节的，目前我也正处于研究阶段。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;重点是末尾开源框架列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tNbRwly1fda139k6jgj30fa080mxf.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="插件化" scheme="http://wanghaonanlpc.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Lottie简介：Airbnb为本地应用程序添加动画的工具(翻译)</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie（翻译）/</id>
    <published>2017-03-03T03:23:46.000Z</published>
    <updated>2017-03-03T03:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介Lottie"><a href="#简介Lottie" class="headerlink" title="简介Lottie"></a>简介Lottie</h2><blockquote>
<p><a href="http://airbnb.design/lottie/" target="_blank" rel="external">官网地址：http://airbnb.design/lottie/</a></p>
<p><a href="https://github.com/airbnb" target="_blank" rel="external">Airbnb Github地址：https://github.com/airbnb</a></p>
<p>作者：<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>，<a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>，<a href="https://twitter.com/intelligibabble" target="_blank" rel="external">Leland Richardson</a>和<a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">Salih Abdul-Karim</a></p>
<p><a href="http://airbnb.design/category/behind-the-scenes/" target="_blank" rel="external">在幕后</a>  /由SALIH ABDUL-KARIM / 02.03<br><a href="http://airbnb.design/tag/animation/" target="_blank" rel="external">#ANIMATION </a><a href="http://airbnb.design/tag/design/" target="_blank" rel="external">#DESIGN </a><a href="http://airbnb.design/tag/engineering/" target="_blank" rel="external">#ENGINEERING </a><a href="http://airbnb.design/tag/motion/" target="_blank" rel="external">#MOTION </a><a href="http://airbnb.design/tag/open-source/" target="_blank" rel="external">#OPEN SOURCE </a><a href="http://airbnb.design/tag/tools/" target="_blank" rel="external">#TOOLS</a></p>
</blockquote>
<h2 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h2><h3 id="在我们的新的开源动画工具的幕后。"><a href="#在我们的新的开源动画工具的幕后。" class="headerlink" title="在我们的新的开源动画工具的幕后。"></a>在我们的新的开源动画工具的幕后。</h3><p>在过去，为Android，iOS和React Native应用程序构建复杂的动画是一个困难和漫长的过程。你必须为每个屏幕大小添加庞大的图像文件，或者编写一千行脆弱，难以维护的代码。因此，大多数应用程序不使用动画 - 尽管它是一个强大的工具，用于交流想法和创造引人注目的用户体验。一年前，我们开始改变这一点。</p>
<p>今天，我们很乐意介绍我们的解决方案。Lottie是一个iOS，Android和React Native库，可以实时渲染After Effects动画，并允许本机应用程序像使用静态资源一样轻松地使用动画。Lottie使用从开源的After Effects扩展名为<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>导出为JSON文件的动画数据。扩展程序与JavaScript播放器捆绑在一起，可以在网络上呈现动画。自2015年2月以来，Bodymovin的创始人<a href="https://twitter.com/airnanan" target="_blank" rel="external">Hernan Torrisi</a>已经通过每月为插件添加功能和改进功能打下坚实的基础。我们的团队（<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>的<a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>，<a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>的<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>，</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt="图标"></p>
<p>Lottie允许工程师构建更丰富的动画，而没有重写他们的艰苦的开销。Nick Butcher <a href="https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.xlw1n2u2d" target="_blank" rel="external">跳过</a>动画，Bartek Lipinski的<a href="https://android.jlelse.eu/animatedvectordrawablecompat-3d9568727c53#.fmiujhcdj" target="_blank" rel="external">汉堡包菜单</a>和Miroslaw Stanek的<a href="http://frogermcs.github.io/twitters-like-animation-in-android-alternative/" target="_blank" rel="external">Twitter心脏</a>展示了多么困难和耗时，可以从头开始重新创建动画。与Lottie，挖掘框架参考，猜测持续时间，手动创建Bézier曲线，并重新制作动画只是一个GIF的参考将是一个过去。现在工程师可以准确地使用设计师的意图，它是如何做的。为了演示这一点，我们重新创建了他们的动画，并在我们的示例应用程序中提供了After Effects和JSON文件。</p>
<p>我们的目标是尽可能支持尽可能多的After Effects功能，以允许比简单的图标动画更多。我们创建了一些其他例子来展示图书馆的灵活性，丰富性和深入的功能集。在示例应用程序中，还有各种不同种类的动画的源文件，包括基本线条艺术，基于字符的动画，以及具有多个角度和剪切的动态徽标动画。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt="screens_1"></p>
<p>我们已经开始在几个屏幕上发布我们自己的Lottie动画，包括应用内通知，全帧动画插图和在我们的审查流程。我们计划以一种有趣而有用的方式大大扩展我们对动画的使用。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt="screens_2"></p>
<h2 id="灵活高效的解决方案"><a href="#灵活高效的解决方案" class="headerlink" title="灵活高效的解决方案"></a><strong>灵活高效的解决方案</strong></h2><p>Airbnb是一家支持数百万客人和主机的全球性公司，因此拥有一个可在多个平台上播放的灵活动画格式对我们来说非常重要。有类似于Lottie的图书馆，如Marcus Eckert的<a href="http://www.marcuseckert.com/squall/" target="_blank" rel="external">Squall</a>和Facebook的<a href="https://github.com/facebookincubator/Keyframes" target="_blank" rel="external">关键帧</a>，但我们的目标略有不同。Facebook选择了一套After Effects功能来支持，因为他们主要关注反应，但我们想尽可能多地支持。对于Squall，Airbnb的设计师将它与Lottie结合使用，因为它有一个惊人的After Effects预览应用程序，它成为我们工作流程的必要部分。但是，它只支持iOS，我们的工程团队需要一个跨平台解决方案。</p>
<p>Lottie还在其API中内置了几个功能，使其更多样化和高效。它支持通过网络加载JSON文件，这对于A / B测试很有用。它还有一个可选的缓存机制，因此经常使用的动画，如愿望列表的心，可以每次加载缓存的副本。Lottie动画可以通过使用动画进度功能的手势驱动，并且动画速度可以通过改变一个简单的值来操纵。iOS甚至支持在运行时为动画添加额外的本地UI，可用于复杂的动画过渡。</p>
<p>除了我们迄今为止所做的所有After Effects特性和API添加之外，我们还有许多未来的想法。这些包括将视图映射到Lottie动画，控制与Lottie的视图过渡，支持<a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">Battle Axe的RubberHose</a>，渐变，类型和图像支持。最难的部分是选择哪些功能来处理下一个。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt="硬件"></p>
<h2 id="建筑社区"><a href="#建筑社区" class="headerlink" title="建筑社区"></a><strong>建筑社区</strong></h2><p>发布一些东西作为开源不仅仅是把它放在那里供公众使用。它是一个桥梁，连接人和创建社区。随着我们越来越接近通过GitHub向设计师和工程师发布Lottie，我们也希望与动画人员保持联系。</p>
<p>我们受到了<a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>，<a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external">Motion Corpse</a>和<a href="https://animography.net/products/mobilo" target="_blank" rel="external">Animography</a>创造的<a href="https://animography.net/products/mobilo" target="_blank" rel="external">社区的启发</a>。所有这三个人都聚集了来自世界各地的人，否则他们永远不会一起工作，在公共动画项目上合作。这些项目需要几个月的工作，很多组织和各自的团队争吵，但他们无疑为整个动画社会提供巨大的价值。运动公司和动画公开共享After Effects源文件，它提供了大量的洞察人们如何工作。</p>
<p>在他们的合作领导下，我们接触了所有三个团队，为我们的示例应用程序贡献动画。我们已经包括了由JR Canest创建的Motion Corpse的动画，来自9 Squares项目的Al Boardman的方块之一，以及使用Animography的Mobilo动画字体的动画键盘，其中包含超过二十个艺术家的作品。我们希望这些动画社区与强大的工程社群的合并将产生一些特别的东西。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt="社区">我们很想听听你如何使用Lottie - 无论你是一个设计师，动画师或工程师。欢迎随时通过lottie@airbnb.com与您的想法，反馈和见解联系。我们很高兴看到当他们开始以我们从未想象的方式使用Lottie时，世界上的社区会做什么。</p>
<h3 id="下载Bodymovin，Lottie-iOS，Android和React-Native。"><a href="#下载Bodymovin，Lottie-iOS，Android和React-Native。" class="headerlink" title="下载Bodymovin，Lottie iOS，Android和React Native。"></a>下载<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>，Lottie <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>，<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>和<a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>。</h3><p>本文由<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>，  <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>  和  <a href="http://airbnb.design/lottie/" target="_blank" rel="external">Salih Abdul-Karim](https://twitter.com/therealsalih?lang=en)共同撰写   。 </a></p>
]]></content>
    
    <summary type="html">
    
      introduce lottie
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="ui" scheme="http://wanghaonanlpc.github.io/tags/ui/"/>
    
      <category term="开源" scheme="http://wanghaonanlpc.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Airbnb" scheme="http://wanghaonanlpc.github.io/tags/Airbnb/"/>
    
  </entry>
  
  <entry>
    <title>Lottie简介：Airbnb为本地应用程序添加动画的工具(原文)</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie-%E5%8E%9F%E6%96%87/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie-原文/</id>
    <published>2017-03-03T03:23:46.000Z</published>
    <updated>2017-03-03T03:57:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://airbnb.design/category/behind-the-scenes/" target="_blank" rel="external">BEHIND THE SCENES</a>     /  BY SALIH ABDUL-KARIM / 02.03<br><a href="http://airbnb.design/tag/animation/" target="_blank" rel="external">#ANIMATION</a> <a href="http://airbnb.design/tag/design/" target="_blank" rel="external">#DESIGN</a> <a href="http://airbnb.design/tag/engineering/" target="_blank" rel="external">#ENGINEERING</a> <a href="http://airbnb.design/tag/motion/" target="_blank" rel="external">#MOTION</a> <a href="http://airbnb.design/tag/open-source/" target="_blank" rel="external">#OPEN SOURCE</a> <a href="http://airbnb.design/tag/tools/" target="_blank" rel="external">#TOOLS</a></p>
<h2 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h2><h3 id="Behind-the-scenes-of-our-new-open-source-animation-tool"><a href="#Behind-the-scenes-of-our-new-open-source-animation-tool" class="headerlink" title="Behind the scenes of our new open-source animation tool."></a>Behind the scenes of our new open-source animation tool.</h3><p>In the past, building complex animations for Android, iOS, and React Native apps was a difficult and lengthy process. You either had to add bulky image files for each screen size or write a thousand lines of brittle, hard-to-maintain code. Because of this, most apps weren’t using animation — despite it being a powerful tool for communicating ideas and creating compelling user experiences. One year ago, we set out to change that.</p>
<p>Today, we’re happy to introduce our solution. Lottie is an iOS, Android, and React Native library that renders After Effects animations in real time, and allows native apps to use animations as easily as they use static assets. Lottie uses animation data exported as JSON files from an open-source After Effects extension called <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>. The extension is bundled with a JavaScript player that can render the animations on the web. Since February of 2015, Bodymovin’s creator, <a href="https://twitter.com/airnanan" target="_blank" rel="external">Hernan Torrisi</a>, has built a solid foundation by adding features and improvements to the plugin on a monthly basis. Our team (<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a> on <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a> on <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>, <a href="https://twitter.com/intelligibabble" target="_blank" rel="external">Leland Richardson</a> on <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>, and <a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">I</a> on experience design) began our journey by building on top of Torrisi’s phenomenal work.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt="icons"></p>
<p>Lottie allows engineers to build richer animations without the painstaking overhead of re-writing them. Nick Butcher’s<a href="https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.xlw1n2u2d" target="_blank" rel="external"> jump through</a> animation, Bartek Lipinski’s <a href="https://android.jlelse.eu/animatedvectordrawablecompat-3d9568727c53#.fmiujhcdj" target="_blank" rel="external">hamburger menu</a>, and Miroslaw Stanek’s <a href="http://frogermcs.github.io/twitters-like-animation-in-android-alternative/" target="_blank" rel="external">Twitter heart</a> demonstrate just how difficult and time consuming it can be to re-create animations from scratch. With Lottie, digging through frameworks for reference, guessing durations, manually creating Bézier curves, and re-making animations with nothing more than a GIF for reference will be a thing of the past. Now engineers can use exactly what the designer intended, exactly how it was made. To demonstrate that, we’ve recreated their animations and provided After Effects and JSON files of each in our sample app.</p>
<p>Our goal is to support as many After Effects features as we possibly can, to allow for a lot more than simple icon animations. We’ve created a handful of other examples to show the library’s flexibility, richness, and deep feature set. In the sample app, there are also source files for a variety of different kinds of animations, including basic line art, character-based animations, and dynamic logo animations with multiple angles and cuts.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt="screens_1"></p>
<p>We’ve already started shipping our own Lottie animations on several screens, including in-app notifications, full-frame animated illustrations, and in our review flow. And we plan to greatly expand our usage of animations in a fun yet useful way moving forward.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt="screens_2"></p>
<h2 id="Flexible-and-efficient-solution"><a href="#Flexible-and-efficient-solution" class="headerlink" title="Flexible and efficient solution"></a><strong>Flexible and efficient solution</strong></h2><p>Airbnb is a global company that supports millions of guests and hosts, so having a flexible animation format that is playable on multiple platforms was extremely important to us. There are libraries similar to Lottie, such as Marcus Eckert’s <a href="http://www.marcuseckert.com/squall/" target="_blank" rel="external">Squall</a> and Facebook’s <a href="https://github.com/facebookincubator/Keyframes" target="_blank" rel="external">Keyframes</a>, but our goals are slightly different. Facebook picked a small set of After Effects features to support, since they were focusing mainly on reactions, but we want to support as many as possible. As for Squall, designers at Airbnb use it in combination with Lottie because it has an amazing After Effects preview app that’s become a necessary part of our workflow. However, it only supports iOS and our engineering teams needed a cross-platform solution.</p>
<p>Lottie also has several features built into its API to make it more versatile and efficient. It supports loading JSON files over the network, which is useful for A/B testing. It also has an optional caching mechanism, so frequently used animations, such as a wish-list heart, can load a cached copy each time. Lottie animations can be driven by gestures using the animated progress feature, and animation speed can be manipulated by changing a simple value. iOS even supports adding additional native UI to an animation at runtime, which can be used for complex animated transitions.</p>
<p>In addition to all of the After Effects features and API additions we’ve worked on so far, we have many ideas for the future. These include mapping views to Lottie animations, controlling view transitions with Lottie, support for <a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">Battle Axe’s RubberHose</a>, gradient, type, and image support. The hardest part is picking which features to tackle next.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt="hardware"></p>
<h2 id="Building-community"><a href="#Building-community" class="headerlink" title="Building community"></a><strong>Building community</strong></h2><p>Releasing something as open source is more than just putting it out there for the public to use. It’s a bridge that connects people and creates community. As we got closer to releasing Lottie to designers and engineers via GitHub, we wanted to be sure to connect with the animation folks as well.</p>
<p>We were inspired by the communities that <a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>, <a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external">Motion Corpse</a>, and <a href="https://animography.net/products/mobilo" target="_blank" rel="external">Animography</a> have created. All three have brought together people from around the world, who otherwise would never have worked together, to collaborate on public animation projects. These projects take months of work and a lot of organization and wrangling by the respective teams, but they undoubtedly provide immense value for the animation community as a whole. Motion Corpse and Animography publicly share the After Effects source files as well, which provide tons of insights on how people work.</p>
<p>Following their collaborative lead, we reached out to all three teams to contribute animations to our sample app. We’ve included an animation from Motion Corpse created by J.R. Canest, one of Al Boardman’s squares from the 9 Squares project, and an animated keyboard using Animography’s Mobilo animated typeface, which features work from more than two dozen artists. We’re hoping that the merging of these animation communities with the powerful engineering community will spark something special.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt="community">We’d love to hear how you’re using Lottie — no matter if you’re a designer, animator, or engineer. Feel free to reach out to us directly at lottie@airbnb.com with your thoughts, feedback, and insights. We’re excited to see what the community around the world will do when they begin to use Lottie in ways we never imagined.</p>
<h3 id="Download-Bodymovin-Lottie-iOS-Android-and-React-Native"><a href="#Download-Bodymovin-Lottie-iOS-Android-and-React-Native" class="headerlink" title="Download Bodymovin, Lottie iOS, Android and React Native."></a>Download <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>, Lottie <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a> and <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>.</h3><p>This article was co-written by  <a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>,  <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a> and <a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">Salih Abdul-Karim</a>.</p>
<p><img src="http://airbnb.design/lottie/" alt="Salih Abdul-Karim](http://airbnb.design/wp-content/uploads/2017/01/SalihAbdul-Karim-profile.jpg) Salih Abdul-Karim is an Experience and Motion Designer at Airbnb."></p>
]]></content>
    
    <summary type="html">
    
      introduce lottie
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="android" scheme="http://wanghaonanlpc.github.io/tags/android/"/>
    
      <category term="ui" scheme="http://wanghaonanlpc.github.io/tags/ui/"/>
    
      <category term="开源" scheme="http://wanghaonanlpc.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Airbnb" scheme="http://wanghaonanlpc.github.io/tags/Airbnb/"/>
    
  </entry>
  
  <entry>
    <title>Bugly实现热更新</title>
    <link href="http://wanghaonanlpc.github.io/2017/03/01/Bugly%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://wanghaonanlpc.github.io/2017/03/01/Bugly实现热更新/</id>
    <published>2017-03-01T12:49:44.000Z</published>
    <updated>2017-03-02T05:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>推荐阅读：<a href="http://www.jianshu.com/p/2d0f70e30111#" target="_blank" rel="external">Bugly热更新SDK你需要知道的一些事</a></p>
</blockquote>
<p>列举一些大家比较熟悉的一些热更新方案：</p>
<p>微信开源：<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Tinker</a><br>大众点评：<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a><br>阿里巴巴：<a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">Dexposed</a><br>阿里巴巴：<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a><br>美团：<a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">Robust</a></p>
<p><strong>Bugly也是出于高可用性的考虑，Tinker支持动态下发代码、So库以及资源，所以我们最终选择了Tinker方案作为我们SDK的一项能力。</strong></p>
<p><a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20170205190410" target="_blank" rel="external">Bugly热修复官方文档</a></p>
<h3 id="一、配置参数"><a href="#一、配置参数" class="headerlink" title="一、配置参数"></a>一、配置参数</h3><ul>
<li><strong>添加插件依赖</strong></li>
</ul>
<p>工程根目录下“build.gradle”文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        // tinkersupport插件，其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.3</div><div class="line">        classpath &quot;com.tencent.bugly:tinker-support:latest.release&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、集成SDK"><a href="#二、集成SDK" class="headerlink" title="二、集成SDK"></a>二、集成SDK</h3><ul>
<li><strong>gradle配置</strong></li>
</ul>
<p>在app module的“build.gradle”文件中添加（示例配置）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">      compile &quot;com.android.support:multidex:1.0.1&quot; </div><div class="line">      compile &apos;com.tencent.bugly:crashreport_upgrade:latest.release&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在app module的“build.gradle”文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 依赖插件脚本</div><div class="line">apply from: &apos;tinker-support.gradle&apos;</div></pre></td></tr></table></figure>
<ul>
<li><strong>tinker-support.gradle</strong>内容如下所示（示例配置）：</li>
</ul>
<p><em>需要在同级目录下创建tinker-support.gradle这个文件</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.tencent.bugly.tinker-support&apos;</div><div class="line"></div><div class="line">def bakPath = file(&quot;$&#123;buildDir&#125;/bakApk/&quot;)</div><div class="line"></div><div class="line">def appName = &quot;app-0111-15-18-41&quot;</div><div class="line"></div><div class="line">/**</div><div class="line">* 对于插件各参数的详细解析请参考</div><div class="line">*/</div><div class="line">tinkerSupport &#123;</div><div class="line"></div><div class="line">    // 开启tinker-support插件，默认值true</div><div class="line">    enable = true</div><div class="line"></div><div class="line">    // 指定归档目录，默认值当前module的子目录tinker</div><div class="line">    autoBackupApkDir = &quot;$&#123;bakPath&#125;&quot;</div><div class="line"></div><div class="line">    // 是否启用覆盖tinkerPatch配置功能，默认值false</div><div class="line">    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</div><div class="line">    overrideTinkerPatchConfiguration = true</div><div class="line"></div><div class="line">    // 编译补丁包时，必需指定基线版本的apk，默认值为空</div><div class="line">    // 如果为空，则表示不是进行补丁包的编译</div><div class="line">    // @&#123;link tinkerPatch.oldApk &#125;</div><div class="line">    baseApk =  &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release.apk&quot;</div><div class="line"></div><div class="line">    // 对应tinker插件applyMapping</div><div class="line">    baseApkProguardMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-mapping.txt&quot;</div><div class="line"></div><div class="line">    // 对应tinker插件applyResourceMapping</div><div class="line">    baseApkResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-R.txt&quot;</div><div class="line"></div><div class="line">    // 唯一标识当前版本</div><div class="line">    tinkerId = &quot;1.0.1-base&quot;</div><div class="line"></div><div class="line">    // 是否开启代理Application，设置之后无须改造Application，默认为false</div><div class="line">    enableProxyApplication = false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、初始化SDK"><a href="#三、初始化SDK" class="headerlink" title="三、初始化SDK"></a>三、初始化SDK</h3><p><strong>enableProxyApplication = false 的情况</strong></p>
<ul>
<li>自定义Application</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SampleApplication extends TinkerApplication &#123;</div><div class="line">    public SampleApplication() &#123;</div><div class="line">        super(ShareConstants.TINKER_ENABLE_ALL, &quot;com.yiba.test.buglypatch.SampleApplicationLike&quot;,</div><div class="line">                &quot;com.tencent.tinker.loader.TinkerLoader&quot;, false);</div><div class="line">    &#125;</div><div class="line">&#125;123456123456</div></pre></td></tr></table></figure>
<ul>
<li>自定义ApplicationLike</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class SampleApplicationLike extends DefaultApplicationLike &#123;</div><div class="line"></div><div class="line">    public static final String TAG = &quot;Tinker.SampleApplicationLike&quot;;</div><div class="line"></div><div class="line">    public SampleApplicationLike(Application application, int tinkerFlags,</div><div class="line">            boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime,</div><div class="line">            long applicationStartMillisTime, Intent tinkerResultIntent, Resources[] resources,</div><div class="line">            ClassLoader[] classLoader, AssetManager[] assetManager) &#123;</div><div class="line">        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime,</div><div class="line">                applicationStartMillisTime, tinkerResultIntent, resources, classLoader,</div><div class="line">                assetManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        // 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</div><div class="line">        Bugly.init(getApplication(), &quot;900029763&quot;, true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    @Override</div><div class="line">    public void onBaseContextAttached(Context base) &#123;</div><div class="line">        super.onBaseContextAttached(base);</div><div class="line">        // you must install multiDex whatever tinker is installed!</div><div class="line">        MultiDex.install(base);</div><div class="line"></div><div class="line">        // 安装tinker</div><div class="line">        // TinkerManager.installTinker(this); 替换成下面Bugly提供的方法</div><div class="line">        Beta.installTinker(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    public void registerActivityLifecycleCallback(Application.ActivityLifecycleCallbacks callbacks) &#123;</div><div class="line">        getApplication().registerActivityLifecycleCallbacks(callbacks);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、AndroidManifest-xml配置"><a href="#四、AndroidManifest-xml配置" class="headerlink" title="四、AndroidManifest.xml配置"></a>四、AndroidManifest.xml配置</h3><ul>
<li>权限配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Activity配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=&quot;com.tencent.bugly.beta.ui.BetaActivity&quot;</div><div class="line">    android:theme=&quot;@android:style/Theme.Translucent&quot; /&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>配置FileProvider（<a href="http://lib.csdn.net/base/android" target="_blank" rel="external">Android</a> N之后配置）</p>
<p>见<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20170205190410" target="_blank" rel="external">文档</a></p>
</li>
</ul>
<h3 id="五、混淆配置"><a href="#五、混淆配置" class="headerlink" title="五、混淆配置"></a>五、混淆配置</h3><p>为了避免混淆SDK，在Proguard混淆文件中增加以下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.tencent.bugly.**</div><div class="line">-keep public class com.tencent.bugly.**&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>如果你使用了support-v4包，你还需要配置以下混淆规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keep class android.support.**&#123;*;&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="六、编译基准包"><a href="#六、编译基准包" class="headerlink" title="六、编译基准包"></a>六、编译基准包</h3><p>基准包就是原先运行有bug的包。</p>
<p>点击Android Studio右上角的Gradle按钮，找到项目的assembleRelease任务，双击执行assembleRelease任务。</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/K%29RNI48%5DNN%28PS~MG%5B3LK%7BEK.png" alt="image"></p>
<p>任务执行完成后，会在build的目录下生成如下文件：</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/RCMZ3Q%29%5D7B%7B_YYQ%28HC6$RTS.png" alt="image"></p>
<h3 id="七、修复基准版代码"><a href="#七、修复基准版代码" class="headerlink" title="七、修复基准版代码"></a>七、修复基准版代码</h3><p>修复前代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class BugClass &#123;</div><div class="line"></div><div class="line">    public String bug() &#123;</div><div class="line">        String str = &quot;This is a bug&quot;;</div><div class="line">        str = null;</div><div class="line">        Log.e(&quot;zhang&quot;, &quot;BugClass --&gt; bug--&gt; str length :&quot; + str.length());</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>修复后代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class BugClass &#123;</div><div class="line"></div><div class="line">    public String bug() &#123;</div><div class="line">        String str = &quot;This is a bug&quot;;</div><div class="line">//        str = null;</div><div class="line">        Log.e(&quot;zhang&quot;, &quot;BugClass --&gt; bug--&gt; str length :&quot; + str.length());</div><div class="line">        return str + &quot;  , fixed!!!&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>调用代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button btn = (Button) findViewById(R.id.btn);</div><div class="line"></div><div class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                BugClass bugClass = new BugClass();</div><div class="line">                String bug = bugClass.bug();</div><div class="line">                Toast.makeText(MainActivity.this, bug, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="八、生成补丁包"><a href="#八、生成补丁包" class="headerlink" title="八、生成补丁包"></a>八、生成补丁包</h3><ul>
<li>修改appName名称以及文件名称都需要保持一致。同时将基准包的tinkerid=1.0.1-base改为补丁包的tinkerid=1.0.1-patch。</li>
</ul>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/R4TK_IQ9@7JMDN4H%289A7HLH.png" alt="image"></p>
<ul>
<li><strong>生成补丁包</strong></li>
</ul>
<p>执行生成补丁包的任务操作：</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/GD8C4NOLEE0%5BBBLFB_R4%29$U.png" alt="image"></p>
<p>任务执行完之后，会生成3个文件，其中patch_signed_7zip.apk是我们需要的补丁包</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/E4TCAATO%5B4E%602_S5PO6%5B0G6.png" alt="image"></p>
<p>将补丁包上传至bugly的应用升级模块的热更新中</p>
<p>具体见<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/?v=20170205190410" target="_blank" rel="external">bugly的官方文档</a>。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd7nh2frm9j30wb0b641r.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐阅读：&lt;a href=&quot;http://www.jianshu.com/p/2d0f70e30111#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bugly热更新SDK你需要知道的一些事&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="安卓" scheme="http://wanghaonanlpc.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
</feed>
