<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android 日常开发好习惯]]></title>
      <url>http://wanghaonanlpc.github.io/2017/04/06/Android-%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
      <content type="html"><![CDATA[<h3 id="Android编码规范"><a href="#Android编码规范" class="headerlink" title="Android编码规范"></a>Android编码规范</h3><ol>
<li>java代码中不出现中文，最多注释中可以出现中文；</li>
<li>局部变量命名、静态成员变量命名：只能包含字母，单词首字母出第一个都为大写，其他字母都为小写；</li>
<li>常量命名：只能包含字母和<em>，字母全部大写，单词之间用</em>隔开；</li>
<li>layout中的id命名：命名模式为：view缩写_模块名称_view的逻辑名称 view的缩写详情如下 LinearLayout：ll RelativeLayout:rl TextView:tv ImageView:iv ImageButton:ib Button:btn</li>
<li>activity中的view变量命名 命名模式为：view缩写+逻辑名称 建议：如果layout文件很复杂，建议将layout分成多个模块，每个模块定义一个moduleViewHolder，其成员变量包含所属view</li>
<li>strings.xml中的id命名： 命名模式：activity名称<em>功能模块名称</em>逻辑名称 activity名称<em>逻辑名称 common</em>逻辑名称 strings.xml中，使用activity名称注释，将文件内容区分开来</li>
<li>drawable中的图片命名 命名模式：activity名称<em>逻辑名称/common</em>逻辑名称 7.styles.xml：将layout中不断重现的style提炼出通用的style通用组件，放到styles.xml中；</li>
<li>使用layer-list和selector</li>
<li>图片尽量分拆成多个可重用的图片</li>
<li>服务端可以实现的，就不要放在客户端</li>
<li>引用第三方库要慎重，避免应用大容量的第三方库，导致客户端包非常大</li>
<li>处理应用全局异常和错误，将错误以邮件的形式发送给服务端</li>
<li>图片的.9处理</li>
<li>使用静态变量方式实现界面间共享要慎重</li>
<li>Log(系统名称 模块名称 接口名称，详细描述)</li>
<li>单元测试（逻辑测试、界面测试）</li>
<li>不要重用父类的handler，对应一个类的handler也不应该让其子类用到，否则会导致message.what冲突</li>
<li>activity中在一个View.OnClickListener中处理所有的逻辑</li>
<li>strings.xml中使用%1$s实现字符串的通配</li>
<li>如果多个Activity中包含共同的UI处理，那么可以提炼一个CommonActivity，把通用部分叫由它来处理，其他activity只要继承它即可</li>
<li>使用button+activitgroup实现tab效果时，使用Button.setSelected(true)，确保按钮处于选择状态，并使activitygroup的当前activity与该button对应</li>
<li>如果所开发的为通用组件，为避免冲突，将drawable/layout/menu/values目录下的文件名增加前缀</li>
<li>数据一定要效验，例如 字符型转数字型，如果转换失败一定要有缺省值； 服务端响应数据是否有效判断；</li>
</ol>
<h3 id="Android性能优化"><a href="#Android性能优化" class="headerlink" title="Android性能优化"></a>Android性能优化</h3><ol>
<li>http用gzip压缩，设置连接超时时间和响应超时时间 http请求按照业务需求，分为是否可以缓存和不可缓存，那么在无网络的环境中，仍然通过缓存的httpresponse浏览部分数据，实现离线阅读。</li>
<li>listview 性能优化<ol>
<li>复用convertView 在getItemView中，判断convertView是否为空，如果不为空，可复用。如果couvertview中的view需要添加listerner，代码一定要在if(convertView==null){}之外。</li>
<li>异步加载图片 item中如果包含有webimage，那么最好异步加载</li>
<li>快速滑动时不显示图片 当快速滑动列表时（SCROLL_STATE_FLING），item中的图片或获取需要消耗资源的view，可以不显示出来；而处于其他两种状态（SCROLL_STATE_IDLE 和SCROLL_STATE_TOUCH_SCROLL），则将那些view显示出来</li>
</ol>
</li>
<li>使用线程池，分为核心线程池和普通线程池，下载图片等耗时任务放置在普通线程池，避免耗时任务阻塞线程池后，导致所有异步任务都必须等待</li>
<li>异步任务，分为核心任务和普通任务，只有核心任务中出现的系统级错误才会报错，异步任务的ui操作需要判断原activity是否处于激活状态</li>
<li>尽量避免static成员变量引用资源耗费过多的实例,比如Context</li>
<li>使用WeakReference代替强引用，弱引用可以让您保持对对象的引用，同时允许GC在必要时释放对象，回收内存。对于那些创建便宜但耗费大量内存的对象，即希望保持该对象，又要在应用程序需要时使用，同时希望GC必要时回收时，可以考虑使用弱引用。</li>
<li>超级大胖子Bitmap 及时的销毁(Activity的onDestroy时，将bitmap回收) 设置一定的采样率 巧妙的运用软引用 drawable对应resid的资源，bitmap对应其他资源8.保证Cursor 占用的内存被及时的释放掉，而不是等待GC来处理。并且 Android明显是倾向于编程者手动的将Cursor close掉</li>
<li>线程也是造成内存泄露的一个重要的源头。线程产生内存泄露的主要原因在于线程生命周期的不可控</li>
<li>如果ImageView的图片是来自网络，进行异步加载</li>
<li>应用开发中自定义View的时候，交互部分，千万不要写成线程不断刷新界面显示，而是根据TouchListener事件主动触发界面的更新</li>
</ol>
<h3 id="Android-UI优化"><a href="#Android-UI优化" class="headerlink" title="Android UI优化"></a>Android UI优化</h3><ol>
<li>layout组件化，尽量使用merge及include复用</li>
<li>使用styles，复用样式定义</li>
<li>软键盘的弹出控制，不要让其覆盖输入框</li>
<li>数字、字母和汉字混排占位问题：将数字和字母全角化。由于现在大多数情况下我们的输入都是半角，所以 字母和数字的占位无法确定，但是一旦全角化之后，数字、字母的占位就和一个汉字的占位相同了，这样就可以避免由于占位导致的排版问题。</li>
<li>英文文档排版：textview自动换行时要保持单词的完整性，解决方案是计算字符串长度，然后手动设定每一行显示多少个字母并加上‘n‘</li>
<li>复杂布局使用RelativeLayout</li>
<li>自适应屏幕，使用dp替代pix</li>
<li>使用android:layout_weight或者TableLayout制作等分布局</li>
<li>使用animation-list制作动画效果</li>
</ol>
<h3 id="其他的一些Android开发建议"><a href="#其他的一些Android开发建议" class="headerlink" title="其他的一些Android开发建议"></a>其他的一些Android开发建议</h3><ol>
<li>跟上时代的步伐，把Eclipse换成Android Studio，把SVN换成Git，这当然要适合项目开发属性的需要，Git学习中文网站：<a href="https://git-scm.com/book/zh/" target="_blank" rel="external">https://git-scm.com/book/v2zh/v2</a></li>
<li>勤做总结，推荐使用印象笔记，把一些懂的经验总结起来，把还不懂的文章挂里面，有时间就慢慢消化；</li>
<li>定期code review，不断迭代，你总会发现一些不合理的代码，或者需要优化的地方。</li>
<li>关注一些知名的技术大V或网站，里面许多东西值得你去消化，推荐：<a href="http://p.codekk.com/" target="_blank" rel="external">Android 开源项目集合</a>，<a href="http://tech.meituan.com/" target="_blank" rel="external">http://tech.meituan.com/</a>，<a href="https://www.zhihu.com/people/stormzhang" target="_blank" rel="external">stormzhang</a>，但总归来说，去Android官网或者参考一份Java API文档虽说枯燥，但熟悉之后，你会有更大的进步。</li>
<li>如想更深入了解可阅读珍藏许久的文章：<a href="http://www.uml.org.cn/mobiledev/201211063.asp#1" target="_blank" rel="external">Android应用程序开发以及背后的设计思想深度剖析</a></li>
<li>如果你公司没有强大的测试团队，发布应用前最好把应用放到测试平台去测测，比如云测之类的；</li>
<li>取应用包名的时候切忌取太容易重复的，如果同款手机已经有该包名，那么会因为签名不同而导致安装不上，这也怪中国安卓市场太多，无法像Google Play那样进行包名审核。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android StrictMode 使用详解]]></title>
      <url>http://wanghaonanlpc.github.io/2017/04/03/Android-StrictMode-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>   StrictMode类是Android 2.3 （API 9）引入的一个工具类，可以用来帮助开发者发现代码中的一些不规范的问题，以达到提升应用响应能力的目的。举个例子来说，如果开发者在UI线程中进行了网络操作或者文件系统的操作，而这些缓慢的操作会严重影响应用的响应能力，甚至出现ANR对话框。为了在开发中发现这些容易忽略的问题，我们使用StrictMode，系统检测出主线程违例的情况并做出相应的反应，最终帮助开发者优化和改善代码逻辑。</p>
<p>​       官网文档：<a href="https://link.juejin.im/?target=http%3A%2F%2Fdeveloper.android.com%2Freference%2Fandroid%2Fos%2FStrictMode.html" target="_blank" rel="external">http://developer.android.com/reference/android/os/StrictMode.html</a></p>
<h2 id="StrictMode具体能检测什么"><a href="#StrictMode具体能检测什么" class="headerlink" title="StrictMode具体能检测什么"></a>StrictMode具体能检测什么</h2><p>严苛模式主要检测两大问题，一个是线程策略，即TreadPolicy，另一个是VM策略，即VmPolicy。</p>
<h3 id="ThreadPolicy线程策略检测"><a href="#ThreadPolicy线程策略检测" class="headerlink" title="ThreadPolicy线程策略检测"></a>ThreadPolicy线程策略检测</h3><ul>
<li>线程策略检测的内容有</li>
<li>自定义的耗时调用 使用detectCustomSlowCalls()开启</li>
<li>磁盘读取操作 使用detectDiskReads()开启</li>
<li>磁盘写入操作 使用detectDiskWrites()开启</li>
<li>网络操作 使用detectNetwork()开启</li>
</ul>
<h3 id="VmPolicy虚拟机策略检测"><a href="#VmPolicy虚拟机策略检测" class="headerlink" title="VmPolicy虚拟机策略检测"></a>VmPolicy虚拟机策略检测</h3><ul>
<li>Activity泄露 使用detectActivityLeaks()开启</li>
<li>未关闭的Closable对象泄露 使用detectLeakedClosableObjects()开启</li>
<li>泄露的Sqlite对象 使用detectLeakedSqlLiteObjects()开启</li>
<li>检测实例数量 使用setClassInstanceLimit()开启</li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>​       其实StrictMode实现原理也比较简单，以IO操作为例，主要是通过在open，read，write，close时进行监控。libcore.io.BlockGuardOs文件就是监控的地方。以open为例，如下进行监控。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public FileDescriptor open(String path, int flags, int mode) throws ErrnoException &#123;</div><div class="line">  BlockGuard.getThreadPolicy().onReadFromDisk();</div><div class="line">    if ((mode &amp; O_ACCMODE) != O_RDONLY) &#123;</div><div class="line">      BlockGuard.getThreadPolicy().onWriteToDisk();</div><div class="line">    &#125;</div><div class="line">    return os.open(path, flags, mode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中onReadFromDisk()方法的实现，代码位于StrictMode.java中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void onReadFromDisk() &#123;</div><div class="line">    if ((mPolicyMask &amp; DETECT_DISK_READ) == 0) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    if (tooManyViolationsThisLoop()) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    BlockGuard.BlockGuardPolicyException e = new StrictModeDiskReadViolation(mPolicyMask);</div><div class="line">    e.fillInStackTrace();</div><div class="line">    startHandlingViolationException(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>​       严格模式的开启可以放在Application或者Activity以及其他组件的onCreate方法。为了更好地分析应用中的问题，建议放在Application的onCreate方法中。<br>​       其中，我们只需要在app的开发版本下使用 StrictMode，线上版本避免使用 StrictMode，这里定义了一个布尔值变量DEV_MODE来进行控制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private boolean DEV_MODE = true</div><div class="line"> public void onCreate() &#123;</div><div class="line">     if (DEV_MODE) &#123;</div><div class="line">         StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()</div><div class="line">                 .detectCustomSlowCalls() //API等级11，使用StrictMode.noteSlowCode</div><div class="line">                 .detectDiskReads()</div><div class="line">                 .detectDiskWrites()</div><div class="line">                 .detectNetwork()   // or .detectAll() for all detectable problems</div><div class="line">                 .penaltyDialog() //弹出违规提示对话框</div><div class="line">                 .penaltyLog() //在Logcat 中打印违规异常信息</div><div class="line">                 .penaltyFlashScreen() //API等级11</div><div class="line">                 .build())</div><div class="line">         StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                 .detectLeakedSqlLiteObjects()</div><div class="line">                 .detectLeakedClosableObjects() //API等级11</div><div class="line">                 .penaltyLog()</div><div class="line">                 .penaltyDeath()</div><div class="line">                 .build())</div><div class="line">     &#125;</div><div class="line">     super.onCreate()</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>​       其中Android3.0引入的方法包括detectCustomSlowCalls()和noteSlowCode()，它们都是用来检测应用中执行缓慢代码的或者潜在的缓慢代码。</p>
<h2 id="查看报告结果"><a href="#查看报告结果" class="headerlink" title="查看报告结果"></a>查看报告结果</h2><p>​       严格模式有很多种报告违例的形式，但是想要分析具体违例情况，还是需要查看日志，终端下过滤StrictMode就能得到违例的具体stacktrace信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat | grep StrictMode</div></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/0ea33120a6ffe723f35677b3ae654fe4" alt="这里写图片描述"></p>
<p>当然也可以选择弹窗形式来简明提醒开发者</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/4f5db78b7fd3f070d2ffed2e87c6c91e" alt="弹窗警告"></p>
<h2 id="ThreadPolicy-详解"><a href="#ThreadPolicy-详解" class="headerlink" title="ThreadPolicy 详解"></a>ThreadPolicy 详解</h2><p>StrictMode.ThreadPolicy.Builder 主要方法如下</p>
<ul>
<li><h4 id="detectNetwork-用于检查UI线程中是否有网络请求操作"><a href="#detectNetwork-用于检查UI线程中是否有网络请求操作" class="headerlink" title="detectNetwork() 用于检查UI线程中是否有网络请求操作"></a>detectNetwork() 用于检查UI线程中是否有网络请求操作</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">检测UI线程中网络请求案例：</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    Button btnTest;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()</div><div class="line">                .detectNetwork()</div><div class="line">                .penaltyLog()</div><div class="line">                .build());</div><div class="line">        btnTest = (Button) findViewById(R.id.btn_test);</div><div class="line">        btnTest.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        int id = v.getId();</div><div class="line">        switch (id) &#123;</div><div class="line">            case R.id.btn_test:</div><div class="line">                postNetwork();</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 网络连接的操作</div><div class="line">     */</div><div class="line">    private void postNetwork() &#123;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(&quot;http://www.wooyun.org&quot;);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            conn.connect();</div><div class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(</div><div class="line">                    conn.getInputStream()));</div><div class="line">            String lines = null;</div><div class="line">            StringBuffer sb = new StringBuffer();</div><div class="line">            while ((lines = reader.readLine()) != null) &#123;</div><div class="line">                sb.append(lines);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，触发的警告如下</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/0ea33120a6ffe723f35677b3ae654fe4" alt="这里写图片描述"></p>
<ul>
<li><h4 id="detectDiskReads-和-detectDiskWrites-是磁盘读写检查"><a href="#detectDiskReads-和-detectDiskWrites-是磁盘读写检查" class="headerlink" title="detectDiskReads() 和 detectDiskWrites() 是磁盘读写检查"></a>detectDiskReads() 和 detectDiskWrites() 是磁盘读写检查</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">磁盘读写检查案例：</div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    Button btnTest;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()</div><div class="line">                .detectDiskWrites()</div><div class="line">                .detectDiskReads()</div><div class="line">                .penaltyLog()</div><div class="line">                .build());</div><div class="line">        btnTest = (Button) findViewById(R.id.btn_test);</div><div class="line">        btnTest.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        int id = v.getId();</div><div class="line">        switch (id) &#123;</div><div class="line">            case R.id.btn_test:</div><div class="line">                writeToExternalStorage();</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 文件系统的操作</div><div class="line">     */</div><div class="line">    public void writeToExternalStorage() &#123;</div><div class="line">        File externalStorage = Environment.getExternalStorageDirectory();</div><div class="line">        File mbFile = new File(externalStorage, &quot;castiel.txt&quot;);</div><div class="line">        try &#123;</div><div class="line">            OutputStream output = new FileOutputStream(mbFile, true);</div><div class="line">            output.write(&quot;www.wooyun.org&quot;.getBytes());</div><div class="line">            output.flush();</div><div class="line">            output.close();</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后，触发的警告如下<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/97ceb1872ac8c380f07db43e7914e0b9" alt="这里写图片描述"></p>
<ul>
<li><h4 id="noteSlowCall针对执行比较耗时的检查"><a href="#noteSlowCall针对执行比较耗时的检查" class="headerlink" title="noteSlowCall针对执行比较耗时的检查"></a>noteSlowCall针对执行比较耗时的检查</h4><p>​</p>
<p>​       StrictMode从 API 11开始允许开发者自定义一些耗时调用违例，这种自定义适用于自定义的任务执行类中，比如我们有一个进行任务处理的类，为TaskExecutor。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class TaskExecutor &#123;</div><div class="line">    public void execute(Runnable task) &#123;</div><div class="line">        task.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​       先需要跟踪每个任务的耗时情况，如果大于500毫秒需要提示给开发者，noteSlowCall就可以实现这个功能，如下修改代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class TaskExecutor &#123;</div><div class="line"></div><div class="line">    private static long SLOW_CALL_THRESHOLD = 500;</div><div class="line">    public void executeTask(Runnable task) &#123;</div><div class="line">        long startTime = SystemClock.uptimeMillis();</div><div class="line">        task.run();</div><div class="line">        long cost = SystemClock.uptimeMillis() - startTime;</div><div class="line">        if (cost &gt; SLOW_CALL_THRESHOLD) &#123;</div><div class="line">            StrictMode.noteSlowCall(&quot;slowCall cost=&quot; + cost);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行一个耗时2000毫秒的任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">TaskExecutor executor = new TaskExecutor();</div><div class="line">executor.executeTask(new Runnable() &#123;</div><div class="line">  @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">          Thread.sleep(2000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>​       得到的违例日志，注意其中~duration=20 ms并非耗时任务的执行时间，而我们的自定义信息msg=slowCall cost=2000才包含了真正的耗时。</p>
<ul>
<li><h4 id="penaltyDeath-，当触发违规条件时，直接Crash掉当前应用程序。"><a href="#penaltyDeath-，当触发违规条件时，直接Crash掉当前应用程序。" class="headerlink" title="penaltyDeath()，当触发违规条件时，直接Crash掉当前应用程序。"></a>penaltyDeath()，当触发违规条件时，直接Crash掉当前应用程序。</h4></li>
<li><h4 id="penaltyDeathOnNetwork-，当触发网络违规时，Crash掉当前应用程序。"><a href="#penaltyDeathOnNetwork-，当触发网络违规时，Crash掉当前应用程序。" class="headerlink" title="penaltyDeathOnNetwork()，当触发网络违规时，Crash掉当前应用程序。"></a>penaltyDeathOnNetwork()，当触发网络违规时，Crash掉当前应用程序。</h4></li>
<li><h4 id="penaltyDialog-，触发违规时，显示对违规信息对话框。"><a href="#penaltyDialog-，触发违规时，显示对违规信息对话框。" class="headerlink" title="penaltyDialog()，触发违规时，显示对违规信息对话框。"></a>penaltyDialog()，触发违规时，显示对违规信息对话框。</h4></li>
<li><h4 id="penaltyFlashScreen-，会造成屏幕闪烁，不过一般的设备可能没有这个功能。"><a href="#penaltyFlashScreen-，会造成屏幕闪烁，不过一般的设备可能没有这个功能。" class="headerlink" title="penaltyFlashScreen()，会造成屏幕闪烁，不过一般的设备可能没有这个功能。"></a>penaltyFlashScreen()，会造成屏幕闪烁，不过一般的设备可能没有这个功能。</h4></li>
<li><h4 id="penaltyDropBox-，将违规信息记录到-dropbox-系统日志目录中（-data-system-dropbox），你可以通过如下命令进行插件："><a href="#penaltyDropBox-，将违规信息记录到-dropbox-系统日志目录中（-data-system-dropbox），你可以通过如下命令进行插件：" class="headerlink" title="penaltyDropBox()，将违规信息记录到 dropbox 系统日志目录中（/data/system/dropbox），你可以通过如下命令进行插件："></a>penaltyDropBox()，将违规信息记录到 dropbox 系统日志目录中（/data/system/dropbox），你可以通过如下命令进行插件：</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys dropbox dataappstrictmode</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="permitCustomSlowCalls-、permitDiskReads-、permitDiskWrites-、permitNetwork：-如果你想关闭某一项检测，可以使用对应的permit-方法。"><a href="#permitCustomSlowCalls-、permitDiskReads-、permitDiskWrites-、permitNetwork：-如果你想关闭某一项检测，可以使用对应的permit-方法。" class="headerlink" title="permitCustomSlowCalls()、permitDiskReads ()、permitDiskWrites()、permitNetwork： 如果你想关闭某一项检测，可以使用对应的permit*方法。"></a>permitCustomSlowCalls()、permitDiskReads ()、permitDiskWrites()、permitNetwork： 如果你想关闭某一项检测，可以使用对应的permit*方法。</h4></li>
</ul>
<h2 id="VMPolicy-详解"><a href="#VMPolicy-详解" class="headerlink" title="VMPolicy 详解"></a>VMPolicy 详解</h2><p>StrictMode.VmPolicy.Builder 主要方法如下</p>
<ul>
<li><h4 id="detectActivityLeaks-用户检查-Activity-的内存泄露情况"><a href="#detectActivityLeaks-用户检查-Activity-的内存泄露情况" class="headerlink" title="detectActivityLeaks() 用户检查 Activity 的内存泄露情况"></a>detectActivityLeaks() 用户检查 Activity 的内存泄露情况</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">内存泄露检查案例：</div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                .detectActivityLeaks()</div><div class="line">                .penaltyLog()</div><div class="line">                .build()</div><div class="line">        );</div><div class="line"></div><div class="line">        new Thread() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line"></div><div class="line">                    SystemClock.sleep(1000);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们反复旋转屏幕就会输出提示信息（重点在 instances=2; limit=1 这一行）<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/e3c9e921a730c5e7a8bd546a405ee0cb" alt="这里写图片描述"><br>​       这时因为，我们在Activity中创建了一个Thread匿名内部类，而匿名内部类隐式持有外部类的引用。而每次旋转屏幕是，Android会新创建一个Activity，而原来的Activity实例又被我们启动的匿名内部类线程持有，所以不会释放，从日志上看，当先系统中该Activty有4个实例，而限制是只能创建1各实例。我们不断翻转屏幕，instances 的个数还会持续增加。</p>
<ul>
<li><h4 id="detectLeakedClosableObjects-用于资源没有正确关闭时提醒"><a href="#detectLeakedClosableObjects-用于资源没有正确关闭时提醒" class="headerlink" title="detectLeakedClosableObjects()用于资源没有正确关闭时提醒"></a>detectLeakedClosableObjects()用于资源没有正确关闭时提醒</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                .detectLeakedClosableObjects()</div><div class="line">                .penaltyLog()</div><div class="line">                .build()</div><div class="line">        );</div><div class="line"></div><div class="line">        File newxmlfile = new File(Environment.getExternalStorageDirectory(), &quot;castiel.txt&quot;);</div><div class="line">        try &#123;</div><div class="line">            newxmlfile.createNewFile();</div><div class="line">            FileWriter fw = new FileWriter(newxmlfile);</div><div class="line">            fw.write(&quot;猴子搬来的救兵WooYun&quot;);</div><div class="line">            </div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后触发警告如下<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/c65025d4aed04406cc2fb57458ee9d7f" alt="这里写图片描述"></p>
<ul>
<li><h4 id="detectLeakedSqlLiteObjects-和-detectLeakedClosableObjects-的用法类似，只不过是用来检查-SQLiteCursor-或者-其他-SQLite-对象是否被正确关闭"><a href="#detectLeakedSqlLiteObjects-和-detectLeakedClosableObjects-的用法类似，只不过是用来检查-SQLiteCursor-或者-其他-SQLite-对象是否被正确关闭" class="headerlink" title="detectLeakedSqlLiteObjects() 和 detectLeakedClosableObjects()的用法类似，只不过是用来检查 SQLiteCursor 或者 其他 SQLite 对象是否被正确关闭"></a>detectLeakedSqlLiteObjects() 和 detectLeakedClosableObjects()的用法类似，只不过是用来检查 SQLiteCursor 或者 其他 SQLite 对象是否被正确关闭</h4></li>
<li><h4 id="detectLeakedRegistrationObjects-用来检查-BroadcastReceiver-或者-ServiceConnection-注册类对象是否被正确释放"><a href="#detectLeakedRegistrationObjects-用来检查-BroadcastReceiver-或者-ServiceConnection-注册类对象是否被正确释放" class="headerlink" title="detectLeakedRegistrationObjects() 用来检查 BroadcastReceiver 或者 ServiceConnection 注册类对象是否被正确释放"></a>detectLeakedRegistrationObjects() 用来检查 BroadcastReceiver 或者 ServiceConnection 注册类对象是否被正确释放</h4></li>
<li><h4 id="setClassInstanceLimit-，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露"><a href="#setClassInstanceLimit-，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露" class="headerlink" title="setClassInstanceLimit()，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露"></a>setClassInstanceLimit()，设置某个类的同时处于内存中的实例上限，可以协助检查内存泄露</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">检测内存泄露案例</div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private static class CastielClass&#123;&#125;</div><div class="line">    private static List classList;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        classList = new ArrayList();</div><div class="line"></div><div class="line">        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()</div><div class="line">                .setClassInstanceLimit(CastielClass.class, 2)</div><div class="line">                .penaltyLog()</div><div class="line">                .build());</div><div class="line"></div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line">        classList.add(new CastielClass());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后触发警告如下</p>
<p><img src="https://user-gold-cdn.xitu.io/2016/11/29/145a4310ac2183dcfbaba3ce4307cfa2" alt="这里写图片描述"></p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>​       除了通过日志查看之外，我们也可以在开发者选项中开启严格模式，开启之后，如果主线程中有执行时间长的操作，屏幕则会闪烁，这是一个更加直接的方法。<br><img src="https://user-gold-cdn.xitu.io/2016/11/29/f2adecc3e7f0e358b2fcad32eb405b6b" alt="这里写图片描述"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac os 10.8 一键安装PHP、Mysql、Nginx]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/24/Mac-os-10-8-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85PHP%E3%80%81Mysql%E3%80%81Nginx/</url>
      <content type="html"><![CDATA[<p>基于HomeBrew安装，如果没有安装Brew，请先执行安装命令。</p>
<p>levi提供了一个更详细的方案，就不重复造车了。<br><a href="http://levi.cg.am/?p=3129" target="_blank" rel="external">http://levi.cg.am/?p=3129</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android团队项目开发之统一代码规范]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/21/Android%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B9%8B%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原    址:<a href="https://m.aliyun.com/yunqi/articles/11875?spm=5176.100239.0.0.9l3OVA" target="_blank" rel="external">【项目篇】Android团队项目开发之统一代码规范</a></p>
<p>作    者:<a href="https://m.aliyun.com/yunqi/users/1895759156739057?spm=5176.100239.0.0.ZbMlP9" target="_blank" rel="external">hudan2714 ( 云溪社区 ) </a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>团队项目开发前的统一三要素：统一需求/开发文档，统一代码规范，统一环境（编译/测试/发布）。</p>
<p>一个项目团队，要想有高效的产出，必须在团队协作上下好功夫，必须在项目开发统一进度上做好协调。只有在高效的协同环境下，才能有优质的产出。这是我多年的经验之谈。也是配合过多个团队之后的深刻感悟。</p>
<p>每一个程序员都是有独立开发思维模式，都有自己的编码行为和操作习惯。所以，在一个团队中，怎么做到更高效的协同，不仅仅是每个开发者自身的协同配合能力，更重要的是项目管理者，怎样做到统一要求和统一实行。</p>
<p>举个很简单的例子。以前在一个小团队里，每次进行代码更新的时候，都是有一大堆更新。最后发现很多不是代码功能的个性，而只是大家的code style不一样。每次merge代码都要diff查看修改的地方，这样很影响效率。而且如果你只是做为一个普通的开发者，要求其它人和你用统一style，别人未必接受。这时的项目管理者，才是最需要去统一规范的。保持规范统一，才是高效协作产出的前提。</p>
<p>Android项目开发需要统一哪些规范呢？<br>在些列出一些常用规范，和容易出问题的地方，方便自己查找，也方便和更多的朋友交流！<br>一、编码方式统一：UTF-8。一般项目都用utf-8。有其它编码的，可自行要求修改。<br>在项目代码中右键，就能出现如下：<br><img src="http://img.blog.csdn.net/20160328150409162" alt="修改编码"></p>
<p>或者去个性配置文件：<br><img src="http://img.blog.csdn.net/20160328150459694" alt="修改编码"></p>
<p>二、代码样式code style：比如，tab缩进4个空格，或者 tab size等。<br>\1. 自定义的编码格式xml 文件。没有的话，可以下载<br>\2. 把xml文件复制到 C:/Users/YourUserName/.AndroidStudio/config/codestyles 目录下，如果没有codestyles目录可以自己新建一个。 (目前还不支持导入)<br>\3. 重启android studio<br>\4. android studio 中 Setting-&gt; Editor-&gt; Code Style-&gt; JAVA-&gt; Scheme 选择自定义的编码格式文件。<br>具体如下图：<br><img src="http://img.blog.csdn.net/20160328153328856" alt="样式"></p>
<p>保持代码格式的一致性，对项目的协同开发很有必要。优秀的代码习惯是，提交代码前格式化代码，让代码统一规则上传，保证代码的整洁。所以，在团队中必须支持规范代码。提交前所有修改的类都必须ctrl+f（规范代码），然后再提前。良好的编码习惯，能让代码变得更优雅漂亮。</p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>Java代码一般使用驼峰式规则，用名词或名词词组命名，每个单词的首字母大写。常用类的命名：</p>
<blockquote>
<ul>
<li>activity类，命名以Activity为后缀，如：LoginActivity</li>
<li>fragment类，命名以Fragment为后缀，如：ShareDialogFragment</li>
<li>service类，命名以Service为后缀，如：DownloadService</li>
<li>adapter类，命名以Adapter为后缀，如：CouponListAdapter</li>
<li>工具类，命名以Util为后缀，如：EncryptUtil</li>
<li>模型类，命名以BO为后缀，如：CouponBO</li>
<li>接口实现类，命名以Impl为后缀，如：ApiImpl</li>
</ul>
</blockquote>
<h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><blockquote>
<ul>
<li>初始化方法，命名以init开头，例：initView</li>
<li>按钮点击方法，命名以to开头，例：toLogin</li>
<li>设置方法，命名以set开头，例：setData</li>
<li>具有返回值的获取方法，命名以get开头，例：getData</li>
<li>通过异步加载数据的方法，命名以load开头，例：loadData</li>
<li>布尔型的判断方法，命名以is或has，或具有逻辑意义的单词如equals，例：isEmpty</li>
</ul>
</blockquote>
<h3 id="控件命名"><a href="#控件命名" class="headerlink" title="控件命名"></a>控件命名</h3><p>控件命名，一般都有各自习惯。但为了保证代码的整洁，尽量保持统一风格。<br><img src="http://img.blog.csdn.net/20160328155235197" alt="控件"></p>
<h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>全部为大写单词，单词之间用下划线分开。<br>public final static int PAGE_SIZE = 20;</p>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>{范围描述+}意义描述+类型描述的组合，用驼峰式，首字母小<br><code>private TextView headerTitleTxt; // 标题栏的标题 private Button loginBtn; // 登录按钮</code></p>
<h3 id="控件id命名"><a href="#控件id命名" class="headerlink" title="控件id命名"></a>控件id命名</h3><p>控件缩写<em>{范围</em>}意义，范围可选，只在有明确定义的范围内才需要加上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 这是标题栏的标题 --&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/txt_header_title&quot;</div><div class="line">    ... /&gt;</div><div class="line"></div><div class="line">&lt;!-- 这是登录按钮 --&gt;</div><div class="line">&lt;Button</div><div class="line">    android:id=&quot;@+id/btn_login&quot;</div><div class="line">    ... /&gt;</div></pre></td></tr></table></figure>
<h3 id="layout命名"><a href="#layout命名" class="headerlink" title="layout命名"></a>layout命名</h3><p>组件类型<em>{范围</em>}功能，范围可选，只在有明确定义的范围内才需要加上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">activity_&#123;范围_&#125;功能，为Activity的命名格式 </div><div class="line">fragment_&#123;范围_&#125;功能，为Fragment的命名格式</div><div class="line">dialog_&#123;范围_&#125;功能，为Dialog的命名格式 </div><div class="line">item_list_&#123;范围_&#125;功能，为ListView的item命名格式</div><div class="line">item_grid_&#123;范围_&#125;功能，为GridView的item命名格式</div><div class="line">header_list_&#123;范围_&#125;功能，为ListView的HeaderView命名格式</div><div class="line">footer_list_&#123;范围_&#125;功能，为ListView的FooterView命名格式</div></pre></td></tr></table></figure>
<h3 id="strings的命名"><a href="#strings的命名" class="headerlink" title="strings的命名"></a>strings的命名</h3><p>类型<em>{范围</em>}功能，范围可选。<br>以下为几种常用的命名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">页面标题，命名格式为：title_页面</div><div class="line">按钮文字，命名格式为：btn_按钮事件</div><div class="line">标签文字，命名格式为：label_标签文字</div><div class="line">选项卡文字，命名格式为：tab_选项卡文字</div><div class="line">消息框文字，命名格式为：toast_消息</div><div class="line">编辑框的提示文字，命名格式为：hint_提示信息</div><div class="line">图片的描述文字，命名格式为：desc_图片文字</div><div class="line">对话框的文字，命名格式为：dialog_文字</div><div class="line">menu的item文字，命名格式为：action_文字</div></pre></td></tr></table></figure>
<h3 id="colors的命名"><a href="#colors的命名" class="headerlink" title="colors的命名"></a>colors的命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">背景颜色，添加bg前缀</div><div class="line">文本颜色，添加text前缀</div><div class="line">分割线颜色，添加div前缀</div><div class="line">区分状态时，默认状态的颜色，添加normal后缀</div><div class="line">区分状态时，按下时的颜色，添加pressed后缀</div><div class="line">区分状态时，选中时的颜色，添加selected后缀</div><div class="line">区分状态时，不可用时的颜色，添加disable后缀</div></pre></td></tr></table></figure>
<h3 id="drawable的命名"><a href="#drawable的命名" class="headerlink" title="drawable的命名"></a>drawable的命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">图标类，添加ic前缀</div><div class="line">背景类，添加bg前缀</div><div class="line">分隔类，添加div前缀</div><div class="line">默认类，添加def前缀</div><div class="line">区分状态时，默认状态，添加normal后缀</div><div class="line">区分状态时，按下时的状态，添加pressed后缀</div><div class="line">区分状态时，选中时的状态，添加selected后缀</div><div class="line">区分状态时，不可用时的状态，添加disable后缀</div><div class="line">多种状态的，添加selector后缀（一般为ListView的selector或按钮的selector）</div></pre></td></tr></table></figure>
<h3 id="动画文件命名"><a href="#动画文件命名" class="headerlink" title="动画文件命名"></a>动画文件命名</h3><p>动画类型_动画方向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fade_in，淡入</div><div class="line">fade_out，淡出</div><div class="line">push_down_in，从下方推入</div><div class="line">push_down_out，从下方推出</div><div class="line">slide_in_from_top，从头部滑动进入</div><div class="line">zoom_enter，变形进入</div><div class="line">shrink_to_middle，中间缩小</div></pre></td></tr></table></figure>
<h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><ol>
<li>文件头注释</li>
</ol>
<p>文件顶部统一添加版权声明，声明的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Copyright (c) 2015. Keegan小钢 Inc. All rights reserved.</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li>类和接口注释<br>类和接口统一添加javadoc注释，格式如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 类或接口的描述信息</div><div class="line"> *</div><div class="line"> * @author $&#123;USER&#125;</div><div class="line"> * @date $&#123;DATE&#125;</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li>方法注释<br>下面几种方法，都必须添加javadoc注释，说明该方法的用途和参数说明，以及返回值的说明。<ul>
<li>接口中定义的所有方法</li>
<li>抽象类中自定义的抽象方法</li>
<li>抽象父类的自定义公用方法</li>
<li>工具类的公用方法</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 登录</div><div class="line"> *</div><div class="line"> * @param loginName 登录名</div><div class="line"> * @param password  密码</div><div class="line"> * @param listener  回调监听器</div><div class="line"> */</div><div class="line">public void login(String loginName, String password, ActionCallbackListener&lt;Void&gt; listener);</div></pre></td></tr></table></figure>
<ol>
<li>变量和常量注释</li>
</ol>
<p>下面几种情况下的常量和变量，都要添加注释说明，优先采用右侧//来注释，若注释说明太长则在上方添加注释。</p>
<ul>
<li>接口中定义的所有常量</li>
<li>公有类的公有常量</li>
<li>枚举类定义的所有枚举常量</li>
<li>实体类的所有属性变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static final int TYPE_CASH = 1; // 现金券</div><div class="line">public static final int TYPE_DEBIT = 2; // 抵扣券</div><div class="line">public static final int TYPE_DISCOUNT = 3; // 折扣券</div><div class="line"></div><div class="line">private int id;                // 券id</div><div class="line">private String name;           // 券名称</div><div class="line">private String introduce;      // 券简介</div></pre></td></tr></table></figure>
<p>注：部分信息来源于网络，若有使用不当，请联系！感谢！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android移动app架构设计浅谈]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/21/Android%E7%A7%BB%E5%8A%A8app%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原    址:<a href="https://m.aliyun.com/yunqi/articles/11876?spm=5176.100239.0.0.9l3OVA" target="_blank" rel="external"> [ 架构篇 ] Android 移动 app 架构设计浅谈</a></p>
<p>作    者:<a href="https://m.aliyun.com/yunqi/users/1895759156739057?spm=5176.100239.0.0.ZbMlP9" target="_blank" rel="external">hudan2714 ( 云溪社区 ) </a></p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>架构，又名软件架构，是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。</p>
</blockquote>
<h3 id="软件架构设计目标"><a href="#软件架构设计目标" class="headerlink" title="软件架构设计目标"></a>软件架构设计目标</h3><ol>
<li>可靠性（Reliable）。软件架构的可靠是产品设计的前提。 </li>
<li>安全性（Secure）。软件架构的安全性是产品可持续发展的条件。 </li>
<li>可扩展性（Scalable）。软件架构必须能够不同的功能需求情况下，支持可扩散性。 </li>
<li>可定制化（Customizable）。同样的一套软件，可以根据客户群的不同和市场需求的变化进行调整。 </li>
<li>可伸缩 （Extensible）。在新技术出现的时候，一个软件架构应当允许导入新技术，从而对现有系统进行功能和性能的扩展。 </li>
<li>可维护性（Maintainable）。软件系统的维护包括两方面，一是排除现有的错误，二是将新的软件需求反映到现有系统中去。一个易于维护的系统可以有效地降低技术支持的花费。</li>
</ol>
<p>架构是项目形成到一定阶段的趋势。是对整个产品是否合格的有效保证。对于很多项目设计人员，<strong>在不考虑产品本身，不考虑团队，不考虑时间周期的前提下，一味的强调软件构架，是不合理的，也不利于整个产品的发展</strong>。当然，一个好的项目架构师，是很能清楚，项目在不同阶段，所需要处理的不同职责。能够最大限度的发挥能效，将产品周期，与功能模块做出最合适的匹配规划，这才是一个架构师所必须追求的。</p>
<p>以下是个人对Android移动项目架构设计简单的经验之谈。欢迎与更多的朋友交流，若有疑问，或不合理之处，都可以随时交流。</p>
<h3 id="从项目功能开始"><a href="#从项目功能开始" class="headerlink" title="从项目功能开始"></a><strong>从项目功能开始</strong></h3><p>每一个项目架构师，在拿到一个新项目的时候，都会不同的着重点。在项目规划风格上，都会有不同的考虑。而我个人在着手项目时，都会从功能上去着手。先了解项目整体的功能模块，区分出主体功能模块有哪些类，对不同的功能模块进行细致的划分。这是我开始的第一步。因为，只有对项目整体有个把握，才能更快的对项目有了解，才能知道怎样去合理安排项目的研发，才能更好的去安排项目进度流程，和人员的安排调度。</p>
<p>功能划分之后，接下来就是项目的实际研发阶段。这个阶段就是项目实际进展阶段了。必须要有合理的安排调度，才是保证项目的高效。比如：我们进行的大部分项目，都有网络交互的部分，也有本地功能部分，还有一些基础数据模块部分，这些功能必须要有合理的时间安排。</p>
<p>项目研发之前，几点提要说明： </p>
<ol>
<li>团队之间统一编码规范。 </li>
<li>需求文档统一管理。 </li>
<li>多人协同开发，根据文档开发（一切以文档为主）。</li>
</ol>
<p><strong>项目以功能划分，功能以模块划分</strong>。在项目初期，除了产品原型可能是提前设计成形外，其它的项目文档都还未出来，产品也是有个确定功能，但是细节文档还未成形，这个时候已经是项目开始阶段，即使在有一些文档还未成形前，也可以开始项目的基础开发了。</p>
<h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a><strong>功能模块</strong></h3><p><strong>网络模块，数据库存储模块，数据加密模块，数据缓存模块，数据解析器，日志信息收集模块等</strong>。这些都是项目的基本模块，也可以独立于功能的模块，可以提前开发，测试。便于后期直接使用。</p>
<h3 id="移动安全机制"><a href="#移动安全机制" class="headerlink" title="移动安全机制"></a><strong>移动安全机制</strong></h3><p>做过移动项目的都知道，移动安全是项目前期需要考虑的一个重要环节。所以，在项目之初，就应该对自身的数据存储做必要的数据加密，对网络传输的数据进行必要加密。<br>移动数据加密分为两种：<br>一种是本地数据加密，只是本机存储的信息，本地加密保存。<br>一种是网络传输数据加密，这是涉及到网络协议，与服务器之间的加密协议。</p>
<p>本地加密方式有很多种： </p>
<ol>
<li>MD5加密算法。 MD5是个不可逆的算法 没有解密的算法（目前据说也有方法破解）。 </li>
<li>DES加密。可逆。 </li>
<li>RSA加密。可逆 </li>
</ol>
<p>对于不是需要绝对足够安全的项目，以上三种加密足够用。</p>
<p>网络数据加密主要从两个方面考虑： </p>
<ol>
<li>保证API的调用者是经过自己授权的App； </li>
<li>保证数据传输的安全。</li>
</ol>
<p>保证API是自己授权的App，采用设计签名的方式。对每个移动平台，都会有不同的AppKey和AppSecret。在调用API时，将AppKey加入到请求参数中，然后，把AppSecret与其它参数，通过某种签名算法生成一个签名字符串，把数据传输给服务器端。而服务器根据AppKey和AppSecret，用相同的签名算法生成的签名与之一致，则说明请求安全。签名算法可以采用自己规定的一套签名算法（更安全），也可采用外部公开的签名算法（初期使用）。另外，在参数列表中再加入一个时间戳，还可以防止部分重放攻击。<br>对于数据传输安全，可以使用HTTPS。因为HTTPS添加了ssl安全协议。但是android项目开发，大部分都没有去实现。主要是没有对ssl证书进行安全性检查。</p>
<h3 id="API协议标准化"><a href="#API协议标准化" class="headerlink" title="API协议标准化"></a><strong>API协议标准化</strong></h3><p>项目开发，协议一定需要标准化，并且需要严格执行接口协议。完成每个版本的协议文档更新，方便后续使用者查看。<br>目前协议都是使用Json格式传输。需要注意的是，JSON数据和实体对象在传输时，序列化和反序列化因平台不同，会产生不同的区别。比如：JSON库将Date类型的数据序列化时会转为String，传输到服务器时，服务器反序列化经常会出现不同的结果。</p>
<h3 id="API接口版本控制"><a href="#API接口版本控制" class="headerlink" title="API接口版本控制"></a><strong>API接口版本控制</strong></h3><p>一般解决接口更新变化问题，我们采取的做法是，每个API接口，都会带有协议的版本，若是协议发生改变，则版本号相应改变，在处理数据请求时，则可以根据不同协议的版本进行处理，解决了版本的兼容性问题。</p>
<h3 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a><strong>架构分层</strong></h3><p>架构设计，主要的目的就解决功能和代码的复用，减少重复开发，方便功能扩展，降低功能和代码层级的耦合。<br>目前移动设计框架，主流的有三种：MVC、MVP、MVVM三种方式（具体详情，<a href="http://blog.csdn.net/hudan2714/article/details/50990359" target="_blank" rel="external">请参考框架小结</a>）。<br>任何的框架设计都是在满足开发需求为前提，千万不能为了设计而设计，不要问我这三种设计，哪种最合适开发？如果你还这样去问，那只能说你还不是一个成熟的产品设计者。三种框架都有各自的利弊，是应该在不同的阶段和不同人员的配备情况下，选择更合理的方式。我曾经参与一个创业团队开发视频项目，前期只有两个移动开发人员，项目时间紧的情况下。项目负责人就只会天天在那里修改需求，谈项目架构。初期的项目，在产品验证功能阶段，在项目需要快速迭代阶段，应该使用最有效的框架，才是合理的选择。而且项目的发展，一定是随着项目功能的确立，产品的定型和需求完善，对项目本身的稳定性和性能的要求，才是一个逐步提高的过程。想要一步达到完美的产品，不仅是在设计上很难做到，而且在目前所有的产品中，都是很难达到的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">任何框架都是在此三层数据模型上。View，Model，Controller/Presenter/ViewModel。上层View：用户行为操作，数据结果显示。底层Model：数据处理，提供显示数据。中间的就是业务逻辑层。</div></pre></td></tr></table></figure>
<p>Android项目设计，重在对项目的理解，重在对需求功能的划分，重在对团队合理分配。高效的产出，快速的迭代，才是移动项目的生存之道。</p>
<h3 id="Android测试"><a href="#Android测试" class="headerlink" title="Android测试"></a><strong>Android测试</strong></h3><p>移动开发，为保证质量产出，需要进行必须要逻辑测试。而在项目框架设计中，简单的mvc模式，若view和model中混有业务逻辑，则不利于接口测试。所以，在后续版本的迭代中，需要逐渐使用mvp或mvvm框架设计，让view和model与业务逻辑实现完整的解耦合。</p>
<h3 id="Android环境"><a href="#Android环境" class="headerlink" title="Android环境"></a><strong>Android环境</strong></h3><p>自从Android提供了更高效稳定的android studio之后，对于开发者来说是更便捷，更方便了。在android gradle多平台打包。proguard代码优化，混淆。随着android studio的越来越强大，越来越稳定，相信开发android项目也会变得越来越so easy了。</p>
<h3 id="总结在最后"><a href="#总结在最后" class="headerlink" title="总结在最后"></a><strong>总结在最后</strong></h3><p>一个合格的移动项目架构师，必须是在不断的项目开发中成长的。不仅仅懂得项目的高效快速部署，也懂得怎样合理优化团队，才能有更优质的产品产出。移动产品，是一个快速产出的产品，怎样做出适合团队产出的产品，才是移动架构师的学习之道。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ 实用的 atom 插件]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/19/%E5%AE%9E%E7%94%A8%E7%9A%84-atom-%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>sublime text 确实是前端开发的神器，但入坑三四年一直使用，难免会有些视觉疲劳，最近折腾起了atom编辑器，发现这货也是前端开发的利器，没错，就是利器。</p>
</blockquote>
<p>俗话说，人靠衣装，佛靠金装，再好的编辑器也不会在软件本身集成各种插件，第三方支持等，于是就需要我们针对自己的日常开发选择一些常用的、实用的插件，最大程度的提高日常开发效率。</p>
<h3 id="Ⅰ：atom-是什么"><a href="#Ⅰ：atom-是什么" class="headerlink" title="Ⅰ：atom 是什么"></a>Ⅰ：atom 是什么</h3><p>Atom 是github在2015年开源的一款编辑器，相比较于sublime text，最吸引人的莫过于 Atom 是基于 Chromium Embedded Framework，基本上就是个 web app，源码都是 CoffeeScript 写的，连界面都可以用 CSS 来自定义。</p>
<p>Atom 的扩展也是用 JS 或者 Coffee 在 Node + webkit 的环境下开发，并且可以使用 npm 的包，这对于前端和 Node 开发者是很有诱惑力的，需要的话完全可以把 Atom 打造成一个 IDE。</p>
<p>官网：<a href="https://atom.io/" target="_blank" rel="external">atom官网</a>，可以在官网下载进行安装，安装过程很简单，这里就不进行赘述了。</p>
<h3 id="Ⅱ：好用的-atom-插件"><a href="#Ⅱ：好用的-atom-插件" class="headerlink" title="Ⅱ：好用的 atom 插件"></a>Ⅱ：好用的 atom 插件</h3><ul>
<li>点击菜单里面的 Preferences（抑或使用快捷键 <code>cmd + ,</code>），点击 install 选项，输入要安装的插件，点击安装即可。</li>
<li>通过 Preferences-install 来安装插件经常会遇到问题，好在atom做的很人性化，我们可以通过终端来进行插件安装，命令为 apm，是不是有点眼熟，这个基于atom 的一个包管理器，他过这个命令可以愉快的他过终端来安装你想要的插件啦，是不是很方便</li>
</ul>
<p>apm 安装的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 安装指定包</div><div class="line">$ apm install &lt;package_name&gt;</div><div class="line"># 安装指定版本的包</div><div class="line">$ apm install &lt;package_name&gt;@&lt;package_version&gt;</div><div class="line"># 查找包</div><div class="line">$ apm search &lt;package_name&gt;</div><div class="line"># 查看包更多详情</div><div class="line">$ apm view &lt;packge_name&gt;</div><div class="line"># 查看当前已安装包(包含atom里面自带的一些包和你自己安装的包)</div><div class="line">$ apm list</div></pre></td></tr></table></figure>
<p>apm list 里面我安装的如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/Users/liucui/.atom/packages</div><div class="line">├── activate-power-mode@0.5.2</div><div class="line">├── atom-beautify@0.29.7</div><div class="line">├── autocomplete-paths@1.0.2</div><div class="line">├── color-picker@2.1.1</div><div class="line">├── docblockr@0.7.3</div><div class="line">├── emmet@2.4.3</div><div class="line">├── file-icons@1.7.11</div><div class="line">├── git-plus@5.13.4</div><div class="line">├── javascript-snippets@1.2.1</div><div class="line">├── linter@1.11.4</div><div class="line">├── linter-jshint@2.1.0</div><div class="line">├── markdown-scroll-sync@2.1.2</div><div class="line">├── markdown-table-formatter@2.8.3</div><div class="line">├── minimap@4.23.5</div><div class="line">├── minimap-find-and-replace@4.5.1</div><div class="line">├── terminal-panel@1.14.1</div><div class="line">└── vim-mode@0.65.1</div></pre></td></tr></table></figure>
<p>那么到底有哪些好用的、必备的插件呢，下面就来给大家推荐几个所常用的。</p>
<h4 id="1、emmet"><a href="#1、emmet" class="headerlink" title="1、emmet"></a>1、emmet</h4><p>前端开发都懂得的，html 代码补全，使用方法还有文档可以查阅<a href="http://docs.emmet.io/" target="_blank" rel="external">emmet使用文档</a>。</p>
<p>下载链接：<a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a></p>
<h4 id="2、file-icons"><a href="#2、file-icons" class="headerlink" title="2、file-icons"></a>2、file-icons</h4><p>不同格式的文本现实不同颜色和类型的图标，便于分辨。</p>
<p><img src="http://images.iqianduan.net/file_icons_bg.png" alt="file_icons_bg"></p>
<p>下载链接：<a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a></p>
<p>另外：siti-ui 主题也可以以不同的颜色和类型图标展示不同类型文件，大家可以下载试试。</p>
<h4 id="3、color-picker"><a href="#3、color-picker" class="headerlink" title="3、color-picker"></a>3、color-picker</h4><p>顾名思义，颜色采集器，非常清晰好用。快捷键 cmd+shift+code 启动。</p>
<p><img src="http://images.iqianduan.net/color_picker_bg.png" alt="color-picker"></p>
<p>下载链接：<a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a></p>
<h4 id="4、atom-beautify"><a href="#4、atom-beautify" class="headerlink" title="4、atom-beautify"></a>4、atom-beautify</h4><p>美化格式插件，规范缩进，删除多余空行等等。快捷键 ctrl+option+b 启动使用。</p>
<p>下载链接：<a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a></p>
<h4 id="5、markdown-scroll-sync"><a href="#5、markdown-scroll-sync" class="headerlink" title="5、markdown-scroll-sync"></a>5、markdown-scroll-sync</h4><p>atom 自带markdown 预览功能，快捷键 ctrl+shift+m会打开两个面板的视图，但文档太长的时候，不会跟着同步滚动，这个插件就是做这个用的，滚动文档的时候预览内容同步滚动。</p>
<p><img src="http://images.iqianduan.net/markdown_scroll_sync_bg.gif" alt="markdown-scroll-sync"></p>
<p>下载链接：<a href="https://atom.io/packages/markdown_scroll_sync" target="_blank" rel="external">markdown-scroll-sync</a></p>
<h4 id="6、minimap"><a href="#6、minimap" class="headerlink" title="6、minimap"></a>6、minimap</h4><p>编辑器右侧小面板，快捷展示当前编辑的内容在整个文档中的位置。</p>
<p><img src="http://images.iqianduan.net/minimap.png" alt="minimap"></p>
<p>下载链接：<a href="https://github.com/atom-minimap/minimap" target="_blank" rel="external">minimap</a></p>
<h4 id="7、docblocker"><a href="#7、docblocker" class="headerlink" title="7、docblocker"></a>7、docblocker</h4><p>便捷的添加注释代码，/** 按tab键即添加注释代码快。</p>
<p><img src="http://images.iqianduan.net/docblocker_bg.gif" alt="docblocker"></p>
<p>下载链接：<a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblocker</a></p>
<h4 id="8、terminal-panel"><a href="#8、terminal-panel" class="headerlink" title="8、terminal-panel"></a>8、terminal-panel</h4><p>快速调取使用终端面板，快捷键 『ctrl+`』 启动，底部工具条的 + 也可以点击展示终端面板。</p>
<p><img src="http://images.iqianduan.net/terminal_panel_bg.gif" alt="terminal-panel"></p>
<p>下载链接：<a href="https://atom.io/packages/terminal-panel" target="_blank" rel="external">terminal-panel</a></p>
<h4 id="9、javascript-snippets"><a href="#9、javascript-snippets" class="headerlink" title="9、javascript-snippets"></a>9、javascript-snippets</h4><p>js/nodejs 方法快捷输入，不过有些方法的简写需要去文档里面熟悉一下，多用几次你会发现真的可以提高效率。</p>
<p><img src="http://images.iqianduan.net/javascript_snippets_bg.gif" alt="javascript-snippets"></p>
<p>下载链接：<a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">javascript-snippets</a></p>
<h4 id="10、autocomplete-paths"><a href="#10、autocomplete-paths" class="headerlink" title="10、autocomplete-paths"></a>10、autocomplete-paths</h4><p>代码提示补全插件，</p>
<p><img src="http://images.iqianduan.net/autocomplete_paths.gif" alt="autocomplete-paths"></p>
<p>下载地址：<a href="https://atom.io/packages/autocomplete-paths" target="_blank" rel="external">autocomplete-paths</a></p>
<h4 id="11、linter"><a href="#11、linter" class="headerlink" title="11、linter"></a>11、linter</h4><p>代码风格检查工具</p>
<p><img src="http://images.iqianduan.net/code_linter_bg.gif" alt="linter"></p>
<blockquote>
<p>单单装了linter 还不行，我们要针对自己使用的语言不同去安装不同的语言支持，例如，我装了js的检查工具：linter-jshint，大家可以根据需要自行安装，<a href="http://atomlinter.github.io/" target="_blank" rel="external">语言风格审查列表</a></p>
</blockquote>
<p>下载链接：<a href="https://atom.io/packages/linter" target="_blank" rel="external">linter</a></p>
<h4 id="12、vim-mode"><a href="#12、vim-mode" class="headerlink" title="12、vim-mode"></a>12、vim-mode</h4><p>atom 的vim 模式，安装后按ESC键即启用vim 模式，在另一篇文章 <a href="http://iqianduan.net/blog/the-editor-vim-mode" target="_blank" rel="external">编辑器的vim模式使用</a> 中，有详细的介绍，让你的 Atom 用起来超乎你的想象。</p>
<h4 id="13、activate-power-mode"><a href="#13、activate-power-mode" class="headerlink" title="13、activate-power-mode"></a>13、activate-power-mode</h4><p>这个插件纯粹是用来炫技的，只适合拿来玩玩，长时间使用，我相信你的视力一定会下降的，不要怪我没提醒你哦。</p>
<p><img src="http://images.iqianduan.net/activate_power_mode_bg.gif" alt="activate-power-mode"></p>
<p>下载链接：<a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">activate-power-mode</a></p>
<h3 id="Ⅲ：另附–常用快捷键"><a href="#Ⅲ：另附–常用快捷键" class="headerlink" title="Ⅲ：另附–常用快捷键"></a>Ⅲ：另附–常用快捷键</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>shift + cmd + p</td>
<td>命令版(可以看到所有快捷键)</td>
</tr>
<tr>
<td>alt + shift + s</td>
<td>查看文件相关语言的代码块(snippet)</td>
</tr>
<tr>
<td>cmd + f</td>
<td>搜索当前文件</td>
</tr>
<tr>
<td>cmd+shift+f</td>
<td>搜索整个项目</td>
</tr>
<tr>
<td>alt + cmd + [</td>
<td>代码折叠, 我不喜欢用</td>
</tr>
<tr>
<td>alt + cmd + ]</td>
<td>代码展开</td>
</tr>
<tr>
<td>cmd + /</td>
<td>快速注释当前行</td>
</tr>
<tr>
<td>cmd + [</td>
<td>代码左缩进</td>
</tr>
<tr>
<td>cmd + ]</td>
<td>代码右缩进</td>
</tr>
<tr>
<td>cmd + b</td>
<td>快速跳转打开的文件</td>
</tr>
<tr>
<td>alt+B或alt+left</td>
<td>光标按单词左移</td>
</tr>
<tr>
<td>alt+F或alt+right</td>
<td>光标按单词右移</td>
</tr>
<tr>
<td>cmd+right或ctrl+e</td>
<td>光标移动到行最右最后一个非空字符</td>
</tr>
<tr>
<td>cmd+left或ctrl+a</td>
<td>光标移动到行最左第一个非空字符</td>
</tr>
<tr>
<td>cmd + up</td>
<td>光标移动到文件头</td>
</tr>
<tr>
<td>cmd + down</td>
<td>贯标移动到文件尾</td>
</tr>
<tr>
<td>ctrl + g</td>
<td>行跳转, 语法为行号:列号</td>
</tr>
<tr>
<td>cmd + r</td>
<td>按当前文件方法跳转</td>
</tr>
<tr>
<td>cmd + t</td>
<td>全项目模糊查找关键字并跳转</td>
</tr>
<tr>
<td>ctrl + m</td>
<td>按照括号匹配跳转</td>
</tr>
<tr>
<td>cmd + F2或cmd+fn+f2</td>
<td>给某一行设置书签显示在行号右侧</td>
</tr>
</tbody>
</table>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Pug Templates With Express]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/19/Using-Pug-Templates-With-Express/</url>
      <content type="html"><![CDATA[<p>In my <a href="http://funkyjavascript.com/web-dev-with-express/" target="_blank" rel="external">first post about express</a>, I showed you a simple hello world example. All the app did was show the text “Wazzup?”</p>
<p>If we want to make web applications, we need to generate some HTML, and if we want to be able to programmatically customize that HTML while it’s still on the server we need a templating language like <a href="https://github.com/pugjs" target="_blank" rel="external">Pug</a>.</p>
<p><a href="https://github.com/pugjs/pug/issues/2184" target="_blank" rel="external">Pug used to be called Jade</a>. In fact, there doesn’t seem to be a documentation site with the new name yet. Looks like <a href="http://jade-lang.com/" target="_blank" rel="external">jade-lang.com</a> is still the spot to go for docs.</p>
<p>Whatever its name is, pug or jade, its a simple templating language you can use to generate HTML. If you’d like to follow along with this example I’m about to throw down, just create a new Node project and install <code>express</code> and <code>pug</code>.</p>
<p>Next, let’s create a super-simple template:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html  </div><div class="line">  head</div><div class="line">    title= title</div><div class="line">  body</div><div class="line">    h1= message</div></pre></td></tr></table></figure>
<p>Create a <code>views</code> directory and save the above file as <code>views/index.pug</code>.</p>
<p>Now let’s make our <code>index.js</code> file:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;)  </div><div class="line">var app = express()  </div><div class="line">app.set(&apos;view engine&apos;, &apos;pug&apos;)</div><div class="line"></div><div class="line">app.get(&apos;/&apos;, function (req, res) &#123;  </div><div class="line">    res.render(</div><div class="line">        &apos;index&apos;,</div><div class="line">        &#123; title: &apos;Hey Hey Hey!&apos;, message: &apos;Yo Yo&apos;&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.listen(3000, function () &#123;  </div><div class="line">    console.log(&apos;Example app listening on port 3000!&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>The HTML that gets rendered to <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> should look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;  </div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;Hey Hey Hey!&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Yo Yo&lt;/h1&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>Pretty slick right? Instead of having to write brackets as well as opening and closing tags, you can just write the tag name, and that’s it! Any dynamic parts you need can just be handed to the rendering engine as an object.</p>
<p>Pug is a language all it’s own. There’s lots to take advantage of here. I’ll go into the details in a later post, maybe a few posts. :)</p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Express application generator]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/19/Express-application-generator/</url>
      <content type="html"><![CDATA[<blockquote>
<p>花了一天的时间学习了下nodejs 及 nodejs 框架express基础知识</p>
<p>分享下 express-generator </p>
</blockquote>
<h4 id="指令"><a href="#指令" class="headerlink" title="指令:"></a>指令:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//用应用程序生成器工具</div><div class="line">$ npm install express-generator -g</div><div class="line"></div><div class="line">//添加依赖:</div><div class="line">$ cd myapp</div><div class="line">$ npm install</div><div class="line"></div><div class="line">//运行程序</div><div class="line">$ DEBUG=myapp:* npm start</div></pre></td></tr></table></figure>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志:"></a>日志:</h4><blockquote>
<p>本机执行指令的结果</p>
</blockquote>
<p>Last login: Sun Mar 19 10:23:16 on ttys000<br>AlexdeMacBook-Air:~ apple$ cd /Users/apple/Documents/nodejs学习/02_expressjs_INTA/02_express_generator<br>AlexdeMacBook-Air:02_express_generator apple$ npm install express-generator -g<br>/usr/local/bin/express -&gt; /usr/local/lib/node_modules/express-generator/bin/express<br>/usr/local/lib<br>└── express-generator@4.14.1 </p>
<p>AlexdeMacBook-Air:02_express_generator apple$ express -h</p>
<p>  Usage: express [options] [dir]</p>
<p>  Options:</p>
<pre><code>-h, --help           output usage information
    --version        output the version number
-e, --ejs            add ejs engine support
    --pug            add pug engine support
    --hbs            add handlebars engine support
-H, --hogan          add hogan.js engine support
-v, --view &lt;engine&gt;  add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)
-c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)
    --git            add .gitignore
-f, --force          force on non-empty directory
</code></pre><p>AlexdeMacBook-Air:02_express_generator apple$ express –view=pug yigelaobai</p>
<p>   create : yigelaobai<br>   create : yigelaobai/package.json<br>   create : yigelaobai/app.js<br>   create : yigelaobai/public<br>   create : yigelaobai/public/javascripts<br>   create : yigelaobai/public/images<br>   create : yigelaobai/public/stylesheets<br>   create : yigelaobai/public/stylesheets/style.css<br>   create : yigelaobai/routes<br>   create : yigelaobai/routes/index.js<br>   create : yigelaobai/routes/users.js<br>   create : yigelaobai/views<br>   create : yigelaobai/views/index.pug<br>   create : yigelaobai/views/layout.pug<br>   create : yigelaobai/views/error.pug<br>   create : yigelaobai/bin<br>   create : yigelaobai/bin/www</p>
<p>   install dependencies:<br>     $ cd yigelaobai &amp;&amp; npm install</p>
<p>   run the app:<br>     $ DEBUG=yigelaobai:* npm start</p>
<p>AlexdeMacBook-Air:02_express_generator apple$ cd yigelaobai<br>AlexdeMacBook-Air:yigelaobai apple$ npm install<br>yigelaobai@0.0.0 /Users/apple/Documents/nodejs学习/02_expressjs_INTA/02_express_generator/yigelaobai<br>├─┬ body-parser@1.16.1<br>│ ├── bytes@2.4.0<br>│ ├── content-type@1.0.2<br>│ ├── debug@2.6.1<br>│ ├── depd@1.1.0<br>│ ├─┬ http-errors@1.5.1<br>│ │ ├── inherits@2.0.3<br>│ │ ├── setprototypeof@1.0.2<br>│ │ └── statuses@1.3.1<br>│ ├── iconv-lite@0.4.15<br>│ ├─┬ on-finished@2.3.0<br>│ │ └── ee-first@1.1.1<br>│ ├── qs@6.2.1<br>│ ├─┬ raw-body@2.2.0<br>│ │ └── unpipe@1.0.0<br>│ └─┬ type-is@1.6.14<br>│   ├── media-typer@0.3.0<br>│   └─┬ mime-types@2.1.14<br>│     └── mime-db@1.26.0<br>├─┬ cookie-parser@1.4.3<br>│ ├── cookie@0.3.1<br>│ └── cookie-signature@1.0.6<br>├─┬ debug@2.6.3<br>│ └── ms@0.7.2<br>├─┬ express@4.14.1<br>│ ├─┬ accepts@1.3.3<br>│ │ └── negotiator@0.6.1<br>│ ├── array-flatten@1.1.1<br>│ ├── content-disposition@0.5.2<br>│ ├─┬ debug@2.2.0<br>│ │ └── ms@0.7.1<br>│ ├── encodeurl@1.0.1<br>│ ├── escape-html@1.0.3<br>│ ├── etag@1.7.0<br>│ ├─┬ finalhandler@0.5.1<br>│ │ └─┬ debug@2.2.0<br>│ │   └── ms@0.7.1<br>│ ├── fresh@0.3.0<br>│ ├── merge-descriptors@1.0.1<br>│ ├── methods@1.1.2<br>│ ├── parseurl@1.3.1<br>│ ├── path-to-regexp@0.1.7<br>│ ├─┬ proxy-addr@1.1.3<br>│ │ ├── forwarded@0.1.0<br>│ │ └── ipaddr.js@1.2.0<br>│ ├── qs@6.2.0<br>│ ├── range-parser@1.2.0<br>│ ├─┬ send@0.14.2<br>│ │ ├─┬ debug@2.2.0<br>│ │ │ └── ms@0.7.1<br>│ │ ├── destroy@1.0.4<br>│ │ └── mime@1.3.4<br>│ ├── serve-static@1.11.2<br>│ ├── utils-merge@1.0.0<br>│ └── vary@1.1.0<br>├─┬ morgan@1.7.0<br>│ ├── basic-auth@1.0.4<br>│ ├─┬ debug@2.2.0<br>│ │ └── ms@0.7.1<br>│ └── on-headers@1.0.1<br>├─┬ pug@2.0.0-beta11<br>│ ├─┬ pug-code-gen@1.1.1<br>│ │ ├─┬ constantinople@3.1.0<br>│ │ │ ├── acorn@3.3.0<br>│ │ │ └── is-expression@2.1.0<br>│ │ ├── doctypes@1.1.0<br>│ │ ├── js-stringify@1.0.2<br>│ │ ├── pug-attrs@2.0.2<br>│ │ ├── pug-error@1.3.2<br>│ │ ├── void-elements@2.0.1<br>│ │ └─┬ with@5.1.1<br>│ │   └─┬ acorn-globals@3.1.0<br>│ │     └── acorn@4.0.11<br>│ ├─┬ pug-filters@2.1.1<br>│ │ ├─┬ clean-css@3.4.25<br>│ │ │ ├─┬ commander@2.8.1<br>│ │ │ │ └── graceful-readlink@1.0.1<br>│ │ │ └─┬ source-map@0.4.4<br>│ │ │   └── amdefine@1.0.1<br>│ │ ├─┬ jstransformer@1.0.0<br>│ │ │ ├── is-promise@2.1.0<br>│ │ │ └─┬ promise@7.1.1<br>│ │ │   └── asap@2.0.5<br>│ │ ├── pug-walk@1.1.1<br>│ │ ├─┬ resolve@1.3.2<br>│ │ │ └── path-parse@1.0.5<br>│ │ └─┬ uglify-js@2.8.13<br>│ │   ├── source-map@0.5.6<br>│ │   ├── uglify-to-browserify@1.0.2<br>│ │   └─┬ yargs@3.10.0<br>│ │     ├── camelcase@1.2.1<br>│ │     ├─┬ cliui@2.1.0<br>│ │     │ ├─┬ center-align@0.1.3<br>│ │     │ │ ├─┬ align-text@0.1.4<br>│ │     │ │ │ ├─┬ kind-of@3.1.0<br>│ │     │ │ │ │ └── is-buffer@1.1.5<br>│ │     │ │ │ ├── longest@1.0.1<br>│ │     │ │ │ └── repeat-string@1.6.1<br>│ │     │ │ └── lazy-cache@1.0.4<br>│ │     │ ├── right-align@0.1.3<br>│ │     │ └── wordwrap@0.0.2<br>│ │     ├── decamelize@1.2.0<br>│ │     └── window-size@0.1.0<br>│ ├─┬ pug-lexer@3.0.0<br>│ │ ├─┬ character-parser@2.2.0<br>│ │ │ └─┬ is-regex@1.0.4<br>│ │ │   └─┬ has@1.0.1<br>│ │ │     └── function-bind@1.1.0<br>│ │ └─┬ is-expression@3.0.0<br>│ │   └── acorn@4.0.11<br>│ ├── pug-linker@2.0.2<br>│ ├─┬ pug-load@2.0.5<br>│ │ └── object-assign@4.1.1<br>│ ├─┬ pug-parser@2.0.2<br>│ │ └── token-stream@0.0.1<br>│ ├── pug-runtime@2.0.3<br>│ └── pug-strip-comments@1.0.2<br>└── serve-favicon@2.3.2 </p>
<p>AlexdeMacBook-Air:yigelaobai apple$ DEBUG=yigelaobai:* npm start</p>
<blockquote>
<p>yigelaobai@0.0.0 start /Users/apple/Documents/nodejs学习/02_expressjs_INTA/02_express_generator/yigelaobai<br>node ./bin/www</p>
</blockquote>
<p>  yigelaobai:server Listening on port 3000 +0ms<br>GET / 200 564.023 ms - 170<br>GET /stylesheets/style.css 200 6.483 ms - 111<br>GET /favicon.ico 404 35.647 ms - 1665</p>
]]></content>
      
        <categories>
            
            <category> nodejs </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ nodejs 学习]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/18/nodejs-%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.intalesson.com/" target="_blank" rel="external">推荐:http://www.intalesson.com/</a></p>
</blockquote>
<p><a href="https://pan.baidu.com/s/1kVv61NL" target="_blank" rel="external">手巧代码</a> </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[node 升级 node.js]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/17/node-%E5%8D%87%E7%BA%A7-node-js/</url>
      <content type="html"><![CDATA[<h3 id="node-升级-node-js"><a href="#node-升级-node-js" class="headerlink" title="node 升级 node.js"></a>node 升级 node.js</h3><p>第一步，先查看本机node.js版本：</p>
<pre><code>$ node -v
</code></pre><p>第二步，清除node.js的cache：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm cache clean -f</div></pre></td></tr></table></figure>
<p>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”<br>    $ sudo npm install -g n</p>
<p>第四步，安装最新版本的node.js<br>    $ sudo n stable</p>
<p>第五步，再次查看本机的node.js版本：<br>    $ node -v</p>
]]></content>
      
        <categories>
            
            <category> node.js </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ 阿里巴巴 fastjson 爆出远程代码执行高危漏洞]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/17/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-fastjson-%E7%88%86%E5%87%BA%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>官方解决方案: <a href="https://github.com/alibaba/fastjson/wiki/security_update_20170315" target="_blank" rel="external">GitHub-fastjson-security_update_20170315</a></p>
</blockquote>
<h1 id="安全升级公告"><a href="#安全升级公告" class="headerlink" title="安全升级公告"></a>安全升级公告</h1><p>最近发现fastjson在1.2.24以及之前版本存在远程代码执行高危安全漏洞，为了保证系统安全，请升级到1.2.28/1.2.29或者更新版本。</p>
<p>1.2.29是在1.2.28版本上修复了一些大家升级过程中遇到的问题的版本，非安全问题，如果升级到1.2.24~1.2.28以及各种sec01版本的，也是没有安全问题的。</p>
<p>1.2.25/1.2.26/1.2.27都是在升级的过程中修复不兼容问题发布的过度版本，如果你是在此之前升级到这些版本，不用因为这次的安全问题再次升级。</p>
<h2 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h2><h3 id="1-Maven依赖配置更新"><a href="#1-Maven依赖配置更新" class="headerlink" title="1. Maven依赖配置更新"></a>1. Maven依赖配置更新</h3><p>通过maven配置更新，使用最新版本，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2.29&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>注意，版本号1.2.3~1.2.9版本都比1.2.29小，都是需要升级的。</p>
<h3 id="2-直接下载"><a href="#2-直接下载" class="headerlink" title="2. 直接下载"></a>2. 直接下载</h3><p>1.2.28版本下载地址 <a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.29/" target="_blank" rel="external">http://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.29/</a></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-升级遇到不兼容问题怎么办？"><a href="#1-升级遇到不兼容问题怎么办？" class="headerlink" title="1. 升级遇到不兼容问题怎么办？"></a>1. 升级遇到不兼容问题怎么办？</h3><p>1.2.28/1.2.29已经修复了绝大多数兼容问题，但是总会有一些特殊的用法导致不兼容，如果你遇到不兼容问题，通过 <a href="https://github.com/alibaba/fastjson/wiki/incompatible_change_list" target="_blank" rel="external">https://github.com/alibaba/fastjson/wiki/incompatible_change_list</a> 查看不兼容问题，链接的后面提供了遇到不兼容问题之后的使用相应的sec01版本解决办法。</p>
<h3 id="2-升级之后报错autotype-is-not-support"><a href="#2-升级之后报错autotype-is-not-support" class="headerlink" title="2. 升级之后报错autotype is not support"></a>2. 升级之后报错autotype is not support</h3><p>安全升级包禁用了部分autotype的功能，也就是”@type”这种指定类型的功能会被限制在一定范围内使用。如果你使用场景中包括了这个功能，<a href="https://github.com/alibaba/fastjson/wiki/enable_autotype" target="_blank" rel="external">https://github.com/alibaba/fastjson/wiki/enable_autotype</a> 这里有一个介绍如何添加白名单或者打开autotype功能。</p>
<h3 id="3-通过配置打开autotype之后是否存在安全漏洞"><a href="#3-通过配置打开autotype之后是否存在安全漏洞" class="headerlink" title="3. 通过配置打开autotype之后是否存在安全漏洞"></a>3. 通过配置打开autotype之后是否存在安全漏洞</h3><p>在1.2.28/1.2.29以及所有的.sec01版本中，有多重保护，但打开autotype之后仍会存在风险，不建议打开，而是使用一个较小范围的白名单。</p>
<h3 id="4-Android环境使用是否需要升级"><a href="#4-Android环境使用是否需要升级" class="headerlink" title="4. Android环境使用是否需要升级"></a>4. Android环境使用是否需要升级</h3><p>目前未发现漏洞对Android系统产生影响，在Android环境中使用不用升级。</p>
<h3 id="5-升级遇到问题希望提供支持怎么办？"><a href="#5-升级遇到问题希望提供支持怎么办？" class="headerlink" title="5. 升级遇到问题希望提供支持怎么办？"></a>5. 升级遇到问题希望提供支持怎么办？</h3><p>作者愿意帮助大家一起解决问题，如果遇到文档中没说明到的问题，请通过如下方式联系作者：</p>
<ul>
<li>钉钉号 wenshaojin2017</li>
<li>微信号 wenshaojin</li>
<li>微博 <a href="http://weibo.com/wengaotie" target="_blank" rel="external">http://weibo.com/wengaotie</a></li>
</ul>
<h3 id="6-有没有漏洞利用详情可以提供"><a href="#6-有没有漏洞利用详情可以提供" class="headerlink" title="6. 有没有漏洞利用详情可以提供"></a>6. 有没有漏洞利用详情可以提供</h3><p>为了保证更多用户的安全，目前不适合扩散漏洞利用的细节</p>
<h3 id="7-是否有在WAF上检测的办法"><a href="#7-是否有在WAF上检测的办法" class="headerlink" title="7. 是否有在WAF上检测的办法"></a>7. 是否有在WAF上检测的办法</h3><p>检测post内容中是否包含如下字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;@type&quot;</div></pre></td></tr></table></figure>
<p>注意，为了减少误报，包括双引号</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Write For Your Business While Still Sounding Like a Human]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/11/How-to-Write-For-Your-Business-While-Still-Sounding-Like-a-Human/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原    文：<a href="http://blog.meetedgar.com/how-to-write-for-your-business-while-still-sounding-like-a-human/" target="_blank" rel="external">How to Write For Your Business While Still Sounding Like a Human</a></p>
<p>作    者：<a href="https://meetedgar.com" target="_blank" rel="external">MeetEdgar</a></p>
</blockquote>
<p>(It’s also okay if emoji aren’t really appropriate for you and your business, too. They’re not for everyone!)</p>
<p><strong>Your Website:</strong></p>
<p>Products and services may change, but <a href="http://blog.meetedgar.com/branding-101-dont-waste-time-trying-to-be-better-than-your-competition/" target="_blank" rel="external">your company’s overall brand voice</a> should be strong and consistent, and speak directly to your customer or client. That audience’s background and vernacular might be different from the average bear’s, so feel free to show off your expertise a little and lean into the language of your brand on your website!</p>
<p><strong>Your Blog:</strong></p>
<p>If you’re a solopreneur, your blog can be more conversational and more personal than the rest of your website copy. Think of your blog as a place for people to get to know you a little better as you give them news or advice.</p>
<p>(Want to learn more about blogging? You can <a href="https://meetedgar.com/secret-blogging-formula/" target="_blank" rel="external">download MeetEdgar’s Secret Blogging Formula for free!</a>)</p>
<p>Even if you prefer to publish informative articles on your blog, you can still be conversational! Think short, impactful sentences and paragraphs – and find a way to engage readers by asking for their thoughts on implementing your tips.</p>
<p><strong>Industry-specific Stuff:</strong></p>
<p>White papers, B2B publications, and technical sites geared toward a specific industry are spaces to flex your jargon muscles. If your readers are accustomed to technical terms for what you do, you’ll want to show your expertise – so don’t be afraid to use high-level language!</p>
<h3 id="2-Speak-to-real-world-results"><a href="#2-Speak-to-real-world-results" class="headerlink" title="2: Speak to real world results"></a><strong>2: Speak to real world results</strong></h3><p>Everybody has seen what happens when business jargon and adjectives pile up into an unintelligible wall of gobbledygook.</p>
<p>Stuff like this:</p>
<p><em>Buy my product! It offers an amazing, brilliant, luxurious transformation into the totally butt-kicking glamour queen rock star you were always meant to be.</em></p>
<p>Hmmmm. What could this <em>mean</em>?</p>
<p>Do you get a makeover?</p>
<p>Do you learn a martial art so you can actually kick actual butts?</p>
<p>And what’s a glamour queen rock star, anyway? (An ‘80s hair band?)</p>
<p><strong>Don’t leave your adjectives out there by themselves.</strong></p>
<p>Instead, support adjectives by giving them meaning!</p>
<p>Say you want to use the word <em>amazing</em>. Ask yourself these questions.</p>
<p>WHO makes it amazing?</p>
<p>HOW do you get amazing results?</p>
<p>WHAT does amazing feel like?</p>
<p>Let’s see what copy looks like if adjectives are supported with the answers to the above questions.</p>
<p><strong>*Business 101 for Girls Trapped in Fairy Tales*</strong></p>
<p><em>This amazing six week program is run by Starlight, a former princess turned entrepreneur who believes girls can get out of their castle, slay their own dragons, and build an empire with a solid business model that doesn’t rely on pillaging the neighboring kingdom.</em></p>
<p><em>Did you spend your childhood trapped in fancy dresses when your secret idea of glamour was to gallop freely through the forest on horseback? Build your confidence and see yourself quickly transform into the kind of queen that takes charge of your destiny with ease.</em></p>
<p>This school may not exist, but you sure get a picture of what it’s about! And if you’re the ideal client, it probably does sound kind of amazing.</p>
<p>(Like, <em>really</em> amazing. Can we actually go there, please?)</p>
<h3 id="3-Give-brand-stories-context"><a href="#3-Give-brand-stories-context" class="headerlink" title="3: Give brand stories context"></a><strong>3: Give brand stories context</strong></h3><p>Adjectives require <em>support and substance</em> to give them meaning. Brand stories and personal stories require <em>context</em>.</p>
<p>The structure of your brand determines just how much or how little your audience will want to know about you personally.</p>
<p>If you’re a solopreneur, your audience should definitely know your story. Especially for a service-based business, people want to work with someone they know, like, and trust!</p>
<p><img src="http://blog.meetedgar.com/wp-content/uploads/2017/02/Wizard-of-Oz.gif?w=1000" alt="Wizard of Oz"></p>
<p><strong>That doesn’t mean that you need to tell them your whole life story. Context is key.</strong></p>
<p><strong>Business coach?</strong> If your story is about how someone without an MBA can create a successful brand, it’s okay to admit mistakes and vulnerability!  Just share mistakes in the context of what you’ve learned from them. This makes you human and relatable while keeping the focus on the client, and how they benefit from your story (they don’t have to make the same mistakes you did).</p>
<p><strong>Tax professional?</strong> Not a good idea to talk about how much you hated math in high school and that your parents made you study accounting – that doesn’t benefit your client. After all, they are trusting you to do the math for them.</p>
<p>If you want to mention your high school math issues, put it in context:</p>
<p><em>“I grew up in a family of accountants, but in high school, math didn’t really excite me. However, when I learned how smart accounting makes or breaks a small business, I became interested in using my aptitude for numbers to help local businesses thrive.”</em></p>
<p><strong>Larger company?</strong> Try putting some context into employee bios to show how each hire is a perfect fit for the culture and environment you are trying to create. For example, if Ted was a consultant for local nonprofit organizations before landing a role in PR at your agency, maybe he’s fantastic at building community. (And PR is <em>all about</em> building relationships within the community!)</p>
<h3 id="4-Talk-it-out"><a href="#4-Talk-it-out" class="headerlink" title="4: Talk it out"></a><strong>4: Talk it out</strong></h3><p>If you’ve ever been stuck in an elevator when someone gives a canned elevator pitch, it can be cringe-worthy. Somehow the words they’ve memorized so studiously sound like a late-night infomercial when spoken aloud.</p>
<p>Don’t let this happen to you!</p>
<p><strong>Speak your copy out loud.</strong> You’ll know right away whether it sounds too technical for the audience, awkward, or overly familiar.</p>
<p><img src="http://blog.meetedgar.com/wp-content/uploads/2017/02/New-Girl-Schmidt-You-Got-This.gif" alt="New Girl Schmidt You Got This"></p>
<p>If you have someone read to, even better! They should be able to grasp and summarize your main points without having to ask for clarification.</p>
<p>Just be sure to choose someone similar to your target client. If your cat can grasp all the points of your aeronautical engineering white paper and he isn’t an engineer himself, you might want to dig into your topic a little deeper!</p>
<p>(Also, congratulations on having a <em>very</em> smart cat.)</p>
<p>Bonus: Talking it out is also a great way to pick up mistakes that your eyes naturally gloss over when reading. The more familiar you are with something, the harder it can be <a href="https://meetedgar.com/secret-blogging-formula/" target="_blank" rel="external">to catch mistakes!</a></p>
<h3 id="5-Don’t-be-afraid-to-recycle"><a href="#5-Don’t-be-afraid-to-recycle" class="headerlink" title="5: Don’t be afraid to recycle"></a><strong>5: Don’t be afraid to recycle</strong></h3><p>When you take the time to carefully craft language for social, website, blog, and industry use, you’ll build a resource you can turn to time and again.</p>
<p>Catch phrases and headlines return again and again for a reason. They help you identify a brand – so don’t be afraid to reuse and recycle your best stuff!</p>
<p>Not many people will read <em>every single word your business ever writes in every single medium.</em> In fact, you’re probably the only person who will!</p>
<p>That means the words you write can have <a href="http://blog.meetedgar.com/marketers-speak-out-which-type-of-content-really-performs-best/" target="_blank" rel="external">more than one application</a> – blog posts turn into video scripts, landing pages turn into emails, carved stone tablets turn into social media updates. (And social media updates can <a href="http://blog.meetedgar.com/five-big-brands-strategies-for-recycling-social-media-updates/" target="_blank" rel="external">be used again and again over time!</a>)</p>
<p><img src="http://blog.meetedgar.com/wp-content/uploads/2017/02/NY-Times-Tweet-Repeat-Vertical.jpg" alt="NY Times Tweet Repeat Vertical"></p>
<p>See? It works!</p>
<h3 id="Who-does-it-best"><a href="#Who-does-it-best" class="headerlink" title="Who does it best?"></a><strong>Who does it best?</strong></h3><p>There you have it – a few handy tips to keep in mind when you want to write like a human!</p>
<p>Got a favorite trick of you own for perfecting your voice?</p>
<p>Or maybe a fave business you think does it especially well?</p>
<p>Let us know in the comments below!</p>
]]></content>
      
        <categories>
            
            <category> 写作 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[何为软件即服务（SaaS）？]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/10/%E4%BD%95%E4%B8%BA%E8%BD%AF%E4%BB%B6%E5%8D%B3%E6%9C%8D%E5%8A%A1%EF%BC%88SaaS%EF%BC%89%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原    文：<a href="https://empireflippers.com/saas-business-model-explained/" target="_blank" rel="external">The SaaS Business Model Explained</a><br>译    文：Alex<br>作    者：Greg Elfrink</p>
</blockquote>
<p>软件即服务（SaaS）是一种相对较新的商业模式。</p>
<p>这是另一个模型，字面上不存在没有互联网。前提是一件软件托管在云基础架构上（即通过网络浏览器操作），企业每月支付费用以访问该软件。</p>
<p>SaaS业务一般可能是我们的解释器系列中最复杂的业务模式。它通常需要大量的编码知识，结合大量的用户界面设计技能，真正使SaaS产品值得。</p>
<p>SaaS企业和软件公司之间的主要区别是SaaS托管在云中。基本上，这消除了对最终用户许可证激活软件和托管软件的任何基础设施的需要。相反，SaaS公司承载其成员资格。客户只需登录他们的帐户，他们就可以获得完全访问权限。</p>
<h2 id="SaaS在需求"><a href="#SaaS在需求" class="headerlink" title="SaaS在需求"></a>SaaS在需求</h2><p>你可以想象，这是一个令人难以置信的吸引力作为一种服务。不想投入大量资金创建IT基础架构的企业主通常使用SaaS解决方案，而且SaaS解决方案通常对其业务（例如使用SalesForce的销售团队或使用Zendesk的客户服务部门）变得非常不可或缺。SaaS业务为为其业务使用服务的客户消除了这种风险，他们通常只支付小额的会员费用。</p>
<p>虽然SaaS业务有很多方式可以赚钱，但SaaS业务的面包和黄油通常是会员收入。这个会员费是让客户访问产品和软件的功能。</p>
<p>当我们进入增长战略时，我们将更深入地了解其他收入流，SaaS业务所有者可以考虑增加他们的频道。</p>
<p>在我们这样做之前，重要的是要注意，重视SaaS业务可能与我们覆盖的其他业务模式有点不同。这是因为经常需要增长SaaS业务的巨大再投资可以通过所有的利润吃饭，导致许多人基于他们对持续，稳定增长的信心购买SaaS业务。</p>
<h2 id="SaaS业务的3个时期"><a href="#SaaS业务的3个时期" class="headerlink" title="SaaS业务的3个时期"></a>SaaS业务的3个时期</h2><p>对于每个SaaS业务，有三个主要阶段，他们将要体验。大多数人都理解启动阶段，然后每个人都梦想稳定的金鹅阶段，当钱正在滚动。其中一个阶段，通常没有谈到，虽然它是一个SaaS业务的主要压力时期之一他们要么打破它，要么打破它，被称为Hypergrowth。</p>
<p>让我们深入三个阶段：</p>
<ol>
<li><strong>启动</strong> - 这包括获得一切，编程工作产品，“上市”，以获得您的前几个客户。</li>
<li><strong>过度增长</strong> - 如果市场喜欢您的产品，您可能会在企业采用您的软件时很快体验到巨大的增长。虽然这听起来不错，但这通常会花费更多的钱，因为您需要快速扩展数据，存储，带宽和各种技术特性，以支持新收购的客户。记住SaaS产品的客户经常喜欢的产品，因为他们不需要为他们的业务创建一个IT基础设施？嗯，他们不需要创建一个的原因是因为你的SaaS产品通过他们的成员为他们提供后端。</li>
<li><strong>稳定的黄金鹅</strong> - 这是您的SaaS业务稳定下来的阶段。你开始获得一个非常健康的利润，并以快速的速度获得新客户不会测试你的基础设施限制，就像在增长阶段。你也会熟悉“搅拌”，我们即将进入。</li>
</ol>
<p>许多SaaS产品实际上是相当不错的，但是不能管理过度增长是许多企业所遭受的，这可能导致许多失败。我们将在本解释文章的“生长策略”部分中讨论如何缓解这一点。</p>
<h2 id="成功的SaaS业务示例"><a href="#成功的SaaS业务示例" class="headerlink" title="成功的SaaS业务示例"></a>成功的SaaS业务示例</h2><p>SaaS业务可以是涵盖许多不同事物的一系列软件。然而，SaaS企业通过允许其更有效地运行，对其他企业最有帮助。</p>
<p>让我们来看看SaaS世界中的一些重大成功。</p>
<p><a href="http://www.salesforce.com/" target="_blank" rel="external">SalesForce.com</a></p>
<p>销售队伍是最早成立于1999年的软件公司SaaS业务之一。他们帮助无数企业管理他们的销售团队，处理他们的潜在客户，并有效地帮助他们跟踪他们最好的潜在客户。该产品已取得巨大成功，并且是大多数SaaS业主希望通过自己的产品实现的典范。</p>
<p><a href="https://meetedgar.com/" target="_blank" rel="external">认识Edgar</a></p>
<p>Edgar是一种社交媒体自动化SaaS产品，可以在某人的工作负载上消除数百小时的时间。它自动填充一个社交队列，并允许职位被回收一段时间。</p>
<p>它运行的前提是，由于大多数社交媒体帖子不会被跟随某人的Twitter Feed或Facebook页面的人所看到，因此该内容可以被回收，并随着时间的推移向更多的受众展示。</p>
<p>虽然当然小于SalesForce.com，但是Edgar在社交媒体SaaS领域已经变得非常重要，值得观看和模拟其他SaaS业务。</p>
<p><a href="https://meetedgar.com/" target="_blank" rel="external">Zendesk</a></p>
<p>然后有这个SaaS的juggernaut。Zendesk是一个客户服务票务系统，因其小型，中型甚至大型企业的可用性而闻名，更好地控制其客户服务，最终为终端消费者带来更好的体验。</p>
<h2 id="SaaS商业模式的优势"><a href="#SaaS商业模式的优势" class="headerlink" title="SaaS商业模式的优势"></a>SaaS商业模式的优势</h2><p>SaaS业务模式的优点是，您的客户可以疯狂地忠实于您的产品。如果您的SaaS产品代表的是其业务不可或缺的一部分，这一点尤其重要。毕竟，他们通常成为你的秘密社会的“成员”。</p>
<p>例如，Zendesk提供的软件可帮助企业创建有效的客户服务解决方案。可能有一个新的票务软件出来，打击了Zendesk出水，但因为Zendesk对于企业的成功至关重要，并且对于该业务流程是不可或缺的，业务不可能改变新的和改进的解决方案的一切。</p>
<p>这种忠诚度可以创造持续多年和多年的客户，增加了新兴的经常性收入，使SaaS产品如此有利可图。</p>
<p>显然，这是SaaS模式的下一个大项目。每个客户在技术上只是每月租用您的软件，而不是直接拥有一次性购买。</p>
<p>这意味着每个月你都会从这个客户那里赚取更多的利润。经常性收入往往是那些参与在线业务的人的梦想，而SaaS业务模式有这种经常性收入的想法的核心。</p>
<h2 id="SaaS模型的缺点"><a href="#SaaS模型的缺点" class="headerlink" title="SaaS模型的缺点"></a>SaaS模型的缺点</h2><p>虽然经常性收入是非常好的，大量的金钱，让你的SaaS业务进行不是几乎同样有吸引力。</p>
<p>有一开始你必须做的各种投资，如雇用良好的开发人员和程序员和UI设计师，将结合他们的技能，使您的产品尽可能用户友好和高效。</p>
<p>一旦你有一个产品落地，并有少数客户证明模型的价值，你很可能需要重新投资你的所有利润 - 加上一些更多的资本，以扩大业务。您将需要扩展您的数据功能，安全性，存储，让您的团队周围处理维护，并管理任何意外的问题，可能会在这个增长阶段出现。</p>
<p>在资本密集型商业模式之外，SaaS的另一个消极面是，它通常不是一个简单的产品。虽然模型本身很容易理解，即使对于理解所有编码的人来说，有效地保持实际的产品也是困难的。</p>
<p>这可能会使SaaS产品的销售更加困难，因为您正在寻找更多的潜在商业买家，比如对<a href="https://empireflippers.com/amazon-fba-business-model-explained/" target="_blank" rel="external">亚马逊FBA</a>或<a href="https://empireflippers.com/lead-gen-business-model-explained/" target="_blank" rel="external">主要业务</a>感兴趣的人。</p>
<h2 id="买家需要知道的"><a href="#买家需要知道的" class="headerlink" title="买家需要知道的"></a>买家需要知道的</h2><p>当涉及到购买一个较小的SaaS业务时，只有真正了解软件所涉及的编程或编码才是值得的。这当然不是这样的情况，如果它是一个更大的SaaS业务 - 开发团队与收购，卖方已经概述了所有的流程和系统，所以如果团队已经离开，你可以找到另一个开发商相对容易占据他们的地位。</p>
<p>您还要确保卖家拥有SaaS业务的所有编码，知识产权和品牌。确保您购买的是整个交易，而不仅仅是SaaS业务的一部分。</p>
<p>您绝对需要知道流失率是什么（客户每月订阅软件的速率）以及终身价值（LTV）和每个客户的成本获取（CAC）。这些是重要的指标，因为这些是业务的生命迹象。如果你的CAC太高，太低的LTV由于高流失率，SaaS业务不会是有吸引力的购买。</p>
<p>除非你相当擅长调整和增长各种营销渠道。在这种情况下，如果您知道产品运行良好，并且您确切知道营销漏斗或用户界面的哪些部分需要修复以解决这种情况，那么SaaS业务可能是您的极低价值的购买。</p>
<p>最后，当寻找SaaS业务来购买时，最好购买一个已经达到一个一致的客户增长水平，而不是爆炸性增长。如前所述，爆炸式增长可能会导致相当多的问题，在适当扩大一切。</p>
<p>最好是购买一个稳定的业务（几乎总是），而不是一个仍在经历大规模增长周期的业务。稳定的业务将使您能够更有效地调整您的营销渠道并优化业务。</p>
<h2 id="什么卖家需要知道"><a href="#什么卖家需要知道" class="headerlink" title="什么卖家需要知道"></a>什么卖家需要知道</h2><p>SaaS业务卖家可以做的第一件事是找到尽可能增加他们的LTV的方法。</p>
<p>LTV数字越高，业务越有吸引力，因为SaaS业务是所有经常性收入。如果LTV足够高或者轨道增加，这可能是一个巨大的交易者。</p>
<p>显然，你也想减少你的CAC和搅动。这可以通过调整营销渠道，甚至可以更改订阅定价。</p>
<p>除了这两个明显的指标，你应该有一个良好的开发团队，交给新的所有者。或者至少，有大量的文档和资源供买家用来寻找新的开发人员。用于创建软件的代码应完全由您拥有，包括与业务相关的所有内容（品牌，营销等）。</p>
<p>最后，训练你的软件买家。提供某种培训手册供他们阅读，以熟悉实际的产品和业务。在这个培训中，你应该真正突出你所拥有的任何障碍，以及增长潜力在哪里，所以新买家可以开始向这个方向移动。</p>
<p>不要害怕谈论你的业务的负面因素。很多时候，负面因素正是启发新买家实际购买您的SaaS业务的原因，因为他们看到解决这个问题的解决方案。</p>
<h2 id="谁最适合SaaS商业模式？"><a href="#谁最适合SaaS商业模式？" class="headerlink" title="谁最适合SaaS商业模式？"></a>谁最适合SaaS商业模式？</h2><p>如上所述，购买SaaS业务的人的利基将比其他业务模式更为狭窄，因为增长和维护这种业务所需的内在技能。</p>
<p>话虽如此，有些人适合各种各样的买家角色，仍然非常渴望购买像这样的企业 - 有很好的理由。</p>
<h3 id="战略Sally"><a href="#战略Sally" class="headerlink" title="战略Sally"></a>战略Sally</h3><p>SaaS业务对像战略Sally这样的人来说非常有意义，他们试图转向某个市场或人口。例如，如果Strategic Sally还有一个信息产品业务进行有效的客户关系管理，她可能会注意到一个SaaS业务，可以用作CRM来推销她的信息产品客户。</p>
<h3 id="DIY戴夫"><a href="#DIY戴夫" class="headerlink" title="DIY戴夫"></a>DIY戴夫</h3><p>SaaS业务模式真的会吸引那些拥有“自己动手”态度的人。这些业务非常适合像DIY Dave这样的人深入了解。他们可以深入了解实际产品的编程和编码，学习如何降低客户获取成本（CAC），同时调整营销渠道以提高每个客户的终身价值（LTV）。</p>
<h3 id="投资者伊万"><a href="#投资者伊万" class="headerlink" title="投资者伊万"></a>投资者伊万</h3><p>SaaS业务是投资者Ivan投资一些资本的理想场所。SaaS业务可以有巨大的收入潜力，经常性收入来启动，并且由于SaaS业务确实需要一些资金真正起起来和运行，投资者Ivan可能会发现一个业务合作伙伴在这个利基比一个<a href="https://empireflippers.com/adsense-business-model-explained/" target="_blank" rel="external">Adsense业务</a>更容易<a href="https://empireflippers.com/adsense-business-model-explained/" target="_blank" rel="external">模型</a>。</p>
<h2 id="SaaS增长策略"><a href="#SaaS增长策略" class="headerlink" title="SaaS增长策略"></a>SaaS增长策略</h2><p>当涉及到SaaS业务的发展时，你可以采取很多方向。</p>
<p>你选择的增长策略确实取决于你的核心竞争力和过去为你带来的最大的挑战。无论如何，这里有一些想法，可以用来将SaaS业务发展到下一阶段的收入。</p>
<h3 id="增加有机流量"><a href="#增加有机流量" class="headerlink" title="增加有机流量"></a>增加有机流量</h3><p>不言而喻，转换最高流量的最佳流量通常是来自Google和Bing等地区的自然搜索流量。有一种方法可以看到如何增加你的有机搜索是通过简单地看看你当前排名使用一个工具，如SEMRush的位置。</p>
<p>这实际上是一个很容易实施的策略，我在这篇文章中详细讨论<a href="https://empireflippers.com/growing-adsense-amazon-sites/" target="_blank" rel="external">了Adsense和亚马逊企业的低迷</a>。</p>
<h3 id="推出新的营销渠道"><a href="#推出新的营销渠道" class="headerlink" title="推出新的营销渠道"></a>推出新的营销渠道</h3><p>当谈到测试一个新的战略，有一些牵引目标到位。确保您将在新的营销渠道投入足够的资金，您可以达到统计显着的数字。否则，投资没有真正的意义。</p>
<p>一个新的营销渠道可以简单到拿你最好的有机排名或最流行的内容，并将这些内容转换成Youtube视频。毕竟，这是世界上第二大的搜索引擎，所以值得在那里找到。</p>
<h3 id="添加产品销量"><a href="#添加产品销量" class="headerlink" title="添加产品销量"></a>添加产品销量</h3><p>这是一个梦幻般的选择提供给现有客户，因为它为他们更好地，并将赢得更多。这些加售可以是更高端的包，其中客户每月支付更多以接收额外的特征，好处，数据存储或所有上述。它也可以是一个单一的加售 - 也许是一个信息产品，如高影响力的网络研讨会，如何使用该软件，以你的最佳优势。</p>
<p>无论您决定何种加售，始终确保考虑提供该服务的成本，因此您可以将其纳入您的客户必须为升级服务支付的最终定价。</p>
<h3 id="更快。更强。清洁器。"><a href="#更快。更强。清洁器。" class="headerlink" title="更快。更强。清洁器。"></a>更快。更强。清洁器。</h3><p>你可以做的一件事来提高客户满意度和忠诚度（并降低一些基础设施成本）是通过减少坏的代码使你的软件运行更快。冗长的错误或浪费的代码可以提高你的软件的速度，从而增加你的客户整体的幸福与产品巨大的不同。</p>
<p>使它精益，平均，甚至更有利可图。</p>
<h3 id="添加联属计划"><a href="#添加联属计划" class="headerlink" title="添加联属计划"></a>添加联属计划</h3><p>添加联属计划可以为您的业务带来巨大的福利。特别是如果你提供一个有利可图的程序，可以吸引熟练的附属机构推广你的报价。</p>
<p>有很多路线可以去，但如果你想要最好的方式吸引附属公司，你可能想提供一个剩余收入机会。在SaaS业务模式中，这通常比一次性付款更有吸引力。</p>
<p>另一方面，如果你有你的CAC和LTV号码，你可能只是提供一个大的，预付，一次性付款给联属网络 - 知道一般客户将留在足够长的时间，以收回支付联盟的成本那钱。</p>
<p>一些关联公司实际上更喜欢这种，因为他们的营销活动通常是在剃刀薄利润。</p>
<p>无论如何，联盟计划可以是一个惊人的方式，以提高你的营销力量，同时还需要大量的实际营销工作，你的盘子。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[IaaS，PaaS和SaaS公司做什么？]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/10/IaaS%EF%BC%8CPaaS%E5%92%8CSaaS%E5%85%AC%E5%8F%B8%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原    文：<a href="http://venturebeat.com/2011/11/14/cloud-iaas-paas-saas/" target="_blank" rel="external">Cloud 101: What the heck do IaaS, PaaS and SaaS companies do?</a><br>作    者：<a href="http://venturebeat.com/author/sean-ludwig" target="_blank" rel="external">SEAN LUDWIG</a><br>译    文：<a href="https://wanghaonanlpc.github.io/">一个老白</a></p>
</blockquote>
<p>任何遵循技术趋势的人都无疑听到过去几个月中云服务在几十亿亿次的时间里出现。但是如果你不知道PaaS，IaaS和SaaS之间的区别，不要担心 - 你远不是孤独。</p>
<p>让我们从头开始。“云”是互联网的比喻，“云计算”正在使用互联网来访问存储或运行在远程服务器上的应用程序，数据或服务。</p>
<p>当你打破它，任何提供基于互联网的计算，存储和开发方法的公司可以在技术上被称为云公司。然而，并不是所有的云公司都是一样的。通常，这些公司专注于提供三类云计算服务之一。这些不同的段被称为云的“层”。</p>
<p>不是每个人都是CTO或IT经理，所以有时候跟随云技术背后的隐语可能会很艰难。随着我们在本月底<a href="http://venturebeat.com/events/cloudbeat2011/" target="_blank" rel="external">召开</a>的第一届<a href="http://venturebeat.com/events/cloudbeat2011/" target="_blank" rel="external">CloudBeat 2011年会议</a>，我们认为这将是一个很好的机会，了解每一层服务的目的和一些公司的例子，以帮助给每个词更有意义。</p>
<h3 id="云层"><a href="#云层" class="headerlink" title="云层"></a>云层</h3><p>云计算公司是通过互联网提供其服务的任何公司。这些服务分为三个不同的类别或层。云计算的各个层面相互依存，是基础设施即服务（IaaS），平台即服务（PaaS）和软件即服务（SaaS）。基础设施位于底部，平台在中间，软件在顶部。其他“软”层也可以添加在这些层的顶部，使用成本和安全性等元素扩展了云的大小和灵活性。</p>
<p>下面是一个图表，显示了云计算的三个主要层的简化说明：</p>
<p><a href="http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2011/11/iaas-paas-saas.jpg" target="_blank" rel="external"><img src="http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2011/11/iaas-paas-saas.jpg" alt="IaaS-PaaS-SaaS"></a></p>
<h3 id="IaaS：基础设施即服务"><a href="#IaaS：基础设施即服务" class="headerlink" title="IaaS：基础设施即服务"></a>IaaS：基础设施即服务</h3><p>第一个主要层是基础架构即服务或IaaS。（有时称为硬件即服务）几年前，如果你想在办公室运行业务应用程序并控制公司网站，你会购买服务器和其他昂贵的硬件，以控制本地应用程序，并使你的业务运行顺利。</p>
<p>但现在，使用IaaS，您可以将您的硬件需求外包给其他人。IaaS公司提供非现场服务器，存储和网络硬件，您可以通过Internet租用和访问。从维护成本和浪费的办公空间中，公司可以在这个硬件上运行他们的应用程序，并随时访问它。</p>
<p>IaaS中的一些最大的名字包括亚马逊，微软，VMWare，Rackspace和红帽。虽然这些公司有不同的专业 - 有些，如亚马逊和微软，想要提供给你而不仅仅是IaaS - 他们是通过销售你原始计算能力和托管你的网站的愿望。</p>
<h3 id="PaaS：平台即服务"><a href="#PaaS：平台即服务" class="headerlink" title="PaaS：平台即服务"></a>PaaS：平台即服务</h3><p>云的第二个主要层称为平台即服务（PaaS），有时称为中间件。这个类别的基本思想是，您公司的所有开发都可以在这一层上发生，从而节省您的时间和资源。</p>
<p>PaaS公司提供各种各样的解决方案，用于通过Internet开发和部署应用程序，如虚拟化服务器和操作系统。这为您节省了硬件上的金钱，也使分散的员工更容易协作。Web应用程序管理，应用程序设计，应用程序托管，存储，安全和应用程序开发协作工具都属于这一类。</p>
<p>目前最大的PaaS提供商有Google App Engine，Microsoft Azure，Saleforce的Force.com，Salesforce拥有的Heroku和<a href="http://venturebeat.com/2011/08/23/engine-yard-acquires-orchestra/" target="_blank" rel="external">Engine Yard</a>。我们撰写的一些PaaS初创公司包括<a href="http://venturebeat.com/2011/08/11/appfog-raises-8m-to-host-powerful-web-apps-in-the-cloud/" target="_blank" rel="external">AppFog</a>，<a href="http://venturebeat.com/2011/10/31/mendix-grabs-13m-to-fuel-fast-enterprise-app-development/" target="_blank" rel="external">Mendix</a>和<a href="http://venturebeat.com/2011/11/10/standing-cloud-cloud-app-management/" target="_blank" rel="external">Standing Cloud</a>。</p>
<h3 id="SaaS：软件即服务"><a href="#SaaS：软件即服务" class="headerlink" title="SaaS：软件即服务"></a>SaaS：软件即服务</h3><p>云的第三层和最后一层是软件即服务或SaaS。这个层是你最有可能在你的日常生活中进行交互的层，它几乎总是可以通过网络浏览器访问。在可以通过Internet访问的远程服务器上托管的任何应用程序都被视为SaaS。</p>
<p>您完全从网络消费的服务，如Netflix，MOG，Google Apps，Box.net，Dropbox和<a href="http://venturebeat.com/2011/10/28/icloud-steve-jobs-legacy/" target="_blank" rel="external">苹果的新iCloud</a>属于这一类。无论这些Web服务是用于商业，娱乐还是两者，它们都是技术上的一部分。</p>
<p>用于业务的一些常见SaaS应用包括Citrix的GoToMeeting，Cisco的WebEx，Salesforce的CRM，ADP，Workday和SuccessFactors。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 2.3]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/09/Android-Studio-2-3/</url>
      <content type="html"><![CDATA[<p>作为 Google 官方出版并维护的 IDE，被全球数以百万计的 Android 开发者钟爱并使用的开发工具，Android Studio，在前几天的三月二号，正式迎来了 2.3 稳定版的更新。身为 Android 迷的你，赶快来和我一起看看新版 Android Studio 给我们带来了哪些变化吧。</p>
<h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><h3 id="Instant-Run-的改进和-UI-变化"><a href="#Instant-Run-的改进和-UI-变化" class="headerlink" title="Instant Run 的改进和 UI 变化"></a>Instant Run 的改进和 UI 变化</h3><p>Instant Run 基本上能够解决中小型项目的编译缓慢问题。作为 Google 重点关注的一个功能，Android Studio 2.3 版本在原来的基础上再次做了优化，进一步减少安装替换代码的时间。同时，在 Android Studio 的导航栏上将 run 和 instant run 按钮分开显示，供开发者选择调试策略。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/e37bc920cdc6f91459686f612a118e89.png" alt="img"></p>
<p><a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="external">Learn more</a></p>
<h3 id="Build-Cache"><a href="#Build-Cache" class="headerlink" title="Build Cache"></a>Build Cache</h3><p>编译缓存是 Android Studio 2.2 版本被引入的的一个功能，能够缓存项目中导入的 AAR、Libray，能够加快调试过程中的编译时间。新版本在此基础上进一步优化，同时默认打开这个功能，在 2.2 版本上默认处于关闭状态。</p>
<p><a href="http://d.android.com/studio/build/build-cache.html" target="_blank" rel="external">Learn more</a></p>
<h2 id="设计相关"><a href="#设计相关" class="headerlink" title="设计相关"></a>设计相关</h2><h3 id="约束布局中的链接和比例"><a href="#约束布局中的链接和比例" class="headerlink" title="约束布局中的链接和比例"></a>约束布局中的链接和比例</h3><p>Constraint Layout (约束布局) 想必大家有所耳闻了，但不知道是否用的习惯，目前我还没有在项目中正式使用。不过 Google 官方对此布局方式尤为看重，这不新版 Android Studio 又来改进了。介绍改进点之前，先给大家推荐一篇「郭霖」对于约束布局的介绍，非常详尽：<a href="http://blog.csdn.net/guolin_blog/article/details/53122387" target="_blank" rel="external">Android新特性介绍，ConstraintLayout完全解析</a>。看完之后，保证你一定跃跃欲试。</p>
<p>2.3 版本的 Android Studio 支持在约束布局中使用链接（Chains）和比例（Ratios）。Chains 的概念大致是，在使用约束布局的 layout 中，我们可以链接多个控件，一起设置约束条件，比如：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/6e82c17219040c4d02a810de608afc49.gif" alt="img"></p>
<p>Ratios 的概念也比较好理解，看图说话：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/f20d095c463087429690a0d9fc8f1989.gif" alt="img"></p>
<p>Chains 和 Ratios 都支持动态设置，有相应的 <a href="https://developer.android.com/reference/android/support/constraint/ConstraintSet.html" target="_blank" rel="external">ConstraintSet APIs</a> 可用。</p>
<p><a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="external">Learn more</a></p>
<h3 id="布局控件面板"><a href="#布局控件面板" class="headerlink" title="布局控件面板"></a>布局控件面板</h3><p>如果你经常使用拖拽控件的形式设计布局的话，那这个更新点对你简直如虎添翼。新版 Widget Palette 提供搜索、排序和过滤功能，帮助我们找到所需要的控件。同时，在你选择拖拽之前，提供对应控件的 UI 预览。如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/2bec92a95115899403b4ed5d391a9328.png" alt="img">Layout Editor Widget Palette</p>
<p><a href="https://developer.android.com/studio/write/layout-editor.html" target="_blank" rel="external">Learn more</a></p>
<h3 id="收藏常用属性"><a href="#收藏常用属性" class="headerlink" title="收藏常用属性"></a>收藏常用属性</h3><p>在 layout design 模式下，我们可以在 Properties 面板中保存常用属性，然后这些属性就会出现在收藏区域，帮助我们快速使用。如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/7c8d47a888e13699640dbe3d48f9bc8b.gif" alt="img">Favorites Attributes on Layout Editor Properties Panel</p>
<p><a href="https://developer.android.com/studio/write/layout-editor.html#edit-properties" target="_blank" rel="external">Learn more</a></p>
<h3 id="支持-WebP"><a href="#支持-WebP" class="headerlink" title="支持 WebP"></a>支持 WebP</h3><p>相比 PNG 格式的图片，WebP 无损压缩格式能够减少 <a href="https://developers.google.com/speed/webp/docs/webp_lossless_alpha_study#results" target="_blank" rel="external">25%</a> 的文件大小。在 Android Studio 2.3 版本中，我们可以自由转换图片格式，PNG to WebP，或者是 WebP to PNG，同时你还可以通过控制质量从而调整文件大小。如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/3719fcda2bf934649d15dd5030a991af.png" alt="img">WebP Image Conversion Wizard</p>
<p><a href="https://developer.android.com/studio/write/convert-webp.html" target="_blank" rel="external">Learn more</a></p>
<h3 id="Material-Icon-库"><a href="#Material-Icon-库" class="headerlink" title="Material Icon 库"></a>Material Icon 库</h3><p>新版的 Material Icon 矢量图标库支持搜索过滤功能，同时为每个 Icon 设置相应的 Label，以供搜索。一个非常人性化的改进：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/263a9adc96df33cd0c44c6a981ab2db8.png" alt="img">Vector Asset Wizard</p>
<p><a href="https://developer.android.com/studio/write/vector-asset-studio.html#materialicon" target="_blank" rel="external">Learn more</a></p>
<h2 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h2><h3 id="Lint-基准线"><a href="#Lint-基准线" class="headerlink" title="Lint 基准线"></a>Lint 基准线</h3><p>Android Lint 是优化项目必不可少的一个工具，使用中你可能会遇到这样的问题。在此之前，每次执行 Lint 命令，该工具会自动遍历所有的目标文件，并将不符规范的问题分类列举出来，然后我们一一处理。但如果你没有处理完的话，再次 Lint 时就又得从头开始解决问题，新旧问题融合到一起。此时如果你只想处理新的问题的话，就无迹可寻。而基准线（BaseLine）的出现就能解你燃眉之急。给每一次执行 Lint 设置一个 BaseLine，让你只想解决新 issues 的想法成为可能。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/eb03cbbc5a30a3161a3a0e2e1ed23f57.png" alt="img">Lint Baseline Support</p>
<p><a href="https://developer.android.com/studio/write/lint.html#snapshot" target="_blank" rel="external">Learn more</a> and <a href="https://developer.android.com/studio/releases/index.html" target="_blank" rel="external">new Lint checks &amp; annotations</a></p>
<h3 id="App-Links-助手"><a href="#App-Links-助手" class="headerlink" title="App Links 助手"></a>App Links 助手</h3><p>在 2015 年 I/O 大会上，Google 正式宣布 Android M 系统支持 App 链接，在 web url 到 native app 之间建立关联通道。比如，点击手机短信中的 url 链接和浏览器中的某个 url 就可以打开支持 App Links 的相应 App，一个非常赞的设计。要做到这个功能，需要在项目中添加相应的设置，修改 Manifest 文件等。新版本开发工具提供了可视化的工具帮助我们进行这些设置，如：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/3418d2ab53ff92b544e8ae4dd22589f9.png" alt="img">App Links Assistant</p>
<p><a href="https://developer.android.com/studio/write/app-link-indexing.html" target="_blank" rel="external">Learn more</a></p>
<h3 id="模版更新"><a href="#模版更新" class="headerlink" title="模版更新"></a>模版更新</h3><p>从 Android Studio 2.3 版本开始，新建项目时用到的所有 templates 默认使用 ConstraintLayout，而在此之前，默认都是 RelativeLayout。这一点，也再次说明约束布局的重要性。同时，新版也增加一个新的底部导航模式的模板，默认实现 Material Design 设计中的 Bottom Navigation，设计细节参考：<a href="https://material.io/guidelines/components/bottom-navigation.html" target="_blank" rel="external">guideline</a>。</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/76ba4e9f9a0b8bdb94df2124f32ac6f4.png" alt="img">New Project Wizard Templates</p>
<p><a href="https://developer.android.com/studio/projects/templates.html" target="_blank" rel="external">Learn more templates</a></p>
<h2 id="IntelliJ-Platform-更新"><a href="#IntelliJ-Platform-更新" class="headerlink" title="IntelliJ Platform 更新"></a>IntelliJ Platform 更新</h2><p>Android Studio 2.3 版本使用 IntelliJ 2016.2 release，在一些 IDE 上的更新窗口和通知系统上有所改进。</p>
<p><a href="https://www.jetbrains.com/idea/whatsnew/#v2016-2" target="_blank" rel="external">Learn more</a></p>
<h2 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a>测试相关</h2><h3 id="安卓模拟器复制粘贴功能"><a href="#安卓模拟器复制粘贴功能" class="headerlink" title="安卓模拟器复制粘贴功能"></a>安卓模拟器复制粘贴功能</h3><p>为响应广大开发者的需求，Google 在新版模拟器 (v25.3.1) 上实现了 PC 主机和模拟器之间的相互复制粘贴功能，主要通过共享剪贴板实现。需要注意的事，Copy &amp; Paste 功能仅在 x86 Google API Emulator 同时 API Level 19（Android 4.4-Kitkat）和更高版本中起到作用。效果如图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/3/7/2175955c855819ee70d64e2ccd38a775.gif" alt="img">Copy &amp; Paste support in Android Emulator</p>
<h3 id="安卓模拟器命令行工具"><a href="#安卓模拟器命令行工具" class="headerlink" title="安卓模拟器命令行工具"></a>安卓模拟器命令行工具</h3><p>Android SDK Tools 25.3 开始，SDK Tools 文件夹中的 emulator 文件被转移到一个独立的模拟器文件夹，过去使用的 <code>android avd</code> 命令被废弃和替换。如果过去你使用到有关于此的脚本文件就需要在目录路径上稍作改动。当然，如果使用 Android Studio 启动模拟器的话，不受任何影响。</p>
<p><a href="https://developer.android.com/studio/releases/sdk-tools.html" target="_blank" rel="external">Learn more</a></p>
<p>至此，Android Studio 2.3 版本的更新内容介绍完毕。英文阅读无障碍的话，也可以自备<a href="http://buytizi.com/?r=225bb619613ec09e" target="_blank" rel="external">梯子</a>，查阅 [Android Developers Blog]。</p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android插件化从入门到放弃]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/03/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近研究插件化， 偶然发现此合集， 按照部分链接的文章实际简单写了些demo，受益良多， 觉得确实不错，特转载过来，给需要的人。</p>
</blockquote>
<h6 id="相关项目：Android-组件化和插件化开发"><a href="#相关项目：Android-组件化和插件化开发" class="headerlink" title="相关项目：Android 组件化和插件化开发"></a><a href="https://wanghaonanlpc.github.io/2017/03/03/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/">相关项目：Android 组件化和插件化开发</a></h6><p>插件化涉及的东西很多，所以我们需要多个维度去学习。大概分为5个部分：预备知识、入门、进阶、系列、类库。一步一步深入了解插件的原理。本专栏会不定时更新相关内容，请留意更新的消息。请加入QQ群：149581646.会统一通知最新的文章。<br>Posted2016-03-16<br>by Jomeslu.</p>
<p><strong>基础</strong><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="external">1.Java 类加载器</a><br>类加载器（class loader）是 Java中的一个很重要的概念。类加载器负责加载 Java 类的字节代码到 Java 虚拟机中。本文首先详细介绍了 Java 类加载器的基本概念，包括代理模式、加载类的具体过程和线程上下文类加载器等，接着介绍如何开发自己的类加载器，最后介绍了类加载器在 Web 容器和 OSGi中的应用。</p>
<p><a href="https://github.com/JustinSDK/JavaSE6Tutorial/blob/master/docs/CH16.md" target="_blank" rel="external">2.反射原理</a><br>Java 提供的反射機制允許您於執行時期動態載入類別、檢視類別資訊、生成物件或操作生成的物件，要舉反射機制的一個應用實例，就是在整合式開發環境中所提供的方法提示或是類別檢視工具，另外像 JSP 中的 JavaBean 自動收集請求資訊也使用到反射，而一些軟體開發框架（Framework）也常見到反射機制的使用，以達到動態載入使用者自訂類別的目的。</p>
<p><a href="http://www.jianshu.com/p/6f6bb2f0ece9" target="_blank" rel="external">3.代理模式及Java实现动态代理</a><br>定义：给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即客户不直接操控原对象，而是通过代理对象间接地操控原对象。</p>
<p><strong>入门</strong><br><a href="http://blog.csdn.net/u013478336/article/details/50734108" target="_blank" rel="external">1.Android动态加载dex技术初探</a><br>Android使用Dalvik虚拟机加载可执行程序，所以不能直接加载基于class的jar，而是需要将class转化为dex字节码，从而执行代码。优化后的字节码文件可以存在一个<em>.jar中，只要其内部存放的是</em>.dex即可使用。</p>
<p><a href="http://104.236.134.90/2016/02/02/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%9F%BA%E7%A1%80/" target="_blank" rel="external">2.Android插件化入门</a><br>开发者将插件代码封装成Jar或者APK。宿主下载或者从本地加载Jar或者APK到宿主中。将宿主调用插件中的算法或者Android特定的Class（如Activity）</p>
<p><a href="http://blog.csdn.net/u010687392/article/details/47121729?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">3.插件化开发—动态加载技术加载已安装和未安装的apk</a><br>动态加载技术就是使用类加载器加载相应的apk、dex、jar（必须含有dex文件），再通过反射获得该apk、dex、jar内部的资源（class、图片、color等等）进而供宿主app使用。</p>
<p><a href="https://blog.tingyun.com/web/article/detail/166" target="_blank" rel="external">4.Android动态加载技术三个关键问题详解</a><br>动态加载技术（也叫插件化技术）在技术驱动型的公司中扮演着相当重要的角色，当项目越来越庞大的时候，需要通过插件化来减轻应用的内存和CPU占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。</p>
<p><strong>进阶</strong><br><a href="http://mp.weixin.qq.com/s?__biz=MzAwMTcwNTE0NA==&amp;mid=400217391&amp;idx=1&amp;sn=86181541ce0164156dfab135ed99bb5c&amp;scene=0&amp;key=b410d3164f5f798e61a5d4afb759fa38371c8b119384c6163a30c28163b4d4d5f59399f2400800ec842f1d0e0ffb84af&amp;ascene=0&amp;uin=MjExMjQ&amp;pass_ticket=Nt5Jaa28jjFxcQO9o+vQiXX+0iXG5DlZlHNW97Fk1Ew=" target="_blank" rel="external">1.携程Android App插件化和动态加载实践</a><br>携程Android App的插件化和动态加载框架已上线半年，经历了初期的探索和持续的打磨优化，新框架和工程配置经受住了生产实践的考验。本文将详细介绍Android平台插件式开发和动态加载技术的原理和实现细节，回顾携程Android App的架构演化过程，期望我们的经验能帮助到更多的Android工程师。</p>
<p><a href="http://blog.csdn.net/hkxxx/article/details/42194387" target="_blank" rel="external">2.动态加载APK原理分享</a><br>被加载的apk称之为插件，因为机制类似于生物学的”寄生”，加载了插件的应用也被称为宿主。 往往不是所有的apk都可作为插件被加载，往往需要遵循一定的”开发规范”，还需要插件项目引入某种api类库，业界通常都是这么做的。</p>
<p><a href="http://www.cnblogs.com/coding-way/p/4669591.html" target="_blank" rel="external">3.Android插件化的一种实现</a><br>Android的插件化已经是老生常谈的话题了，插件化的好处有很多：解除代码耦合，插件支持热插拔，静默升级，从根本上解决65K属性和方法的bug等等。下面给大家介绍一下我们正在用的差价化框架。本片主要以类图的方式向大家介绍插件话框架的实现。</p>
<p><a href="http://mogu.io/117-117" target="_blank" rel="external">4.蘑菇街 App 的组件化之路</a><br>随着我街业务的蓬勃发展，产品和运营随时上新功能新活动的需求越来越强烈，经常可以听到“有个功能我想周x上，行不行”。行么？当然是不行啦，上新功能得发新版本啊，到时候费时费力打乱开发节奏不说，覆盖率也是个问题。</p>
<p><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/FFish/DynamicLoadApk%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">5.DynamicLoadApk 源码解析</a><br>DynamicLoadApk 是一个开源的 Android 插件化框架。插件化的优点包括：(1) 模块解耦，(2) 动态升级，(3) 高效并行开发(编译速度更快) (4) 按需加载，内存占用更低等等DynamicLoadApk 提供了 3 种开发方式，让开发者在无需理解其工作原理的情况下快速的集成插件化功能。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="external">6.Android apk动态加载机制的研究</a><br>问题是这样的：我们知道，apk必须安装才能运行，如果不安装要是也能运行该多好啊，事实上，这不是完全不可能的，尽管它比较难实现。在理论层面上，我们可以通过一个宿主程序来运行一些未安装的apk，当然，实践层面上也能实现，不过这对未安装的apk有要求。我们的想法是这样的，首先要明白apk未安装是不能被直接调起来.</p>
<p><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">7.美团Android DEX自动拆包及动态加载简介</a><br>作为一个android开发者，在开发应用时，随着业务规模发展到一定程度，不断地加入新功能、添加新的类库，代码在急剧的膨胀，相应的apk包的大小也急剧增加， 那么终有一天，你会不幸遇到这个错误.</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAwOTE0ODEwMQ==&amp;mid=401731625&amp;idx=1&amp;sn=9bf2bacfbba43ba9dc7b2e854b64e66c&amp;scene=23&amp;srcid=1231ni0s2Y0OMfYSoNhkkJ47#rd&amp;ADUIN=289832127&amp;ADSESSION=1451551778&amp;ADTAG=CLIENT.QQ.5425_.0&amp;ADPUBNO=26509" target="_blank" rel="external">8.途牛原创|途牛Android App的插件实现</a><br>途牛的插件化是基于dynamic-load-apk（github）实现的。定义了宿主和插件的通信方式，使得两者能够互起对方的页面，调用彼此的功能。同时对activity的启动方式singletask等进行了模式实现，并增加了对Service的支持等。总之使得插件开发最大限度的保持着原有的Android开发习惯。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/23387079" target="_blank" rel="external">9. Android apk资源加载和activity生命周期管理</a><br>博主分析了Android中apk的动态加载机制，并在文章的最后指出需要解决的两个复杂问题：资源的访问和activity生命周期的管理，而本文将会分析这两个复杂问题的解决方法。</p>
<p><a href="http://blog.csdn.net/singwhatiwanna/article/details/39937639" target="_blank" rel="external">10.APK动态加载框架（DL）解析</a><br>首先要说的是动态加载技术（或者说插件化）在技术驱动型的公司中扮演这相当重要的角色，当项目越来越庞大的时候，需要通过插件化来减轻应用的内存和cpu占用，还可以实现热插拔，即在不发布新版本的情况下更新某些模块。</p>
<p><strong>系列</strong><br><a href="https://segmentfault.com/a/1190000004062866" target="_blank" rel="external">1.Kaedea—Android动态加载技术 简单易懂的介绍</a><br>我们很早开始就在Android项目中采用了动态加载技术，主要目的是为了达到让用户不用重新安装APK就能升级应用的功能（特别是 SDK项目），这样一来不但可以大大提高应用新版本的覆盖率，也减少了服务器对旧版本接口兼容的压力，同时如果也可以快速修复一些线上的BUG。</p>
<p><a href="https://segmentfault.com/a/1190000004062880" target="_blank" rel="external">2.Kaedea—Android动态加载基础 ClassLoader的工作机制</a><br>早期使用过Eclipse等Java编写的软件的同学可能比较熟悉，Eclipse可以加载许多第三方的插件（或者叫扩展），这就是动态加载。这些插件大多是一些Jar包，而使用插件其实就是动态加载Jar包里的Class进行工作。</p>
<p><a href="https://segmentfault.com/a/1190000004062899" target="_blank" rel="external">3.Kaedea—Android动态加载补充 加载SD卡的SO库</a><br>Android中JNI的使用其实就包含了动态加载，APP运行时动态加载.so库并通过JNI调用其封装好的方法。后者一般是使用NDK工具从C/C++代码编译而成，运行在Native层，效率会比执行在虚拟机的Java代码高很多，所以Android中经常通过动态加载.so库来完成一些对性能比较有需求的工作（比如T9搜索、或者Bitmap的解码、图片高斯模糊处理等）。</p>
<p><a href="https://segmentfault.com/a/1190000004062952" target="_blank" rel="external">4.Kaedea—Android动态加载入门 简单加载模式</a><br>Java程序中，JVM虚拟机是通过类加载器ClassLoader加载.jar文件里面的类的。Android也类似，不过Android用的是Dalvik/ART虚拟机，不是JVM，也不能直接加载.jar文件，而是加载dex文件。</p>
<p><a href="https://segmentfault.com/a/1190000004062972" target="_blank" rel="external">5.Kaedea—Android动态加载进阶 代理Activity模式</a><br>简单模式中，使用ClassLoader加载外部的Dex或Apk文件，可以加载一些本地APP不存在的类，从而执行一些新的代码逻辑。但是使用这种方法却不能直接启动插件里的Activity。</p>
<p><a href="https://segmentfault.com/a/1190000004077469" target="_blank" rel="external">6.Kaedea—Android动态加载黑科技 动态创建Activity模式</a><br>还记得我们在代理Activity模式里谈到启动插件APK里的Activity的两个难题吗，由于插件里的Activity没在主项目的Manifest里面注册，所以无法经历系统Framework层级的一系列初始化过程，最终导致获得的Activity实例并没有生命周期和无法使用res资源。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823" target="_blank" rel="external">7.尼古拉斯—插件开发基础篇：动态加载技术解读</a><br>在目前的软硬件环境下，Native App与Web App在用户体验上有着明显的优势，但在实际项目中有些会因为业务的频繁变更而频繁的升级客户端，造成较差的用户体验，而这也恰恰是Web App的优势。本文对网上Android动态加载jar的资料进行梳理和实践在这里与大家一起分享，试图改善频繁升级这一弊病。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/41384667" target="_blank" rel="external">8.尼古拉斯—插件开发开篇：类加载器分析</a><br>这篇文章主要介绍了Android中主要的两个类加载器：PathClassLoader和DexClassLoader,他们的区别，联系，用法等问题，以及我们在制作插件的过程中会遇到哪些常见的问题。这篇文章也是后续两篇文章的基础，因为如果不了解这两个类的话，我们将无法进行后续的操作。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/47679843" target="_blank" rel="external">9.尼古拉斯—插件开发中篇：资源加载问题(换肤原理解析)</a><br>这篇文章主要通过现在一些应用自带的换肤技术的解读来看看，在开发插件的过程中如何解决一些资源加载上的问题，这个问题为何要单独拿出来解释，就是因为他涉及的知识很多，也是后面一篇文章的基础，我们在需要加载插件中的资源文件的时候。</p>
<p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104455" target="_blank" rel="external">10.尼古拉斯—插件开发终极篇：动态加载Activity(免安装运行程序)</a><br>这篇文章主要是讲解了如何加载插件中的Activity。从而实现免安装运行程序，同时这篇文章也是对前三篇文章知识的综合使用。下载很多应用都会使用到插件技术，因为包的大小和一些功能的优先级来决定哪些模块可以制作成插件。</p>
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="external">11.Weishu—Android插件化原理解析——概要</a><br>类的加载可以使用Java的ClassLoader机制，但是对于Android来说，并不是说类加载进来就可以用了，很多组件都是有“生命”的；因此对于这些有血有肉的类，必须给它们注入活力，也就是所谓的组件生命周期管理.</p>
<p><a href="http://weishu.me/2016/01/28/understand-plugin-framework-proxy-hook/" target="_blank" rel="external">12.Weishu—Android插件化原理解析——Hook机制之动态代理</a><br>使用代理机制进行API Hook进而达到方法增强是框架的常用手段，比如J2EE框架Spring通过动态代理优雅地实现了AOP编程，极大地提升了Web开发效率；同样，插件框架也广泛使用了代理机制来增强系统API从而达到插件化的目的.</p>
<p><a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/" target="_blank" rel="external">13.Weishu—Android插件化原理解析——Hook机制之Binder Hook</a><br>Android系统通过Binder机制给应用程序提供了一系列的系统服务，诸如ActivityManagerService，ClipboardManager， AudioManager等；这些广泛存在系统服务给应用程序提供了诸如任务管理，音频，视频等异常强大的功能。</p>
<p><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/" target="_blank" rel="external">14.Weishu—Android 插件化原理解析——Hook机制之AMS&amp;PMS</a><br>在前面的文章中我们介绍了DroidPlugin的Hook机制，也就是代理方式和Binder Hook；插件框架通过AOP实现了插件使用和开发的透明性。在讲述DroidPlugin如何实现四大组件的插件化之前，有必要说明一下它对AMS以及PMS的Hook方式。</p>
<p><a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/" target="_blank" rel="external">15.Weishu—Android 插件化原理解析——Activity生命周期管理</a><br>之前的 Android插件化原理解析 系列文章揭开了Hook机制的神秘面纱，现在我们手握倚天屠龙，那么如何通过这种技术完成插件化方案呢？具体来说，插件中的Activity，Service等组件如何在Android系统上运行起来？</p>
<p><a href="http://weishu.me/2016/04/05/understand-plugin-framework-classloader/" target="_blank" rel="external">16.Weishu—Android 插件化原理解析——插件加载机制</a><br>上文 Activity生命周期管理 中我们地完成了『启动没有在AndroidManifest.xml中显式声明的Activity』的任务；通过Hook AMS和拦截ActivityThread中H类对于组件调度我们成功地绕过了AndroidMAnifest.xml的限制。</p>
<p><a href="http://weishu.me/2016/04/12/understand-plugin-framework-receiver/" target="_blank" rel="external">17.Weishu—Android插件化原理解析——广播的管理</a><br>在Activity生命周期管理 以及 插件加载机制 中我们详细讲述了插件化过程中对于Activity组件的处理方式，为了实现Activity的插件化我们付出了相当多的努力；那么Android系统的其他组件，比如BroadcastReceiver，Service还有ContentProvider，它们又该如何处理呢？</p>
<p><a href="http://weishu.me/2016/05/11/understand-plugin-framework-service/" target="_blank" rel="external">18.Weishu—Android 插件化原理解析——Service的插件化</a><br>在 Activity生命周期管理 以及 广播的管理 中我们详细探讨了Android系统中的Activity、BroadcastReceiver组件的工作原理以及它们的插件化方案，相信读者已经对Android Framework和插件化技术有了一定的了解；</p>
<p><strong>类库</strong><br><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">1.DroidPlugin</a><br>是360手机助手在Android系统上实现了一种新的插件机制<br><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">2.Android-Plugin-Framework</a><br>此项目是Android插件开发框架完整源码及示例。用来通过动态加载的方式在宿主程序中运行插件APK。<br><a href="https://github.com/wequick/Small" target="_blank" rel="external">3.Small</a><br>世界那么大，组件那么小。Small，做最轻巧的跨平台插件化框架。里面有很详细的文档<br><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">4.dynamic-load-apk</a><br>Android 使用动态加载框架DL进行插件化开发<br><a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">5.AndroidDynamicLoader</a><br>Android 动态加载框架，他不是用代理 Activity 的方式实现而是用 Fragment 以及 Schema 的方式实现<br><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">6.DynamicAPK</a><br>实现Android App多apk插件化和动态加载，支持资源分包和热修复.携程App的插件化和动态加载框架.<br><a href="https://github.com/bunnyblue/ACDD/blob/master/README-Zh.md" target="_blank" rel="external">7.ACDD</a><br>非代理Android动态部署框架<br><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">8.android-pluginmgr</a><br>不需要插件规范的apk动态加载框架。</p>
<p><strong>参考视频</strong><br><a href="http://www.infoq.com/cn/presentations/the-realization-principle-and-application-of-droidplugin" target="_blank" rel="external">1.DroidPlugin的实现原理及其应用</a><br>Droid Plugin是360手机助手在2015年初研发的一个全新的基于Android平台的插件机制.<br><a href="http://v.youku.com/v_show/id_XNTMzMjYzMzM2.html" target="_blank" rel="external">2.android插件化及动态部署</a><br>阿里技术沙龙第十六期《android插件化及动态部署》视频</p>
<p><strong>最近期待</strong></p>
<p><a href="2016/12/27/VirtualAPK-滴滴-Android-插件化的实践之路/">VirtualAPK: 滴滴 Android 插件化的实践之路</a></p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 组件化和插件化开发]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/03/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E6%8F%92%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>重点是末尾开源框架列表</p>
</blockquote>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fda139k6jgj30fa080mxf.jpg" alt=""></p>
<p>组件化开发就是将一个app分成多个模块，每个模块都是一个组件（Module），开发的过程中我们可以让这些组件相互依赖或者单独调试部分组件等，但是最终发布的时候是将这些组件合并统一成一个apk，这就是组件化开发。</p>
<p>插件化开发和组件化开发略有不用，插件化开发时将整个app拆分成很多模块，这些模块包括一个宿主和多个插件，每个模块都是一个apk（组件化的每个模块是个lib），最终打包的时候将宿主apk和插件apk分开或者联合打包。</p>
<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>android工程的组件一般分为两种，lib组件和application组件</p>
<p>application组件是指该组件本身就可以运行并打包成apk</p>
<p>lib组件是指该组件属于app的一部分，可以供其它组件使用但是本身不能打包成apk</p>
<h4 id="为什么要有组件化？"><a href="#为什么要有组件化？" class="headerlink" title="为什么要有组件化？"></a>为什么要有组件化？</h4><p>加入一个app工程只有一个组件，随着app业务的壮大模块越来越多，代码量超10万是很正常的，这个时候我们会遇到以下问题</p>
<ul>
<li>稍微改动一个模块的一点代码都要编译整个工程，耗时耗力</li>
<li>公共资源、业务、模块混在一起耦合度太高</li>
<li>不方便测试</li>
</ul>
<h4 id="组件化正确的姿势"><a href="#组件化正确的姿势" class="headerlink" title="组件化正确的姿势"></a>组件化正确的姿势</h4><p>既然选择使用组件化，那么如何正确的使用它呢？这里给出一种解决方案，如果你有更好的方案，欢迎交流。</p>
<p>我们创建了一个app工程project，默认里面有一个app组件，这个app组件是可以直接运行的。</p>
<p>怎么划分组件呢？</p>
<ul>
<li>1.新建一个lib组件，new Module—&gt;Andorid Library，取名BaseUtilLib，我们将所有的公共的工具类、网络分装等类放在其中</li>
<li>2.新建一个lib组件，BaseReslLib，我们将所有的公共资源、drawable、String等类放在其中</li>
<li>3.将app按照自己的规则划分成多个模块，比如按业务按地区等都可以</li>
<li>4.逐一开发某个模块，比如Test模块，新建一个TestApp组件，TestApp组件引用[1][2]步骤的BaseUtilLib和BaseReslLib，在TestApp组件里添加并引用TestLib组件。在TestLib的activity中写代码写业务逻辑，TestApp只负责跳转和测试</li>
<li>5.将工程中的所有类似TestLib组件（不是TestApp组件）引入到工程的app中<br>看着有点乱，整理出一张图<br><img src="http://img2.tuicool.com/NbQZV3R.png!web" alt="img"></li>
</ul>
<p>这样的好处有</p>
<p>每个模块可以独立开发编译运行</p>
<p>开发单个模块时可以共享资源和工具类</p>
<p>可以针对单个模块测试</p>
<p><a href="https://github.com/halibobo/ModuleBuild" target="_blank" rel="external">demo地址：https://github.com/halibobo/ModuleBuild</a></p>
<h2 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h2><h4 id="为什么有插件化？"><a href="#为什么有插件化？" class="headerlink" title="为什么有插件化？"></a>为什么有插件化？</h4><p>有了组件化，为什么还要用插件化呢？插件化开发总的来说有以下几点好处（不同插件框架不一样）：</p>
<ul>
<li>宿主和插件分开编译</li>
<li>并发开发</li>
<li>动态更新插件</li>
<li>按需下载模块</li>
<li>方法数或变量数爆棚</li>
</ul>
<h4 id="处境"><a href="#处境" class="headerlink" title="处境"></a>处境</h4><p>开放出来的插件化开发框架比较多，他们各自都有自己的优势和和不足，实现的原理也有差别下面列</p>
<h4 id="开源的插件化框架"><a href="#开源的插件化框架" class="headerlink" title="开源的插件化框架"></a>开源的插件化框架</h4><ul>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">Qihoo360/DroidPlugin</a></li>
<li><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">CtripMobile/DynamicAPK</a></li>
<li><a href="https://github.com/mmin18/AndroidDynamicLoader" target="_blank" rel="external">mmin18/AndroidDynamicLoader</a></li>
<li><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">singwhatiwanna/dynamic-load-apk</a></li>
<li><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">houkx/android-pluginmgr</a></li>
<li><a href="https://github.com/bunnyblue/ACDD" target="_blank" rel="external">bunnyblue/ACDD</a></li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">wequick/Small</a></li>
<li>……</li>
</ul>
<p>目前开源的这几个框架有宿主和插件分离的也有融合在一起的，每个框架的详细介绍和demo在github里都可以查看到。插件化demo运行起来比较简单，但是真正将它用到实际项目中还是要考虑很多小细节的，目前我也正处于研究阶段。</p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lottie简介：Airbnb为本地应用程序添加动画的工具(翻译)]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie%EF%BC%88%E7%BF%BB%E8%AF%91%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="简介Lottie"><a href="#简介Lottie" class="headerlink" title="简介Lottie"></a>简介Lottie</h2><blockquote>
<p><a href="http://airbnb.design/lottie/" target="_blank" rel="external">官网地址：http://airbnb.design/lottie/</a></p>
<p><a href="https://github.com/airbnb" target="_blank" rel="external">Airbnb Github地址：https://github.com/airbnb</a></p>
<p>作者：<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>，<a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>，<a href="https://twitter.com/intelligibabble" target="_blank" rel="external">Leland Richardson</a>和<a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">Salih Abdul-Karim</a></p>
<p><a href="http://airbnb.design/category/behind-the-scenes/" target="_blank" rel="external">在幕后</a>  /由SALIH ABDUL-KARIM / 02.03<br><a href="http://airbnb.design/tag/animation/" target="_blank" rel="external">#ANIMATION </a><a href="http://airbnb.design/tag/design/" target="_blank" rel="external">#DESIGN </a><a href="http://airbnb.design/tag/engineering/" target="_blank" rel="external">#ENGINEERING </a><a href="http://airbnb.design/tag/motion/" target="_blank" rel="external">#MOTION </a><a href="http://airbnb.design/tag/open-source/" target="_blank" rel="external">#OPEN SOURCE </a><a href="http://airbnb.design/tag/tools/" target="_blank" rel="external">#TOOLS</a></p>
</blockquote>
<h2 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h2><h3 id="在我们的新的开源动画工具的幕后。"><a href="#在我们的新的开源动画工具的幕后。" class="headerlink" title="在我们的新的开源动画工具的幕后。"></a>在我们的新的开源动画工具的幕后。</h3><p>在过去，为Android，iOS和React Native应用程序构建复杂的动画是一个困难和漫长的过程。你必须为每个屏幕大小添加庞大的图像文件，或者编写一千行脆弱，难以维护的代码。因此，大多数应用程序不使用动画 - 尽管它是一个强大的工具，用于交流想法和创造引人注目的用户体验。一年前，我们开始改变这一点。</p>
<p>今天，我们很乐意介绍我们的解决方案。Lottie是一个iOS，Android和React Native库，可以实时渲染After Effects动画，并允许本机应用程序像使用静态资源一样轻松地使用动画。Lottie使用从开源的After Effects扩展名为<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>导出为JSON文件的动画数据。扩展程序与JavaScript播放器捆绑在一起，可以在网络上呈现动画。自2015年2月以来，Bodymovin的创始人<a href="https://twitter.com/airnanan" target="_blank" rel="external">Hernan Torrisi</a>已经通过每月为插件添加功能和改进功能打下坚实的基础。我们的团队（<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>的<a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>，<a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>的<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>，</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt="图标"></p>
<p>Lottie允许工程师构建更丰富的动画，而没有重写他们的艰苦的开销。Nick Butcher <a href="https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.xlw1n2u2d" target="_blank" rel="external">跳过</a>动画，Bartek Lipinski的<a href="https://android.jlelse.eu/animatedvectordrawablecompat-3d9568727c53#.fmiujhcdj" target="_blank" rel="external">汉堡包菜单</a>和Miroslaw Stanek的<a href="http://frogermcs.github.io/twitters-like-animation-in-android-alternative/" target="_blank" rel="external">Twitter心脏</a>展示了多么困难和耗时，可以从头开始重新创建动画。与Lottie，挖掘框架参考，猜测持续时间，手动创建Bézier曲线，并重新制作动画只是一个GIF的参考将是一个过去。现在工程师可以准确地使用设计师的意图，它是如何做的。为了演示这一点，我们重新创建了他们的动画，并在我们的示例应用程序中提供了After Effects和JSON文件。</p>
<p>我们的目标是尽可能支持尽可能多的After Effects功能，以允许比简单的图标动画更多。我们创建了一些其他例子来展示图书馆的灵活性，丰富性和深入的功能集。在示例应用程序中，还有各种不同种类的动画的源文件，包括基本线条艺术，基于字符的动画，以及具有多个角度和剪切的动态徽标动画。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt="screens_1"></p>
<p>我们已经开始在几个屏幕上发布我们自己的Lottie动画，包括应用内通知，全帧动画插图和在我们的审查流程。我们计划以一种有趣而有用的方式大大扩展我们对动画的使用。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt="screens_2"></p>
<h2 id="灵活高效的解决方案"><a href="#灵活高效的解决方案" class="headerlink" title="灵活高效的解决方案"></a><strong>灵活高效的解决方案</strong></h2><p>Airbnb是一家支持数百万客人和主机的全球性公司，因此拥有一个可在多个平台上播放的灵活动画格式对我们来说非常重要。有类似于Lottie的图书馆，如Marcus Eckert的<a href="http://www.marcuseckert.com/squall/" target="_blank" rel="external">Squall</a>和Facebook的<a href="https://github.com/facebookincubator/Keyframes" target="_blank" rel="external">关键帧</a>，但我们的目标略有不同。Facebook选择了一套After Effects功能来支持，因为他们主要关注反应，但我们想尽可能多地支持。对于Squall，Airbnb的设计师将它与Lottie结合使用，因为它有一个惊人的After Effects预览应用程序，它成为我们工作流程的必要部分。但是，它只支持iOS，我们的工程团队需要一个跨平台解决方案。</p>
<p>Lottie还在其API中内置了几个功能，使其更多样化和高效。它支持通过网络加载JSON文件，这对于A / B测试很有用。它还有一个可选的缓存机制，因此经常使用的动画，如愿望列表的心，可以每次加载缓存的副本。Lottie动画可以通过使用动画进度功能的手势驱动，并且动画速度可以通过改变一个简单的值来操纵。iOS甚至支持在运行时为动画添加额外的本地UI，可用于复杂的动画过渡。</p>
<p>除了我们迄今为止所做的所有After Effects特性和API添加之外，我们还有许多未来的想法。这些包括将视图映射到Lottie动画，控制与Lottie的视图过渡，支持<a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">Battle Axe的RubberHose</a>，渐变，类型和图像支持。最难的部分是选择哪些功能来处理下一个。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt="硬件"></p>
<h2 id="建筑社区"><a href="#建筑社区" class="headerlink" title="建筑社区"></a><strong>建筑社区</strong></h2><p>发布一些东西作为开源不仅仅是把它放在那里供公众使用。它是一个桥梁，连接人和创建社区。随着我们越来越接近通过GitHub向设计师和工程师发布Lottie，我们也希望与动画人员保持联系。</p>
<p>我们受到了<a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>，<a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external">Motion Corpse</a>和<a href="https://animography.net/products/mobilo" target="_blank" rel="external">Animography</a>创造的<a href="https://animography.net/products/mobilo" target="_blank" rel="external">社区的启发</a>。所有这三个人都聚集了来自世界各地的人，否则他们永远不会一起工作，在公共动画项目上合作。这些项目需要几个月的工作，很多组织和各自的团队争吵，但他们无疑为整个动画社会提供巨大的价值。运动公司和动画公开共享After Effects源文件，它提供了大量的洞察人们如何工作。</p>
<p>在他们的合作领导下，我们接触了所有三个团队，为我们的示例应用程序贡献动画。我们已经包括了由JR Canest创建的Motion Corpse的动画，来自9 Squares项目的Al Boardman的方块之一，以及使用Animography的Mobilo动画字体的动画键盘，其中包含超过二十个艺术家的作品。我们希望这些动画社区与强大的工程社群的合并将产生一些特别的东西。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt="社区">我们很想听听你如何使用Lottie - 无论你是一个设计师，动画师或工程师。欢迎随时通过lottie@airbnb.com与您的想法，反馈和见解联系。我们很高兴看到当他们开始以我们从未想象的方式使用Lottie时，世界上的社区会做什么。</p>
<h3 id="下载Bodymovin，Lottie-iOS，Android和React-Native。"><a href="#下载Bodymovin，Lottie-iOS，Android和React-Native。" class="headerlink" title="下载Bodymovin，Lottie iOS，Android和React Native。"></a>下载<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>，Lottie <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>，<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>和<a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>。</h3><p>本文由<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>，  <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a>  和  <a href="http://airbnb.design/lottie/" target="_blank" rel="external">Salih Abdul-Karim](https://twitter.com/therealsalih?lang=en)共同撰写   。 </a></p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> ui </tag>
            
            <tag> 开源 </tag>
            
            <tag> Airbnb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lottie简介：Airbnb为本地应用程序添加动画的工具(原文)]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/03/Introducing-Lottie-%E5%8E%9F%E6%96%87/</url>
      <content type="html"><![CDATA[<p><a href="http://airbnb.design/category/behind-the-scenes/" target="_blank" rel="external">BEHIND THE SCENES</a>     /  BY SALIH ABDUL-KARIM / 02.03<br><a href="http://airbnb.design/tag/animation/" target="_blank" rel="external">#ANIMATION</a> <a href="http://airbnb.design/tag/design/" target="_blank" rel="external">#DESIGN</a> <a href="http://airbnb.design/tag/engineering/" target="_blank" rel="external">#ENGINEERING</a> <a href="http://airbnb.design/tag/motion/" target="_blank" rel="external">#MOTION</a> <a href="http://airbnb.design/tag/open-source/" target="_blank" rel="external">#OPEN SOURCE</a> <a href="http://airbnb.design/tag/tools/" target="_blank" rel="external">#TOOLS</a></p>
<h2 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h2><h3 id="Behind-the-scenes-of-our-new-open-source-animation-tool"><a href="#Behind-the-scenes-of-our-new-open-source-animation-tool" class="headerlink" title="Behind the scenes of our new open-source animation tool."></a>Behind the scenes of our new open-source animation tool.</h3><p>In the past, building complex animations for Android, iOS, and React Native apps was a difficult and lengthy process. You either had to add bulky image files for each screen size or write a thousand lines of brittle, hard-to-maintain code. Because of this, most apps weren’t using animation — despite it being a powerful tool for communicating ideas and creating compelling user experiences. One year ago, we set out to change that.</p>
<p>Today, we’re happy to introduce our solution. Lottie is an iOS, Android, and React Native library that renders After Effects animations in real time, and allows native apps to use animations as easily as they use static assets. Lottie uses animation data exported as JSON files from an open-source After Effects extension called <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>. The extension is bundled with a JavaScript player that can render the animations on the web. Since February of 2015, Bodymovin’s creator, <a href="https://twitter.com/airnanan" target="_blank" rel="external">Hernan Torrisi</a>, has built a solid foundation by adding features and improvements to the plugin on a monthly basis. Our team (<a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a> on <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a> on <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a>, <a href="https://twitter.com/intelligibabble" target="_blank" rel="external">Leland Richardson</a> on <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>, and <a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">I</a> on experience design) began our journey by building on top of Torrisi’s phenomenal work.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt="icons"></p>
<p>Lottie allows engineers to build richer animations without the painstaking overhead of re-writing them. Nick Butcher’s<a href="https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.xlw1n2u2d" target="_blank" rel="external"> jump through</a> animation, Bartek Lipinski’s <a href="https://android.jlelse.eu/animatedvectordrawablecompat-3d9568727c53#.fmiujhcdj" target="_blank" rel="external">hamburger menu</a>, and Miroslaw Stanek’s <a href="http://frogermcs.github.io/twitters-like-animation-in-android-alternative/" target="_blank" rel="external">Twitter heart</a> demonstrate just how difficult and time consuming it can be to re-create animations from scratch. With Lottie, digging through frameworks for reference, guessing durations, manually creating Bézier curves, and re-making animations with nothing more than a GIF for reference will be a thing of the past. Now engineers can use exactly what the designer intended, exactly how it was made. To demonstrate that, we’ve recreated their animations and provided After Effects and JSON files of each in our sample app.</p>
<p>Our goal is to support as many After Effects features as we possibly can, to allow for a lot more than simple icon animations. We’ve created a handful of other examples to show the library’s flexibility, richness, and deep feature set. In the sample app, there are also source files for a variety of different kinds of animations, including basic line art, character-based animations, and dynamic logo animations with multiple angles and cuts.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt="screens_1"></p>
<p>We’ve already started shipping our own Lottie animations on several screens, including in-app notifications, full-frame animated illustrations, and in our review flow. And we plan to greatly expand our usage of animations in a fun yet useful way moving forward.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt="screens_2"></p>
<h2 id="Flexible-and-efficient-solution"><a href="#Flexible-and-efficient-solution" class="headerlink" title="Flexible and efficient solution"></a><strong>Flexible and efficient solution</strong></h2><p>Airbnb is a global company that supports millions of guests and hosts, so having a flexible animation format that is playable on multiple platforms was extremely important to us. There are libraries similar to Lottie, such as Marcus Eckert’s <a href="http://www.marcuseckert.com/squall/" target="_blank" rel="external">Squall</a> and Facebook’s <a href="https://github.com/facebookincubator/Keyframes" target="_blank" rel="external">Keyframes</a>, but our goals are slightly different. Facebook picked a small set of After Effects features to support, since they were focusing mainly on reactions, but we want to support as many as possible. As for Squall, designers at Airbnb use it in combination with Lottie because it has an amazing After Effects preview app that’s become a necessary part of our workflow. However, it only supports iOS and our engineering teams needed a cross-platform solution.</p>
<p>Lottie also has several features built into its API to make it more versatile and efficient. It supports loading JSON files over the network, which is useful for A/B testing. It also has an optional caching mechanism, so frequently used animations, such as a wish-list heart, can load a cached copy each time. Lottie animations can be driven by gestures using the animated progress feature, and animation speed can be manipulated by changing a simple value. iOS even supports adding additional native UI to an animation at runtime, which can be used for complex animated transitions.</p>
<p>In addition to all of the After Effects features and API additions we’ve worked on so far, we have many ideas for the future. These include mapping views to Lottie animations, controlling view transitions with Lottie, support for <a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">Battle Axe’s RubberHose</a>, gradient, type, and image support. The hardest part is picking which features to tackle next.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt="hardware"></p>
<h2 id="Building-community"><a href="#Building-community" class="headerlink" title="Building community"></a><strong>Building community</strong></h2><p>Releasing something as open source is more than just putting it out there for the public to use. It’s a bridge that connects people and creates community. As we got closer to releasing Lottie to designers and engineers via GitHub, we wanted to be sure to connect with the animation folks as well.</p>
<p>We were inspired by the communities that <a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>, <a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external">Motion Corpse</a>, and <a href="https://animography.net/products/mobilo" target="_blank" rel="external">Animography</a> have created. All three have brought together people from around the world, who otherwise would never have worked together, to collaborate on public animation projects. These projects take months of work and a lot of organization and wrangling by the respective teams, but they undoubtedly provide immense value for the animation community as a whole. Motion Corpse and Animography publicly share the After Effects source files as well, which provide tons of insights on how people work.</p>
<p>Following their collaborative lead, we reached out to all three teams to contribute animations to our sample app. We’ve included an animation from Motion Corpse created by J.R. Canest, one of Al Boardman’s squares from the 9 Squares project, and an animated keyboard using Animography’s Mobilo animated typeface, which features work from more than two dozen artists. We’re hoping that the merging of these animation communities with the powerful engineering community will spark something special.</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt="community">We’d love to hear how you’re using Lottie — no matter if you’re a designer, animator, or engineer. Feel free to reach out to us directly at lottie@airbnb.com with your thoughts, feedback, and insights. We’re excited to see what the community around the world will do when they begin to use Lottie in ways we never imagined.</p>
<h3 id="Download-Bodymovin-Lottie-iOS-Android-and-React-Native"><a href="#Download-Bodymovin-Lottie-iOS-Android-and-React-Native" class="headerlink" title="Download Bodymovin, Lottie iOS, Android and React Native."></a>Download <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>, Lottie <a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a> and <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>.</h3><p>This article was co-written by  <a href="http://github.com/buba447" target="_blank" rel="external">Brandon Withrow</a>,  <a href="https://twitter.com/gpeal8" target="_blank" rel="external">Gabriel Peal</a> and <a href="https://twitter.com/therealsalih?lang=en" target="_blank" rel="external">Salih Abdul-Karim</a>.</p>
<p><img src="http://airbnb.design/lottie/" alt="Salih Abdul-Karim](http://airbnb.design/wp-content/uploads/2017/01/SalihAbdul-Karim-profile.jpg) Salih Abdul-Karim is an Experience and Motion Designer at Airbnb."></p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> ui </tag>
            
            <tag> 开源 </tag>
            
            <tag> Airbnb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bugly实现热更新]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/01/Bugly%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>推荐阅读：<a href="http://www.jianshu.com/p/2d0f70e30111#" target="_blank" rel="external">Bugly热更新SDK你需要知道的一些事</a></p>
</blockquote>
<p>列举一些大家比较熟悉的一些热更新方案：</p>
<p>微信开源：<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Tinker</a><br>大众点评：<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a><br>阿里巴巴：<a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">Dexposed</a><br>阿里巴巴：<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a><br>美团：<a href="http://tech.meituan.com/android_robust.html" target="_blank" rel="external">Robust</a></p>
<p><strong>Bugly也是出于高可用性的考虑，Tinker支持动态下发代码、So库以及资源，所以我们最终选择了Tinker方案作为我们SDK的一项能力。</strong></p>
<p><a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20170205190410" target="_blank" rel="external">Bugly热修复官方文档</a></p>
<h3 id="一、配置参数"><a href="#一、配置参数" class="headerlink" title="一、配置参数"></a>一、配置参数</h3><ul>
<li><strong>添加插件依赖</strong></li>
</ul>
<p>工程根目录下“build.gradle”文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        // tinkersupport插件，其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.0.3</div><div class="line">        classpath &quot;com.tencent.bugly:tinker-support:latest.release&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、集成SDK"><a href="#二、集成SDK" class="headerlink" title="二、集成SDK"></a>二、集成SDK</h3><ul>
<li><strong>gradle配置</strong></li>
</ul>
<p>在app module的“build.gradle”文件中添加（示例配置）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">      compile &quot;com.android.support:multidex:1.0.1&quot; </div><div class="line">      compile &apos;com.tencent.bugly:crashreport_upgrade:latest.release&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在app module的“build.gradle”文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 依赖插件脚本</div><div class="line">apply from: &apos;tinker-support.gradle&apos;</div></pre></td></tr></table></figure>
<ul>
<li><strong>tinker-support.gradle</strong>内容如下所示（示例配置）：</li>
</ul>
<p><em>需要在同级目录下创建tinker-support.gradle这个文件</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.tencent.bugly.tinker-support&apos;</div><div class="line"></div><div class="line">def bakPath = file(&quot;$&#123;buildDir&#125;/bakApk/&quot;)</div><div class="line"></div><div class="line">def appName = &quot;app-0111-15-18-41&quot;</div><div class="line"></div><div class="line">/**</div><div class="line">* 对于插件各参数的详细解析请参考</div><div class="line">*/</div><div class="line">tinkerSupport &#123;</div><div class="line"></div><div class="line">    // 开启tinker-support插件，默认值true</div><div class="line">    enable = true</div><div class="line"></div><div class="line">    // 指定归档目录，默认值当前module的子目录tinker</div><div class="line">    autoBackupApkDir = &quot;$&#123;bakPath&#125;&quot;</div><div class="line"></div><div class="line">    // 是否启用覆盖tinkerPatch配置功能，默认值false</div><div class="line">    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</div><div class="line">    overrideTinkerPatchConfiguration = true</div><div class="line"></div><div class="line">    // 编译补丁包时，必需指定基线版本的apk，默认值为空</div><div class="line">    // 如果为空，则表示不是进行补丁包的编译</div><div class="line">    // @&#123;link tinkerPatch.oldApk &#125;</div><div class="line">    baseApk =  &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release.apk&quot;</div><div class="line"></div><div class="line">    // 对应tinker插件applyMapping</div><div class="line">    baseApkProguardMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-mapping.txt&quot;</div><div class="line"></div><div class="line">    // 对应tinker插件applyResourceMapping</div><div class="line">    baseApkResourceMapping = &quot;$&#123;bakPath&#125;/$&#123;appName&#125;/app-release-R.txt&quot;</div><div class="line"></div><div class="line">    // 唯一标识当前版本</div><div class="line">    tinkerId = &quot;1.0.1-base&quot;</div><div class="line"></div><div class="line">    // 是否开启代理Application，设置之后无须改造Application，默认为false</div><div class="line">    enableProxyApplication = false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、初始化SDK"><a href="#三、初始化SDK" class="headerlink" title="三、初始化SDK"></a>三、初始化SDK</h3><p><strong>enableProxyApplication = false 的情况</strong></p>
<ul>
<li>自定义Application</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class SampleApplication extends TinkerApplication &#123;</div><div class="line">    public SampleApplication() &#123;</div><div class="line">        super(ShareConstants.TINKER_ENABLE_ALL, &quot;com.yiba.test.buglypatch.SampleApplicationLike&quot;,</div><div class="line">                &quot;com.tencent.tinker.loader.TinkerLoader&quot;, false);</div><div class="line">    &#125;</div><div class="line">&#125;123456123456</div></pre></td></tr></table></figure>
<ul>
<li>自定义ApplicationLike</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class SampleApplicationLike extends DefaultApplicationLike &#123;</div><div class="line"></div><div class="line">    public static final String TAG = &quot;Tinker.SampleApplicationLike&quot;;</div><div class="line"></div><div class="line">    public SampleApplicationLike(Application application, int tinkerFlags,</div><div class="line">            boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime,</div><div class="line">            long applicationStartMillisTime, Intent tinkerResultIntent, Resources[] resources,</div><div class="line">            ClassLoader[] classLoader, AssetManager[] assetManager) &#123;</div><div class="line">        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime,</div><div class="line">                applicationStartMillisTime, tinkerResultIntent, resources, classLoader,</div><div class="line">                assetManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        // 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</div><div class="line">        Bugly.init(getApplication(), &quot;900029763&quot;, true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    @Override</div><div class="line">    public void onBaseContextAttached(Context base) &#123;</div><div class="line">        super.onBaseContextAttached(base);</div><div class="line">        // you must install multiDex whatever tinker is installed!</div><div class="line">        MultiDex.install(base);</div><div class="line"></div><div class="line">        // 安装tinker</div><div class="line">        // TinkerManager.installTinker(this); 替换成下面Bugly提供的方法</div><div class="line">        Beta.installTinker(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    public void registerActivityLifecycleCallback(Application.ActivityLifecycleCallbacks callbacks) &#123;</div><div class="line">        getApplication().registerActivityLifecycleCallbacks(callbacks);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、AndroidManifest-xml配置"><a href="#四、AndroidManifest-xml配置" class="headerlink" title="四、AndroidManifest.xml配置"></a>四、AndroidManifest.xml配置</h3><ul>
<li>权限配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Activity配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=&quot;com.tencent.bugly.beta.ui.BetaActivity&quot;</div><div class="line">    android:theme=&quot;@android:style/Theme.Translucent&quot; /&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>配置FileProvider（<a href="http://lib.csdn.net/base/android" target="_blank" rel="external">Android</a> N之后配置）</p>
<p>见<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20170205190410" target="_blank" rel="external">文档</a></p>
</li>
</ul>
<h3 id="五、混淆配置"><a href="#五、混淆配置" class="headerlink" title="五、混淆配置"></a>五、混淆配置</h3><p>为了避免混淆SDK，在Proguard混淆文件中增加以下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-dontwarn com.tencent.bugly.**</div><div class="line">-keep public class com.tencent.bugly.**&#123;*;&#125;</div></pre></td></tr></table></figure>
<p>如果你使用了support-v4包，你还需要配置以下混淆规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-keep class android.support.**&#123;*;&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="六、编译基准包"><a href="#六、编译基准包" class="headerlink" title="六、编译基准包"></a>六、编译基准包</h3><p>基准包就是原先运行有bug的包。</p>
<p>点击Android Studio右上角的Gradle按钮，找到项目的assembleRelease任务，双击执行assembleRelease任务。</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/K%29RNI48%5DNN%28PS~MG%5B3LK%7BEK.png" alt="image"></p>
<p>任务执行完成后，会在build的目录下生成如下文件：</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/RCMZ3Q%29%5D7B%7B_YYQ%28HC6$RTS.png" alt="image"></p>
<h3 id="七、修复基准版代码"><a href="#七、修复基准版代码" class="headerlink" title="七、修复基准版代码"></a>七、修复基准版代码</h3><p>修复前代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class BugClass &#123;</div><div class="line"></div><div class="line">    public String bug() &#123;</div><div class="line">        String str = &quot;This is a bug&quot;;</div><div class="line">        str = null;</div><div class="line">        Log.e(&quot;zhang&quot;, &quot;BugClass --&gt; bug--&gt; str length :&quot; + str.length());</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>修复后代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class BugClass &#123;</div><div class="line"></div><div class="line">    public String bug() &#123;</div><div class="line">        String str = &quot;This is a bug&quot;;</div><div class="line">//        str = null;</div><div class="line">        Log.e(&quot;zhang&quot;, &quot;BugClass --&gt; bug--&gt; str length :&quot; + str.length());</div><div class="line">        return str + &quot;  , fixed!!!&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>调用代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button btn = (Button) findViewById(R.id.btn);</div><div class="line"></div><div class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                BugClass bugClass = new BugClass();</div><div class="line">                String bug = bugClass.bug();</div><div class="line">                Toast.makeText(MainActivity.this, bug, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="八、生成补丁包"><a href="#八、生成补丁包" class="headerlink" title="八、生成补丁包"></a>八、生成补丁包</h3><ul>
<li>修改appName名称以及文件名称都需要保持一致。同时将基准包的tinkerid=1.0.1-base改为补丁包的tinkerid=1.0.1-patch。</li>
</ul>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/R4TK_IQ9@7JMDN4H%289A7HLH.png" alt="image"></p>
<ul>
<li><strong>生成补丁包</strong></li>
</ul>
<p>执行生成补丁包的任务操作：</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/GD8C4NOLEE0%5BBBLFB_R4%29$U.png" alt="image"></p>
<p>任务执行完之后，会生成3个文件，其中patch_signed_7zip.apk是我们需要的补丁包</p>
<p><img src="http://oe9ggtbcb.bkt.clouddn.com/E4TCAATO%5B4E%602_S5PO6%5B0G6.png" alt="image"></p>
<p>将补丁包上传至bugly的应用升级模块的热更新中</p>
<p>具体见<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/?v=20170205190410" target="_blank" rel="external">bugly的官方文档</a>。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd7nh2frm9j30wb0b641r.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TBS服务报告]]></title>
      <url>http://wanghaonanlpc.github.io/2017/03/01/TBS%E6%9C%8D%E5%8A%A1%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>TBS服务报告(2017.02)</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIyNTU2NzUyMw==&amp;mid=2247483672&amp;idx=1&amp;sn=d495422f7e213b2fe14705b06e751ca6&amp;chksm=e87cf754df0b7e426872107b7ece14fefe42b4f2f3a71ce87aaed65251ed451b9dc69800cc1f&amp;scene=0&amp;key=b531a7627afeba4885945c32a7d62783d64c062be87a9233bf64113c8d72153b00932a9b3c1b8174a578df1829e2a6e024c7351fc084b63ea7652ea394992f7d694cf57c10c3ced9a012f14d6bf7f986&amp;ascene=0&amp;uin=MjUxOTYwNTg4MA%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.12.3+build(16D32" target="_blank" rel="external"><strong>原文地址：腾讯浏览服务微信公众号</strong></a>&amp;version=12020010&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=grDPWOVxL4siCpybSzNJTRq4JUQ%2BB9fYOJjkMX%2F6Nrg8M3eEasftcW1DlLNM9tFF)</p>
<p>2017-02-28 腾讯浏览服务</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fd73d3qsvzj30hs0a0jrr.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd73dgg4vrj30hs0a0wer.jpg" alt=""></p>
<p>Part 1.版本信息：TBS3.0.1版本</p>
<p>发布计划</p>
<p>已全量发布</p>
<p>版本特性</p>
<p>升级至Chromium53版本（历史版本为Chromium37版本），内核核心能力全面提升，更多信息请参考官网x5.tencent.com</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73dqa04sj30fg0b1wfa.jpg" alt=""></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73dvdfasj30fg0b1gmk.jpg" alt=""></p>
<p>Part 1.版本信息：在研版本</p>
<p>在研版本</p>
<p>TBS3.1</p>
<p>版本特性</p>
<p>内核启动速度提升（冷启动场景下提升30%）、TLS占用减少（12个 降低为1个）、稳定性全面优化，提升内核核心基础能力；AR能力带出</p>
<p>发布情况</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fd73e1ngftj30hs00tt8q.jpg" alt=""></p>
<p>Part 2.大盘数据情况：日浏览量</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73e5xgbej30hs0a9wfs.jpg" alt=""></p>
<p>Part 2.大盘数据情况：日承载用户数</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd73eabx09j30hs0aj75l.jpg" alt=""></p>
<p>Part 3.TBS技术前沿：Content Cache开启</p>
<p>技术简介</p>
<p>Content Cache是内存级别的缓存，在切换页面时，被切换出去的页面所对应的内核模型被存储在内存的缓冲区中，再前进后退到该页面时，会从内存缓冲区取出该页面对应的内核模型直接进行处理，无需重新加载解析排版再构建该模型</p>
<p>技术价值</p>
<p>为解决前进后退中重新网络请求，内核解析渲染造成的流量浪费和不够流畅的体验问题，提升页面切换平滑体验；目前X5内核已支持根据App或者域名等多纬度动态开启或关闭Content Cache</p>
<p>当前规划</p>
<p>已随TBS2.5版本带出，目前根据合作方需求开启，预计年后将择期全面放开</p>
<p>Part 3.TBS技术前沿：ReactNative能力</p>
<p>技术简介</p>
<p>参考<a href="http://reactnative.cn/" target="_blank" rel="external">http://reactnative.cn/</a></p>
<p>技术价值</p>
<p>当前TBS将ReactNative中所使用的JS引擎替换成了X5内核的V8引擎，接入TBS后可以为后续引入ReactNative时App包大小减少1M左右，并且稳定性和性能都有显著提升。未来会输出ReactNative的整体接入技术方案，App如果需要接入ReactNative只需要接入TBS SDK即可。</p>
<p>当前状态</p>
<p>手机QQ、QQ浏览器已经接入完成。</p>
<p>Part 3.TBS技术前沿：AR能力</p>
<p>技术简介</p>
<p>TBS将集成AR的能力提供给前端开发者使用，包括使用摄像头的能力，优化用户体验的AR播放器以及准确高效的实时识别建模能力</p>
<p>技术价值</p>
<p>AR是当前最火热的前沿领域之一，目前的应用主要还是在native使用，而Web上对AR能力的支持将提供给AR应用更大想象空间，结合Web的优势诞生更多具有创意的AR应用</p>
<p>当前规划</p>
<p>摄像头能力和AR播放器已在TBS2.5版本带出，识别能力将在3.1版本带出，并在后续版本持续扩展，AR开放平台正在搭建中，计划上半年完成</p>
<p>Part 4. 行业趋势报告</p>
<p>AR&amp;VR</p>
<p>AR和VR的设备成本在持续下降，相关标准正在建立之中，而app应用的生态圈也正在开始浮现。浏览服务也已开始投入AR和VR基础能力建设工作，预计近期将有所落地。</p>
<p>https迁移</p>
<p>http向https的迁移大势已定，浏览服务也已基本完成部门内业务的https迁移工作并积累了一些部署和优化经验（例如https防劫持等），进一步的深入优化继续开展中。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd73ei8zj2j30hs0a0mxb.jpg" alt=""></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd73eonqpcj303l03laa3.jpg" alt=""></p>
<p>微信扫一扫</p>
<p>关注该公众号</p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[8阶单元5词汇]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/28/8%E9%98%B6%E5%8D%95%E5%85%835%E8%AF%8D%E6%B1%87/</url>
      <content type="html"><![CDATA[<p>8级 单元 5</p>
<p>belt    [英式][belt] [美式][belt]    noun    腰带, 皮带<br>blouse    [英式] [blaʊz] [美式] [blaʊs]    noun    女式罩衫<br>cashmere    [英式] [ˈkæʃmɪə(r)] [美式] [ˈkæʒmɪr]    noun    山羊绒<br>disappointed    [英式] [ˌdɪsəˈpɔɪntɪd] [美式] [ˌdɪsəˈpɔɪntɪd]    adj.    感到失望的, 灰心的<br>enthusiastic    [英式][ɪnˌθjuːziˈæstɪk] [美式][ɪnˌθuːziˈæstɪk]    adj.    热情的<br>exquisite    [英式] [ɪkˈskwɪzɪt] [美式] [ɪkˈskwɪzɪt]    adj.    精美<br>genuine    [英式][ˈdʒenjuɪn] [美式][ˈdʒenjuɪn]    adj.    真实的, 纯正的<br>handmade    [英式][ˌhændˈmeɪd] [美式][ˌhændˈmeɪd]    adj.    手工制造<br>neutral    [英式][ˈnjuːtrəl] [美式][ˈnuːtrəl]    adj.    无明显特性的<br>skinny    [英式] [ˈskɪni] [美式] [ˈskɪni]    adj.    枯瘦的,骨瘦如柴的<br>soft    [英式] [sɒft] [美式] [sɔːft]    adj.    柔软的<br>turquoise    [英式] [ˈtɜːkwɔɪz] [美式] [ˈtɜːrkwɔɪz]    noun    蓝绿色<br>unique    [英式] [juˈniːk] [美式] [juˈniːk]    adj.    独一无二的, 独有的, 独特的<br>blend    [英式] [blend] [美式] [blend]    noun    混合物;(不同类型东西的)混合品<br>cashier    [英式] [kæˈʃɪə(r)] [美式] [kæˈʃɪr]    noun    收银员<br>debit card        noun    借记卡<br>percentage    [英式] [pəˈsentɪdʒ] [美式] [pərˈsentɪdʒ]    noun    百分比; 百分率,比例,部分<br>press    [英式] [pres] [美式] [pres]    verb    压, 贴, 挤<br>sales tax        noun    营业税, 销售税<br>sign    [英式] [saɪn] [美式] [saɪn]    verb    签名<br>slide    [英式] [slaɪd] [美式] [slaɪd]    verb    滑, 滑动<br>total    [英式] [ˈtəʊtl] [美式] [ˈtoʊtl]    adj.    总计的, 全体的, 总括的, 总体的<br>within    [英式] [wɪˈðɪn] [美式] [wɪˈðɪn]    prep.    在……之内<br>describe    [英式] [dɪˈskraɪb] [美式] [dɪˈskraɪb]    verb    描述<br>flat    [英式] [flæt] [美式] [flæt]    adj.    平的<br>heated    [英式] [ˈhiːtɪd] [美式] [ˈhiːtɪd]    adj.    加热<br>humankind    [英式] [ˌhjuːmənˈkaɪnd] [美式] [ˌhjuːmənˈkaɪnd]    noun    人类<br>invent    [英式] [ɪnˈvent] [美式] [ɪnˈvent]    verb    发明, 创造<br>mobile    [英式] [ˈməʊbaɪl] [美式] [ˈmoʊbl]    adj.    可移动的, 非固定的<br>organization    [英式] [ˌɔːɡənaɪˈzeɪʃn] [美式] [ˌɔːrɡənəˈzeɪʃn]    noun    组织, 机构<br>revolution    [英式] [ˌrevəˈluːʃn] [美式] [ˌrevəˈluːʃn]    noun    革命<br>run    [英式] [rʌn] [美式] [rʌn]    verb    经营<br>touch screen        noun    触摸屏<br>video game        noun    电视游戏<br>wall    [英式] [wɔːl] [美式] [wɔːl]    noun    墙, 墙壁, 围墙<br>battery    [英式] [ˈbætri] [美式] [ˈbætri]    noun    电池<br>chat    [英式] [tʃæt] [美式] [tʃæt]    verb    聊天<br>connection    [英式] [kəˈnekʃn] [美式] [kəˈnekʃn]    noun    连接物<br>dead    [英式] [ded] [美式] [ded]    adj.    不通电的, 无电流的<br>file    [英式] [faɪl] [美式] [faɪl]    noun    文件, 档案<br>gigabyte    [英式] [ˈɡɪɡəbaɪt] [美式] [ˈɡɪɡəbaɪt]    noun    技嘉科技<br>impact    [英式] [ˈɪmpækt] [美式] [ˈɪmpækt]    noun    影响, 冲击力<br>memory    [英式] [ˈmeməri] [美式] [ˈmeməri]    noun    存储器, 存储, 内存<br>rethink    [英式] [ˌriːˈθɪŋk] [美式] [ˌriːˈθɪŋk]    verb    重新考虑,再考虑<br>search    [英式] [sɜːtʃ] [美式] [sɜːrtʃ]    noun    寻找, 研究<br>produce    [英式] [prəˈdjuːs] [美式] [prəˈduːs]    verb    生产, 制造<br>stop    [英式] [stɒp] [美式] [stɑːp]    verb    停止, 中止<br>text    [英式] [tekst] [美式] [tekst]    verb    发短信<br>topic    [英式] [ˈtɒpɪk] [美式] [ˈtɑːpɪk]    noun    题目, 主题<br>useful    [英式] [ˈjuːsfl] [美式] [ˈjuːsfl]    adj.    有用的, 有益的, 实用的</p>
]]></content>
      
        <categories>
            
            <category> 英语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[在Android 6.0 设备上动态获取权限]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/27/%E5%9C%A8Android-6-0-%E8%AE%BE%E5%A4%87%E4%B8%8A%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<h1 id="在Android-6-0-设备上动态获取权限"><a href="#在Android-6-0-设备上动态获取权限" class="headerlink" title="在Android 6.0 设备上动态获取权限"></a>在Android 6.0 设备上动态获取权限</h1><p>众所周知，Android 6.0 相比之前的Android版本有一个很大的不同点，就是动态获取权限。最近要修改原来的程序适配安卓6.0+。以记录下在Android 6.0 上如何动态获取权限。</p>
<p>下面从自己一开始的问题入手</p>
<h3 id="实现拨号功能"><a href="#实现拨号功能" class="headerlink" title="实现拨号功能"></a>实现拨号功能</h3><p>说到拨号，一个 Intent 就搞定，代码如下，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void callDirectly(String mobile)&#123;</div><div class="line">     Intent intent = new Intent();</div><div class="line">     intent.setAction(&quot;android.intent.action.CALL&quot;);</div><div class="line">     intent.setData(Uri.parse(&quot;tel:&quot; + mobile));</div><div class="line">     mContext.startActivity(intent);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当然 你可别忘了在 Manifest 文件中去声明拨号的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果在 Android 6.0 以前的设备上，上面的代码都是没有问题的，但是如果是在 Android 6.0 设备上，并且项目的 targetSdkVersion 你设置的是23，那么 当你执行上面的拨号代码时，程序将会奔溃掉。</p>
<p>此时你肯定想到了 如果 targetSdkVersion 值设置的小于23是不是就不会奔溃了，恩，确实如此， 此时即使使用Android6.0的设备，程序也不会奔溃，原因显而易见，Android 的权限机制是 Android M 后才加入的。从 Android M 开始 应用程序申请的权限是在运行时动态赋给用户的。</p>
<p>关于动态分配权限，一些同学可能不是很清楚。这里稍稍提一下 Android 6.0 的权限动态分配。 如果你只对最终的解决方案感兴趣，可以跳过下面这节，直接去看解决方案</p>
<h3 id="权限动态分配"><a href="#权限动态分配" class="headerlink" title="权限动态分配"></a>权限动态分配</h3><p>在 Android6.0 之前，下载好一个应用程序，点击安装我们看到的大都是像这样的界面。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_install.jpg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_install.jpg" alt="img"></a></p>
<p>上图分别是Nexus6和小米手机在安装软件时的界面。</p>
<p>在安装时你会发现，手机操作系统会提示，这个软件会索要了你手机的那些权限，并且给用一个列表进行展示，但是这些提示只是在安装是提示，只要你点击接受或者安装， 表示你允许这个应用在可以获取它申明的所有权限。一般很少有人在安装时，会因为看到某个应用因为申请了某一个敏感权限而放弃安装应用。因为这个权限虽然敏感， 但是对于当前的用户是不可感知的，因为他现在并没有立即去查看你的最近通话、短信记录…</p>
<p>说到这里，我们自然而然的会想到，其实最好的方式是，当这个应用在用户使用过程中，正准备使用某个权限时，比如说读取短信列表，系统能及时的弹出一个提示框，说这个应用要读取您的短信内容， 您是否允许。然后用户结合当前应用的执行动作，依据当前条件判断，是不是应该授予应用读取短信记录的权限。这绝对的最完美的。 因为在具体的使用过程中，用户可以结合当前应用的使用场景，去思考、判断是不是应该给这个应用相应的权限。不给能怎样，给了会怎样， 这样对用户而言，完全是主动的，相比安装时那种选择，这样的做法无疑是对用户莫大的尊重，同时这也保证了用户的个人隐私。</p>
<p>说到这里，不得不插一句，其实 MIUI 早就实现了这个系统特性，在这一点上 MIUI 确实走到了 Android团队的前面，恩，给 MIUI 点个赞。</p>
<p>然而直到 Android 6.0 这个版本开始，上面的假设终于得到了谷歌的实践，除了在应用安装时，操作系统会提示应用会获取那些权限，在运行过程中，当应用去真的获取一些敏感 权限时，系统还会弹出一个提示框，询问用户是不是授予应用相应的权限。如下图所示。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_sms.jpeg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_sms.jpeg" alt="img"></a></p>
<p>这就是 Android 6.0 的运行时权限检查机制。下面是Google官方对此的解释，只截取介绍部分</p>
<blockquote>
<p>Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not when they install the app. This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app. It also gives the user more control over the app’s functionality; for example, a user could choose to give a camera app access to the camera but not to the device location. The user can revoke the permissions at any time, by going to the app’s Settings screen.</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>其实上面已经说了一种取巧的方案，将 targetSdkVersion 设为小于23的值，程序将不会奔溃， 但是在Android 6.0 上你的应用程序依旧拨不了电话，这是真的。所以要想兼容6.0版本，必须通过下面的方式进行代码层面的兼容。</p>
<p>对Android版本做判断，然后对Android 6.0 做特殊处理，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">final public static int REQUEST_CODE_ASK_CALL_PHONE = 123;</div><div class="line"></div><div class="line">public void onCall(String mobile)&#123;</div><div class="line">       this.mMobile = mobile;</div><div class="line">       if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">           int checkCallPhonePermission = ContextCompat.checkSelfPermission(mContext,Manifest.permission.CALL_PHONE);</div><div class="line">           if(checkCallPhonePermission != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">               ActivityCompat.requestPermissions(mContext,new String[]&#123;Manifest.permission.CALL_PHONE&#125;,REQUEST_CODE_ASK_CALL_PHONE);</div><div class="line">               return;</div><div class="line">           &#125;else&#123;</div><div class="line">               //上面已经写好的拨号方法</div><div class="line">               callDirectly(mobile);</div><div class="line">           &#125;</div><div class="line">       &#125; else &#123;</div><div class="line">           //上面已经写好的拨号方法</div><div class="line">           callDirectly(mobile);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>此时，如果一个Android6.0的用户触发拨号动作，执行上面的代码，那么他将会看到一个很好看的MaterialDialog，如下图所示。</p>
<p><a href="http://obbu6r1mi.bkt.clouddn.com/android_m_permission.jpeg" target="_blank" rel="external"><img src="http://obbu6r1mi.bkt.clouddn.com/android_m_permission.jpeg" alt="img"></a></p>
<p>那么用户点击拒绝或者允许，我们怎么才能拿到回调呢，如果能拿到回调，我们就可以根据用户的选择来执行不同的操作了。</p>
<p>这里应该会看到在 ActivityCompat 的 requestPermissions 方法中，最后一个参数是一个requestCode，看到它自然而然想到了经常用到的onActivityResult， 这里当执行 ActivityCompat 的 requestPermissions 方法后有一个回调机制，需要我们在当前 Activity 中实现 onRequestPermissionsResult 这个方法，具体如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">    switch (requestCode) &#123;</div><div class="line">        case REQUEST_CODE_ASK_CALL_PHONE:</div><div class="line">            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                // Permission Granted</div><div class="line">                callDirectly(mobile);</div><div class="line">            &#125; else &#123;</div><div class="line">                // Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;CALL_PHONE Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里会对提供了一个对用户点击做判断的入口，开发者可以根据 grantResults[0] 的类型，来判断用户点击的是允许还是拒绝，接着就可以执行相应的逻辑了。</p>
<h3 id="有用的链接"><a href="#有用的链接" class="headerlink" title="有用的链接"></a>有用的链接</h3><p>关于AndroidM上权限的动态获取，这里只给出了一个最简单的示例，如果你还没有尽兴，那么下面这篇国外的博文，一定会让你满足。</p>
<p><a href="https://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en" target="_blank" rel="external">Everything every Android Developer must know about new Android’s Runtime Permission</a></p>
<p>这篇英文博文内容很长、内容也比较多，十足的干货。您慢用~</p>
<p>后记：偶然发现已经有哥们把上面的这篇文章做了翻译，真是极好的，这里给大家也摘录过来了，附上<strong>翻译链接</strong>，给翻译者同学点赞，辛苦！</p>
<p>另外，最近看到一个Github上的开源项目 <a href="https://github.com/k0shk0sh/PermissionHelper" target="_blank" rel="external">PermissionHelper</a> ，专门用于处理 Android 6.0 的权限兼容问题。</p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> permission </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 6.0+新的运行时权限[转载]]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/27/Android-6-0-%E6%96%B0%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90-%E5%BC%80%E5%8F%91%E8%80%85%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E5%88%87/</url>
      <content type="html"><![CDATA[<h1 id="Android-6-0-新的运行时权限-开发者需要知道的一切"><a href="#Android-6-0-新的运行时权限-开发者需要知道的一切" class="headerlink" title="Android 6.0+新的运行时权限 开发者需要知道的一切"></a>Android 6.0+新的运行时权限 开发者需要知道的一切</h1><p>android M 的名字官方刚发布不久，最终正式版即将来临！<br>android在不断发展，最近的更新 M 非常不同，一些主要的变化例如运行时权限将有颠覆性影响。惊讶的是android社区鲜有谈论这事儿，尽管这事很重要或许在不远的将来会引发很严重的问题。<br>这是今天我写<a href="http://ocnyang.com/2016/08/16/AndroidMPermission/#more" target="_blank" rel="external">这篇博客</a>的原因。这里有一切关于android运行时权限你需要知道的，包括如何在代码中实现。现在亡羊补牢还不晚。</p>
<h2 id="新运行时权限"><a href="#新运行时权限" class="headerlink" title="新运行时权限"></a>新运行时权限</h2><p>android的权限系统一直是首要的安全概念，因为这些权限只在安装的时候被询问一次。一旦安装了，app可以在用户毫不知晓的情况下访问权限内的所有东西。<br>难怪一些坏蛋利用这个缺陷恶意收集用户数据用来做坏事了！<br>android小组也知道这事儿。7年了！权限系统终于被重新设计了。在android6.0棉花糖，app将不会在安装的时候授予权限。取而代之的是，app不得不在运行时一个一个询问用户授予权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-0180c3c006b72f69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>注意权限询问对话框不会自己弹出来。开发者不得不自己调用。如果开发者要调用的一些函数需要某权限而用户又拒绝授权的话，函数将抛出异常直接导致程序崩溃。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-469ca2e40633a306.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>另外，用户也可以随时在设置里取消已经授权的权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-266590a23f9a9bc9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>你或许已经感觉到背后生出一阵寒意。。。如果你是个android开发者，意味着要完全改变你的程序逻辑。你不能像以前那样直接调用方法了，你不得不为每个需要的地方检察权限，否则app就崩溃了！<br>是的。我不能哄你说这是简单的事儿。尽管这对用户来说是好事，但是对开发者来说就是噩梦。我们不得不修改编码不然不论短期还是长远来看都是潜在的问题。<br>这个新的运行时权限仅当我们设置targetSdkVersion to 23（这意味着你已经在23上测试通过了）才起作用，当然还要是M系统的手机。app在6.0之前的设备依然使用旧的权限系统。</p>
<h2 id="已经发布了的app会发生什么"><a href="#已经发布了的app会发生什么" class="headerlink" title="已经发布了的app会发生什么"></a>已经发布了的app会发生什么</h2><blockquote>
<p>新运行时权限可能已经让你开始恐慌了。<strong>“hey，伙计！我三年前发布的app可咋整呢。如果他被装到android 6.0上，我的app会崩溃吗？！？”</strong><br>莫慌张，放轻松。android小队又不傻，肯定考虑到了这情况。<strong>如果app的targetSdkVersion 低于 23，那将被认为app没有用23新权限测试过，那将被继续使用旧有规则：用户在安装的时候不得不接受所有权限，安装后app就有了那些权限咯！</strong></p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-9ebfcbb36dff38b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>然后app像以前一样奔跑！注意，此时用户依然可以取消已经同意的授权！用户取消授权时，android 6.0系统会警告，但这不妨碍用户取消授权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-c6424f0b749605c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>问题又来了，这时候你的app崩溃吗？<br>善意的主把这事也告诉了android小组，当我们在targetSdkVersion 低于23的app调用一个需要权限的函数时，这个权限如果被用户取消授权了的话，不抛出异常。但是他将啥都不干，结果导致函数返回值是null或者0.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-486ba9bdb91de1a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>别高兴的太早。尽管app不会调用这个函数时崩溃，返回值null或者0可能接下来依然导致崩溃。<br>好消息（至少目前看来）是这类取消权限的情况比较少，我相信很少用户这么搞。如果他们这么办了，后果自负咯。<br>但从长远看来，我相信还是会有大量用户会关闭一些权限。我们app不能在新设备完美运行这是不可接受的。<br>怎样让他完美运行呢，你最好修改代码支持最新的权限系统，而且我建议你立刻着手搞起！<br>代码没有成功改为支持最新运行时权限的app,不要设置targetSdkVersion 23 发布，否则你就有麻烦了。只有当你测试过了，再改为targetSdkVersion 23 。</p>
<blockquote>
<p><strong>警告：现在你在android studio新建项目，targetSdkVersion 会自动设置为 23。如果你还没支持新运行时权限，我建议你首先把targetSdkVersion 降级到22</strong></p>
</blockquote>
<h2 id="PROTECTION-NORMAL类权限"><a href="#PROTECTION-NORMAL类权限" class="headerlink" title="PROTECTION_NORMAL类权限"></a>PROTECTION_NORMAL类权限</h2><p>当用户安装或更新应用时，系统将授予应用所请求的属于 PROTECTION_NORMAL 的所有权限（安装时授权的一类基本权限）。这类权限包括：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</div><div class="line">android.permission.ACCESS_NETWORK_STATE</div><div class="line">android.permission.ACCESS_NOTIFICATION_POLICY</div><div class="line">android.permission.ACCESS_WIFI_STATE</div><div class="line">android.permission.ACCESS_WIMAX_STATE</div><div class="line">android.permission.BLUETOOTH</div><div class="line">android.permission.BLUETOOTH_ADMIN</div><div class="line">android.permission.BROADCAST_STICKY</div><div class="line">android.permission.CHANGE_NETWORK_STATE</div><div class="line">android.permission.CHANGE_WIFI_MULTICAST_STATE</div><div class="line">android.permission.CHANGE_WIFI_STATE</div><div class="line">android.permission.CHANGE_WIMAX_STATE</div><div class="line">android.permission.DISABLE_KEYGUARD</div><div class="line">android.permission.EXPAND_STATUS_BAR</div><div class="line">android.permission.FLASHLIGHT</div><div class="line">android.permission.GET_ACCOUNTS</div><div class="line">android.permission.GET_PACKAGE_SIZE</div><div class="line">android.permission.INTERNET</div><div class="line">android.permission.KILL_BACKGROUND_PROCESSES</div><div class="line">android.permission.MODIFY_AUDIO_SETTINGS</div><div class="line">android.permission.NFC</div><div class="line">android.permission.READ_SYNC_SETTINGS</div><div class="line">android.permission.READ_SYNC_STATS</div><div class="line">android.permission.RECEIVE_BOOT_COMPLETED</div><div class="line">android.permission.REORDER_TASKS</div><div class="line">android.permission.REQUEST_INSTALL_PACKAGES</div><div class="line">android.permission.SET_TIME_ZONE</div><div class="line">android.permission.SET_WALLPAPER</div><div class="line">android.permission.SET_WALLPAPER_HINTS</div><div class="line">android.permission.SUBSCRIBED_FEEDS_READ</div><div class="line">android.permission.TRANSMIT_IR</div><div class="line">android.permission.USE_FINGERPRINT</div><div class="line">android.permission.VIBRATE</div><div class="line">android.permission.WAKE_LOCK</div><div class="line">android.permission.WRITE_SYNC_SETTINGS</div><div class="line">com.android.alarm.permission.SET_ALARM</div><div class="line">com.android.launcher.permission.INSTALL_SHORTCUT</div><div class="line">com.android.launcher.permission.UNINSTALL_SHORTCUT</div></pre></td></tr></table></figure>
<p>只需要在AndroidManifest.xml中简单声明这些权限就好，安装时就授权。不需要每次使用时都检查权限，而且用户不能取消以上授权。</p>
<h2 id="让你的app支持新运行时权限"><a href="#让你的app支持新运行时权限" class="headerlink" title="让你的app支持新运行时权限"></a>让你的app支持新运行时权限</h2><p>是时候让我们的app支持新权限模型了，从设置<strong>compileSdkVersion</strong> and <strong>targetSdkVersion</strong> 为 23开始吧.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    ...</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        targetSdkVersion 23</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>例子，我想用以下方法添加联系人。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">privatestaticfinal String TAG = &quot;Contacts&quot;;</div><div class="line">privatevoid insertDummyContact() &#123;</div><div class="line">// Two operations are needed to insert a new contact.</div><div class="line">    ArrayList operations = new ArrayList(2);</div><div class="line"></div><div class="line">// First, set up a new raw contact.</div><div class="line">    ContentProviderOperation.Builder op =</div><div class="line">            ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)</div><div class="line">                    .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)</div><div class="line">                    .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);</div><div class="line">    operations.add(op.build());</div><div class="line"></div><div class="line">// Next, set the name for the contact.</div><div class="line">    op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)</div><div class="line">            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)</div><div class="line">            .withValue(ContactsContract.Data.MIMETYPE,</div><div class="line">                    ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)</div><div class="line">            .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,</div><div class="line">&quot;__DUMMY CONTACT from runtime permissions sample&quot;);</div><div class="line">    operations.add(op.build());</div><div class="line"></div><div class="line">// Apply the operations.</div><div class="line">    ContentResolver resolver = getContentResolver();</div><div class="line">try &#123;</div><div class="line">        resolver.applyBatch(ContactsContract.AUTHORITY, operations);</div><div class="line">    &#125; catch (RemoteException e) &#123;</div><div class="line">        Log.d(TAG, &quot;Could not add a new contact: &quot; + e.getMessage());</div><div class="line">    &#125; catch (OperationApplicationException e) &#123;</div><div class="line">        Log.d(TAG, &quot;Could not add a new contact: &quot; + e.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码需要WRITE_CONTACTS权限。如果不询问授权，app就崩了。<br>下一步像以前一样在AndroidManifest.xml添加声明权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission  android:name=&quot;android.permission.WRITE_CONTACTS&quot;/&gt;</div></pre></td></tr></table></figure>
<p>下一步，不得不再写个方法检查有没有权限。如果没有弹个对话框询问用户授权。然后你才可以下一步创建联系人。<br>权限被分组了，如下表：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-52d385bb509f5ba1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>同一组的任何一个权限被授权了，其他权限也自动被授权。例如，一旦WRITE_CONTACTS被授权了，app也有READ_CONTACTS和GET_ACCOUNTS权限了。<br>源码中被用来检查和请求权限的方法分别是Activity的checkSelfPermission和requestPermissions。这些方法在api23引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">finalprivateint REQUEST_CODE_ASK_PERMISSIONS = 123;</div><div class="line"></div><div class="line">privatevoid insertDummyContactWrapper() &#123;</div><div class="line">int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果已有权限，insertDummyContact()会执行。否则，requestPermissions被执行来弹出请求授权对话框，如下：</p>
<p>不论用户同意还是拒绝，activity的onRequestPermissionsResult会被回调来通知结果（通过第三个参数），grantResults,如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">publicvoid onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">switch (requestCode) &#123;</div><div class="line">caseREQUEST_CODE_ASK_PERMISSIONS:</div><div class="line">if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">// Permission Granted</div><div class="line">                insertDummyContact();</div><div class="line">            &#125; else &#123;</div><div class="line">// Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;WRITE_CONTACTS Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">break;</div><div class="line">        default:</div><div class="line">super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是新权限模型工作过程。代码真复杂但是只能去习惯它。。。为了让app很好兼容新权限模型，你不得不用以上类似方法处理所有需要的情况。<br>如果你想捶墙，现在是时候了。。。</p>
<h2 id="处理-“不再提醒”"><a href="#处理-“不再提醒”" class="headerlink" title="处理 “不再提醒”"></a>处理 “不再提醒”</h2><p>如果用户拒绝某授权。下一次弹框，用户会有一个“不再提醒”的选项的来防止app以后继续请求授权。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-c79ef49ce512ed84.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>如果这个选项在拒绝授权前被用户勾选了。下次为这个权限请求requestPermissions时，对话框就不弹出来了，结果就是，app啥都不干。<br>这将是很差的用户体验，用户做了操作却得不到响应。这种情况需要好好处理一下。在请求requestPermissions前，我们通过activity的shouldShowRequestPermissionRationale方法来检查是否需要弹出请求权限的提示对话框，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">final private int REQUEST_CODE_ASK_PERMISSIONS = 123;</div><div class="line"></div><div class="line">private void insertDummyContactWrapper() &#123;</div><div class="line">int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_CONTACTS)) &#123;</div><div class="line">                showMessageOKCancel(&quot;You need to allow access to Contacts&quot;,</div><div class="line">new DialogInterface.OnClickListener() &#123;</div><div class="line">@Override</div><div class="line">publicvoid onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                                requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                                        REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">return;</div><div class="line">            &#125;</div><div class="line">        requestPermissions(new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) &#123;</div><div class="line">new AlertDialog.Builder(MainActivity.this)</div><div class="line">            .setMessage(message)</div><div class="line">            .setPositiveButton(&quot;OK&quot;, okListener)</div><div class="line">            .setNegativeButton(&quot;Cancel&quot;, null)</div><div class="line">            .create()</div><div class="line">            .show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个权限第一次被请求和用户标记过不再提醒的时候,我们写的对话框被展示。<br>最后一种情况，onRequestPermissionsResult 会收到PERMISSION_DENIED ，系统询问对话框不展示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-4b5fe5ae89720b96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>搞定！</p>
<h2 id="一次请求多个权限"><a href="#一次请求多个权限" class="headerlink" title="一次请求多个权限"></a>一次请求多个权限</h2><p>当然了有时候需要好多权限，可以用上面方法一次请求多个权限。不要忘了为每个权限检查“不再提醒”的设置。<br>修改后的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;</div><div class="line"></div><div class="line">private void insertDummyContactWrapper() &#123;</div><div class="line">    List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))</div><div class="line">        permissionsNeeded.add(&quot;GPS&quot;);</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))</div><div class="line">        permissionsNeeded.add(&quot;Read Contacts&quot;);</div><div class="line">    if (!addPermission(permissionsList, Manifest.permission.WRITE_CONTACTS))</div><div class="line">        permissionsNeeded.add(&quot;Write Contacts&quot;);</div><div class="line"></div><div class="line">    if (permissionsList.size() &gt; 0) &#123;</div><div class="line">        if (permissionsNeeded.size() &gt; 0) &#123;</div><div class="line">            // Need Rationale</div><div class="line">            String message = &quot;You need to grant access to &quot; + permissionsNeeded.get(0);</div><div class="line">            for (int i = 1; i &lt; permissionsNeeded.size(); i++)</div><div class="line">                message = message + &quot;, &quot; + permissionsNeeded.get(i);</div><div class="line">            showMessageOKCancel(message,</div><div class="line">                    new DialogInterface.OnClickListener() &#123;</div><div class="line">                        @Override</div><div class="line">                        public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),</div><div class="line">                                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),</div><div class="line">                REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private boolean addPermission(List&lt;String&gt; permissionsList, String permission) &#123;</div><div class="line">    if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">        permissionsList.add(permission);</div><div class="line">        // Check for Rationale Option</div><div class="line">        if (!shouldShowRequestPermissionRationale(permission))</div><div class="line">            return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果所有权限被授权，依然回调onRequestPermissionsResult，我用hashmap让代码整洁便于阅读。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">publicvoid onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">switch (requestCode) &#123;</div><div class="line">caseREQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:</div><div class="line">            &#123;</div><div class="line">            Map perms = new HashMap();</div><div class="line">// Initial</div><div class="line">            perms.put(Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);</div><div class="line">            perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);</div><div class="line">            perms.put(Manifest.permission.WRITE_CONTACTS, PackageManager.PERMISSION_GRANTED);</div><div class="line">// Fill with results</div><div class="line">for (int i = 0; i &lt; permissions.length; i++)</div><div class="line">                perms.put(permissions[i], grantResults[i]);</div><div class="line">// Check for ACCESS_FINE_LOCATION</div><div class="line">if (perms.get(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED</div><div class="line">                    &amp;&amp; perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED</div><div class="line">                    &amp;&amp; perms.get(Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">// All Permissions Granted</div><div class="line">                insertDummyContact();</div><div class="line">            &#125; else &#123;</div><div class="line">// Permission Denied</div><div class="line">                Toast.makeText(MainActivity.this, &quot;Some Permission is Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                        .show();</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">break;</div><div class="line">        default:</div><div class="line">super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>条件灵活的，你自己设置。有的情况，一个权限没有授权，就不可用；但是也有情况，能工作，但是表现的是有所限制的。对于这个我不做评价，你自己设计吧。</p>
<h2 id="用兼容库使代码兼容旧版"><a href="#用兼容库使代码兼容旧版" class="headerlink" title="用兼容库使代码兼容旧版"></a>用兼容库使代码兼容旧版</h2><p>以上代码在android 6.0以上运行没问题，但是23 api之前就不行了，因为没有那些方法。<br>粗暴的方法是检查版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">// Marshmallow+</div><div class="line">&#125; else &#123;</div><div class="line">// Pre-Marshmallow</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是太复杂，我建议用v4兼容库，已对这个做过兼容，用这个方法代替：</p>
<ul>
<li>ContextCompat.checkSelfPermission()<br>被授权函数返回PERMISSION_GRANTED，否则返回PERMISSION_DENIED ，在所有版本都是如此。</li>
<li>ActivityCompat.requestPermissions()<br>这个方法在M之前版本调用，OnRequestPermissionsResultCallback 直接被调用，带着正确的 PERMISSION_GRANTED或者 PERMISSION_DENIED 。</li>
<li>ActivityCompat.shouldShowRequestPermissionRationale()<br>在M之前版本调用，永远返回false。<br>用v4包的这三方法，完美兼容所有版本！这个方法需要额外的参数，Context or Activity。别的就没啥特别的了。下面是代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private void insertDummyContactWrapper()&#123;</div><div class="line">int hasWriteContactsPermission = ContextCompat.checkSelfPermission(MainActivity.this,</div><div class="line">            Manifest.permission.WRITE_CONTACTS);</div><div class="line">if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">if (!ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,Manifest.permission.WRITE_CONTACTS)) &#123;</div><div class="line">            showMessageOKCancel(&quot;You need to allow access to Contacts&quot;,new DialogInterface.OnClickListener() &#123;</div><div class="line">@Override</div><div class="line">public void onClick (DialogInterface dialog, int which)&#123;</div><div class="line">                            ActivityCompat.requestPermissions(MainActivity.this,new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                                    REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">return;</div><div class="line">        &#125;</div><div class="line">        ActivityCompat.requestPermissions(MainActivity.this,</div><div class="line">new String[] &#123;Manifest.permission.WRITE_CONTACTS&#125;,</div><div class="line">                REQUEST_CODE_ASK_PERMISSIONS);</div><div class="line">return;</div><div class="line">    &#125;</div><div class="line">    insertDummyContact();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后两个方法，我们也可以在Fragment中使用，用v13兼容包：FragmentCompat.requestPermissions() and FragmentCompat.shouldShowRequestPermissionRationale()和activity效果一样。</p>
<h2 id="第三方库简化代码"><a href="#第三方库简化代码" class="headerlink" title="第三方库简化代码"></a>第三方库简化代码</h2><p>以上代码真尼玛复杂。为解决这事，有许多第三方库已经问世了，真66溜真有速度。我试了很多最终找到了个满意的<a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">hotchemi’s PermissionsDispatcher</a>。<br>他和我上面做的一样，只是简化了代码。灵活易扩展，试一下吧。如果不满足你可以找些其他的。</p>
<h2 id="如果我的app还开着呢，权限被撤销了，会发生生么"><a href="#如果我的app还开着呢，权限被撤销了，会发生生么" class="headerlink" title="如果我的app还开着呢，权限被撤销了，会发生生么"></a>如果我的app还开着呢，权限被撤销了，会发生生么</h2><p>权限随时可以被撤销。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2625875-f7bd9b68fd7bf84a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>当app开着的时候被撤消了会发生什么呢？我试过了发现这时app会突然终止 terminated。app中的一切都被简单粗暴的停止了，因为terminated！对我来说这可以理解，因为系统如果允许它继续运行（没有某权限），这会召唤弗雷迪到我的噩梦里。或许更糟…</p>
<h2 id="结论建议"><a href="#结论建议" class="headerlink" title="结论建议"></a>结论建议</h2><p>我相信你对新权限模型已经有了清晰的认识。我相信你也意识到了问题的严峻。<br>但是你没得选择。新运行时权限已经在棉花糖中被使用了。我们没有退路。我们现在唯一能做的就是保证app适配新权限模型.<br>欣慰的是只有少数权限需要运行时权限模型。大多数常用的权限，例如，网络访问，属于Normal Permission 在安装时自动会授权，当然你要声明，以后无需检查。因此，只有少部分代码你需要修改。<br>两个建议：</p>
<ol>
<li>严肃对待新权限模型</li>
<li>如果你代码没支持新权限，不要设置targetSdkVersion 23 。尤其是当你在Studio新建工程时，不要忘了修改！</li>
</ol>
<p>说一下代码修改。这是大事，如果代码结构被设计的不够好，你需要一些很蛋疼的重构。每个app都要被修正。如上所说，我们没的选择。。。<br>列出所有你需要请求的权限所有情形，如果A被授权，B被拒绝，会发生什么。blah，blah。<br>祝重构顺利。把它列为你需要做的大事，从现在就开始着手做，以保证M正式发布的时候没有问题。<br>希望本文对你有用，快乐编码！</p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> permission </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Material主题Github博客]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/26/%E5%9F%BA%E4%BA%8EHexo%E5%88%9B%E5%BB%BAMaterial%E4%B8%BB%E9%A2%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前文中刚有提到怎样基于Hexo搭建github博客，在此不赘述。本文主要讲解安装Material主题。</p>
</blockquote>
<h3 id="强烈建议点击看原文，原文排版及内容都优于本文！！！"><a href="#强烈建议点击看原文，原文排版及内容都优于本文！！！" class="headerlink" title="强烈建议点击看原文，原文排版及内容都优于本文！！！"></a>强烈建议点击看原文，原文排版及内容都优于本文！！！</h3><h3 id="原文地址-https-material-viosey-com"><a href="#原文地址-https-material-viosey-com" class="headerlink" title="原文地址:https://material.viosey.com/"></a><strong><a href="https://material.viosey.com/" target="_blank" rel="external">原文地址:https://material.viosey.com/</a></strong></h3><p>在 Hexo 中，通常有两份配置文件，一个是站点根目录下的 <code>_config.yml</code>；另外一个是主题目录下的 <code>_config.yml</code>。为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</p>
<h2 id="安装「Material」"><a href="#安装「Material」" class="headerlink" title="安装「Material」"></a>安装「Material」</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件放置于站点目录的 <code>themes</code> 目录下，然后修改下配置文件即可。<br>具体到 Material 来说，有 <code>Github</code> 和 <code>NPM</code> 两种方式。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote>
<p>可以选择 克隆 或者 下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="external">稳定的发布版本</a>。</p>
</blockquote>
<p>为了方便之后的更新，建议使用 <strong>克隆</strong> 的方式。克隆命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site/themes</div><div class="line">$ git clone https://github.com/viosey/hexo-theme-material.git material</div></pre></td></tr></table></figure>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-material</div></pre></td></tr></table></figure>
<p>该方式会把 Material 主题下载到 <code>hexo</code> 目录下的 <code>node_modules</code> 文件夹中。<br>找到 <code>hexo-material</code> 文件夹，然后把文件复制到 <code>themes</code> 目录中的 <code>Material</code> 主题文件夹里。</p>
<h2 id="启用「Material」"><a href="#启用「Material」" class="headerlink" title="启用「Material」"></a>启用「Material」</h2><p>克隆完成后，修改主题文件夹名称，将其改为 <code>material</code> 。<br>然后打开 <strong>站点配置文件</strong>，找到 <code>theme</code> 字段，并将其值更改为 <code>material</code> 。</p>
<blockquote>
<p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code> 字段与之对应即可。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code>，并访问 <code>http://localhost:4000</code>，确保站点正确运行。</p>
<h2 id="更新「Material」"><a href="#更新「Material」" class="headerlink" title="更新「Material」"></a>更新「Material」</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>即可拉取最新版本。</p>
<h3 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h3><p>NPM 更新有两种方式：</p>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm-update"></a>npm-update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update hexo-material</div></pre></td></tr></table></figure>
<p>然后将文件复制到 <code>Material</code> 主题文件夹中。</p>
<h4 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h4><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="external">npm-check</a> 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。</p>
<p>安装 npm-check：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npm-check</div></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm-check hexo-material</div></pre></td></tr></table></figure>
<p>使用空格键可以选择需要处理的包，回车直接进行处理。</p>
<h2 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>编辑 <strong>站点配置文件</strong>，将 <code>language</code> 设置成你所需要的语言。<br>可用的语言如下：</p>
<ul>
<li>العَرَبِيَّة (ar)</li>
<li>English (en)</li>
<li>Español (es)</li>
<li>Français (fr)</li>
<li>Deutsche (de)</li>
<li>日本語 (ja)</li>
<li>Malay (ms)</li>
<li>简体中文 (zh-CN)</li>
<li>繁體中文 (zh-TW)</li>
</ul>
<blockquote>
<p>例如：选用繁體中文，则配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; language: zh-TW</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>编辑 <strong>站点配置文件</strong>，<code>url</code> 填写主域名，<code>root</code> 填写 子目录/根域名</p>
<blockquote>
<p>例如：站点域名为 <code>http://example.com/hexo</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; url: http://example.com</div><div class="line">&gt; root: /hexo</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>若你的站点没有运行在子目录中，则 <code>root</code> 填写为 <code>/</code>。</p>
<h3 id="作者名称"><a href="#作者名称" class="headerlink" title="作者名称"></a>作者名称</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述设置"><a href="#站点描述设置" class="headerlink" title="站点描述设置"></a>站点描述设置</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>，配置方式如插件 <code>README.md</code> 所示。<br>然后在 <a href="https://material.viosey.com/intro/#url" target="_blank" rel="external">url: rss</a> 中添加生成的 feed 路径。</p>
<h2 id="分支「Scheme」介绍"><a href="#分支「Scheme」介绍" class="headerlink" title="分支「Scheme」介绍"></a>分支「Scheme」介绍</h2><p>Material 主题提供了多种分支主题外观，亦称「Scheme」。<br>目前 Material 支持三种 Scheme：</p>
<h3 id="Nexus（开发中）"><a href="#Nexus（开发中）" class="headerlink" title="Nexus（开发中）"></a>Nexus（开发中）</h3><p>最为标准的 Material Design 样式。</p>
<h3 id="Paradox"><a href="#Paradox" class="headerlink" title="Paradox"></a>Paradox</h3><p>默认 Scheme，是 Material 的最初样式。居中布局，图文并茂。</p>
<h3 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h3><p>Paradox 的至简样式，简洁明了。</p>
<h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 <code>scheme</code> 关键字。 你会看到有几行 scheme 的配置，将你需用启用的 scheme 去掉前面注释 <code>#</code> 即可。</p>
<blockquote>
<p>例如 - 选择 Paradox Scheme</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; #scheme: Nexus</div><div class="line">&gt; scheme: Paradox</div><div class="line">&gt; #scheme: Isolation</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="主题配置文件介绍"><a href="#主题配置文件介绍" class="headerlink" title="主题配置文件介绍"></a>主题配置文件介绍</h2><h3 id="Site-Information"><a href="#Site-Information" class="headerlink" title="Site Information"></a>Site Information</h3><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>用于配置生成的 HTML 文件的头部信息。</p>
<ul>
<li>favicon</li>
<li>high_res_favicon: 高清 favicon</li>
<li>high_res_favicon: iOS 主屏按钮图标</li>
<li>keywords: 网站关键词</li>
</ul>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>用于设置跳转链接。</p>
<ul>
<li>rss: 设置生成的 rss 或 atom url。</li>
<li>daily_pic: 设置 <code>daily_pic</code> 模块 跳转 url。</li>
<li>logo: 设置 logo 的跳转 url。</li>
</ul>
<h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><h4 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h4><p>如果要使用其中一个主题，将前面的注释 <code>#</code> 去掉即可。</p>
<p>比如，选择使用 Paradox Scheme，只需要这样配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#scheme: Nexus</div><div class="line">scheme: Paradox</div><div class="line">#scheme: Isolation</div></pre></td></tr></table></figure>
<h4 id="uiux"><a href="#uiux" class="headerlink" title="uiux"></a>uiux</h4><p>用于设置主题 UI 与 UX。</p>
<ul>
<li>slogan: 显示在 <code>blog_info</code> 模块中的标语，现在可以设置多行标语：</li>
</ul>
<blockquote>
<p>单行标语使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; slogan: 标语</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>多行标语使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; slogan:</div><div class="line">&gt;  - &quot;标语第一行&quot;</div><div class="line">&gt;  - &quot;标语第二行&quot;</div><div class="line">&gt;  - &quot;标语第三行&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<ul>
<li>theme_color: 主题主要颜色。大部分地方使用此颜色。</li>
<li>theme_sub_color: 主题辅助颜色。</li>
<li>hyperlink_color: 超链接颜色。</li>
<li>button_color: 按钮颜色，例如 <code>toTop</code> 或 <code>menu_button</code>。</li>
<li>android_chrome_color: 安卓 Chrome 浏览器地址栏颜色。</li>
<li>nprogress_color: 页面加载时顶部加载进度条的颜色。</li>
<li>nprogress_buffer: 页面加载时顶部加载进度条的缓冲。</li>
</ul>
<h4 id="js-effect"><a href="#js-effect" class="headerlink" title="js_effect"></a>js_effect</h4><p>用来控制 Material 主题中自带的多种 js 特性。</p>
<ul>
<li>fade: 页面加载时部分模块的渐显效果。默认为 true。</li>
<li>smoothscroll: 页面平滑滚动特效。默认为 false。</li>
</ul>
<h4 id="reading"><a href="#reading" class="headerlink" title="reading"></a>reading</h4><p>用于设置阅读体验。</p>
<ul>
<li>entry_excerpt: 首页文章输出摘要的字符长度。默认为80。</li>
</ul>
<h4 id="thumbnail"><a href="#thumbnail" class="headerlink" title="thumbnail"></a>thumbnail</h4><p>用于设置文章缩略图相关。</p>
<ul>
<li>purecolor: 填入颜色代码。如果文章内无设置缩略图，此项又不为空，则使用纯色缩略图。</li>
<li>random_amount: 随机图片数量，根据 <code>主题文件夹 -&gt; source -&gt; img -&gt; random</code> 中的图片数量设置。</li>
</ul>
<h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><p>用于设置站点背景。</p>
<ul>
<li>purecolor: 填入颜色代码。则站点使用纯色背景。</li>
<li>bgimg: 背景地址，默认调用 <code>主题文件夹 -&gt; source -&gt; img</code> 中的 <code>bg.png</code>。可更换此图片或者自己填入 url。</li>
<li>bing: 用于启用 bing 图片。<ul>
<li><code>parameter</code> 参数可用：<code>new</code>, <code>color=</code>, <code>type=</code>。</li>
<li><code>color=</code>: black, blue, brown, green, multi, orange, pink, purple, red, white, yellow。</li>
<li><code>type=</code>: A (animal), C (culture), N (nature), S (space), T (travel)。</li>
</ul>
</li>
</ul>
<h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><p>用于设置站点图片。</p>
<ul>
<li>logo: 显示于 <code>blog_info</code> 模块中。</li>
<li>avatar: 你的头像设置。</li>
<li>daily_pic: 显示于 <code>daily_pic</code> 模块中。</li>
<li>sidebar_header: 显示于 <code>sidebar</code> 顶部。</li>
<li>footerico: 设置 <code>footer</code> 中 SNS 图标的路径。</li>
<li>random_thumbnail: 随机缩略图的路径。</li>
<li>footer_image: 你可以在侧边栏底部放置任何你想要的图片。</li>
</ul>
<p>比如，你可以这样配置 又拍云 Logo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">footer_image:</div><div class="line">    upyun_logo:</div><div class="line">        link: &quot;https://www.upyun.com/&quot;</div><div class="line">        src: &quot;/img/upyun_logo.png&quot;</div></pre></td></tr></table></figure>
<h4 id="fonts"><a href="#fonts" class="headerlink" title="fonts"></a>fonts</h4><p>用于设置站点的字体。</p>
<p>默认值为 <code>Roboto, &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;, Arial, sans-serif</code></p>
<blockquote>
<p>该字体设定较为规范，如无特殊要求 无需额外修改。</p>
</blockquote>
<h4 id="card-elevation"><a href="#card-elevation" class="headerlink" title="card_elevation"></a>card_elevation</h4><p>用于设置文章列表的卡片阴影，如无特殊要求 无需额外修改。</p>
<h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><h4 id="sns"><a href="#sns" class="headerlink" title="sns"></a>sns</h4><p>用于填写你的 SNS 信息，除了 <code>email</code>，其他信息会以按钮的形式显示在 <code>footer</code>。</p>
<ul>
<li>email: 显示在侧边栏中。</li>
<li>twitter</li>
<li>facebook</li>
<li>googleplus</li>
<li>weibo</li>
<li>instagram</li>
<li>tumblr</li>
<li>github</li>
<li>linkedin</li>
<li>facebook</li>
</ul>
<h4 id="sns-share"><a href="#sns-share" class="headerlink" title="sns_share"></a>sns_share</h4><p>用于定义分享菜单中的项目， <code>false</code> 的项将不会显示在分享菜单中。</p>
<ul>
<li>twitter</li>
<li>googleplus</li>
<li>weibo</li>
<li>linkedin</li>
<li>qq</li>
<li>telegram</li>
</ul>
<h4 id="dropdown"><a href="#dropdown" class="headerlink" title="dropdown"></a>dropdown</h4><p>用于设置 Paradox 侧边栏用户下拉菜单，默认为空。</p>
<p>以</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	link: &quot;/link/&quot;</div><div class="line">	icon: icon</div></pre></td></tr></table></figure>
<p>作为一个单位。</p>
<p><code>Name</code> 是该独立页面的名称，请自行修改。<br><code>link</code> 的参数为相对路径，对应 hexo 目录下的 <code>source</code> 文件夹内的相应文件夹。<br><code>icon</code> 的参数为自定义的 Material 图标，可用图标可在 <a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a> 查询。</p>
<blockquote>
<p>参考配置样式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dropdown:</div><div class="line">    Email Me:</div><div class="line">        link: &quot;#&quot;</div><div class="line">        icon: email</div></pre></td></tr></table></figure>
<h5 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h5><p>设置 “主页” 按钮</p>
<ul>
<li><code>use</code>: 设置 <code>true</code> 时会在侧边栏显示 “主页” 按钮.</li>
<li><code>icon</code>: 在 “主页” 前面显示一个 Material 图标。为空和被注释时则不显示.</li>
<li><code>divider</code>: 设置成 <code>true</code></li>
</ul>
<h5 id="archives"><a href="#archives" class="headerlink" title="archives"></a>archives</h5><p>用来设置归档下拉菜单。</p>
<ul>
<li><code>use</code>: 设置成 <code>true</code> 时在侧边栏显示归档。</li>
<li><code>icon</code>: 为归档添加一个 Material Icon，注释掉或为空则不显示 Icon</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在归档按钮底部增加一条分割线。</li>
</ul>
<h5 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h5><p>用来设置分类显示按钮。</p>
<ul>
<li><code>use</code>: 设为 <code>true</code> 在侧边栏显示分类按钮。</li>
<li><code>icon</code>: 在分类按钮前显示一个 Material Icon，注释掉或为空则不显示 Icon</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在归档按钮底部增加一条分割线。</li>
</ul>
<h5 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h5><p>用于设置独立页面，默认为空。填写条目后独立页面入口将显示在：</p>
<ul>
<li><code>logo card</code> <code>Page</code> 按钮的下拉菜单中。(Scheme Paradox)</li>
<li>侧边栏中。(Scheme Paradox)</li>
<li>站点左侧。(Scheme Isolation)</li>
</ul>
<p>请按照如下样例添加个人独立页面。 <code>divider</code> 设置成 <code>true</code> 后会在该条目底部增加一条分割线。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pages:</div><div class="line">    About:</div><div class="line">        link: &quot;#about&quot;</div><div class="line">        icon: person</div><div class="line">        divider: false</div><div class="line">    timeline archive:</div><div class="line">        link: &quot;/timeline/&quot;</div><div class="line">        icon:</div><div class="line">        divider: false</div></pre></td></tr></table></figure>
<h5 id="article-num"><a href="#article-num" class="headerlink" title="article_num"></a>article_num</h5><p>Used to display the number of articles.</p>
<ul>
<li><code>use</code>: 设置成 <code>true</code> 时会在侧边栏显示文章总数。</li>
<li><code>divider</code>: 设置成 <code>true</code> 后会在该条目底部增加一条分割线。</li>
</ul>
<h5 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h5><p>Used to customize the sidebar footer.</p>
<ul>
<li><code>divider</code>: 设置成 <code>true</code> 后会在侧边栏底部之前增加一条分割线。</li>
<li><code>theme</code>: 设置成 <code>true</code> 后会在侧边栏底部增加一个指向 Material 主题的链接。</li>
</ul>
<h4 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a>qrcode</h4><p>用于在文章页中显示二维码，扫描二维码即可直接打开文章。<br>需要 hexo-helper-qrcode 支持，使用 <code>npm install hexo-helper-qrcode --save</code> 进行安装。</p>
<h4 id="topPost（开发中）"><a href="#topPost（开发中）" class="headerlink" title="topPost（开发中）"></a>topPost（开发中）</h4><p>使用该插件可以将指定文章置顶。<br>如果您需要这个功能，请使用 <code>npm install hexo-helper-post-top --save</code> 安装支持插件，然后将这个开关设置为 <code>true</code>。<br>之后在您需要置顶文章的 <code>front-matter</code> 中，添加 <code>top: true</code> 即可置顶。</p>
<h3 id="Integrated-Services"><a href="#Integrated-Services" class="headerlink" title="Integrated Services"></a>Integrated Services</h3><h4 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h4><p>用于于设置评论系统。</p>
<p>具体设置参考 <a href="https://material.viosey.com/services/#评论系统" target="_blank" rel="external">评论系统</a></p>
<p>目前可使用 <code>duoshuo</code> <code>disqus</code> 和 <code>disqus_click</code>。</p>
<blockquote>
<p>使用 Disqus_Click 时，页面不会主动加载 Disqus 评论，直到按下按钮。这项设置有助于改善处在 <code>公开、平等、有序 的中国互联网环境</code> 下的浏览者体验。</p>
</blockquote>
<ul>
<li>use:</li>
<li>shortname:</li>
<li>duoshuo_thread_key_type: 用于设置多说 tread key 的使用，默认为 <code>path</code>，可设置为 <code>id</code>。</li>
<li>duoshuo_embed_js_url: 多说 js。</li>
</ul>
<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>用于设置搜索系统。</p>
<p>具体设置参考 <a href="https://material.viosey.com/services/#搜索系统" target="_blank" rel="external">搜索系统</a></p>
<p>目前可使用 <code>google</code> <code>swiftype</code> <code>local</code>。</p>
<ul>
<li>use</li>
<li>swiftype_key</li>
</ul>
<h4 id="analytics"><a href="#analytics" class="headerlink" title="analytics"></a>analytics</h4><p>用于设置访客分析服务，支持 <code>Google Analysis</code> 和 <code>百度站长工具</code></p>
<ul>
<li><code>baidu_id</code>: 百度 ID</li>
<li><code>google_id</code>: Google Analysis 密钥</li>
</ul>
<h4 id="leancloud"><a href="#leancloud" class="headerlink" title="leancloud"></a>leancloud</h4><p>具体设置参考 <a href="https://material.viosey.com/services/#Leancloud" target="_blank" rel="external">设置 Leancloud 浏览次数统计</a></p>
<ul>
<li>enable: 默认为 false。</li>
<li>app_id: APP ID。</li>
<li>app_key: APP Key。</li>
<li>av_core_mini: 统计 js。</li>
</ul>
<h4 id="busuanzi"><a href="#busuanzi" class="headerlink" title="busuanzi"></a>busuanzi</h4><p>具体设置参考 <a href="https://material.viosey.com/services/#不蒜子" target="_blank" rel="external">不蒜子</a></p>
<ul>
<li>enable: 默认为 false。</li>
<li>all_site_uv: 默认为 false。</li>
<li>post_pv: 默认为 false。</li>
<li>busuanzi_pure_mini_js: 统计 js。</li>
</ul>
<h2 id="主要协助开发者"><a href="#主要协助开发者" class="headerlink" title="主要协助开发者"></a>主要协助开发者</h2><p><a href="https://github.com/viosey/hexo-theme-material/graphs/contributors" target="_blank" rel="external">Github - Contributors</a></p>
<ul>
<li><a href="https://github.com/neoFelhz" target="_blank" rel="external">neoFelhz</a></li>
<li><a href="https://github.com/pidupuis" target="_blank" rel="external">pidupuis</a></li>
<li><a href="https://github.com/cubesky" target="_blank" rel="external">cubesky</a></li>
<li><a href="https://github.com/AkarinServer" target="_blank" rel="external">AkarinServer</a></li>
</ul>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><h3 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &lt;title&gt;</div></pre></td></tr></table></figure>
<h3 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h3><p>在 hexo 主目录下 <code>source -&gt; _posts</code> 新建以 <code>.md</code> 为后缀的文件。</p>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter - 官方介绍</a></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
<td>post</td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td>文件名</td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
<tr>
<td><code>thumbnail</code></td>
<td>缩略图地址</td>
<td></td>
</tr>
<tr>
<td><code>toc</code></td>
<td>显示 TOC 按钮</td>
<td>true</td>
</tr>
<tr>
<td><code>comment</code></td>
<td>显示评论</td>
<td>true</td>
</tr>
<tr>
<td><code>notag</code></td>
<td>不生成标签按钮</td>
<td>false</td>
</tr>
<tr>
<td><code>top</code></td>
<td>置顶</td>
<td>false</td>
</tr>
</tbody>
</table>
<p>注1：置顶功能请参考 <a href="https://material.viosey.com/intro/#topPost" target="_blank" rel="external">topPost</a></p>
<h3 id="缩略图功能"><a href="#缩略图功能" class="headerlink" title="缩略图功能"></a>缩略图功能</h3><p>在 Material 主题中，每个 Scheme 都有缩略图功能。<br>只需要在 <code>Front-matter</code> 中添加参数 <code>thumbnail:</code>，然后填入缩略图地址即可。</p>
<h4 id="Paradox-1"><a href="#Paradox-1" class="headerlink" title="Paradox"></a>Paradox</h4><p>此 Scheme 如果没有自定义缩略图，则使用默认随机缩略图，随机缩略图目录位于主题文件夹下 <code>source -&gt; img -&gt; random</code>。<br>随机缩略图可添加自己喜好的图片，格式为 <code>.png</code> 。然后在 <strong>主题配置文件</strong> 中 <code>thumbnail:random_amount</code> 修改缩略图数量。</p>
<h4 id="Isolation-1"><a href="#Isolation-1" class="headerlink" title="Isolation"></a>Isolation</h4><p>此 Scheme 只会显示已自定义缩略图。</p>
<h2 id="创建「关于我」页面"><a href="#创建「关于我」页面" class="headerlink" title="创建「关于我」页面"></a>创建「关于我」页面</h2><p>新建一个 <code>about</code> 页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;about&quot;</div></pre></td></tr></table></figure>
<p>如果想添加「关于我」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h2 id="创建「友情链接」页面"><a href="#创建「友情链接」页面" class="headerlink" title="创建「友情链接」页面"></a>创建「友情链接」页面</h2><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>links</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: links</div><div class="line">date:</div><div class="line">layout: links</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「友情链接」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>同样在在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>links.yml</code> 的文件。</p>
<p>单个友情链接的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">    link: http://example.com</div><div class="line">    avatar: http://example.com/avatar.png</div><div class="line">    descr: &quot;这是一个描述&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加多个友情链接，只需要根据上面的格式重复填写即可。</p>
</blockquote>
<ul>
<li>将 <code>Name</code> 改为友情链接的名字，例如 <code>Viosey</code>。</li>
<li><code>http://example.com</code> 为友情链接的地址。</li>
<li><code>http://example.com/avatar.png</code> 为友情链接的头像。</li>
<li><code>这是一个描述</code> 为友情链接描述。</li>
</ul>
<h2 id="创建「图库」页面"><a href="#创建「图库」页面" class="headerlink" title="创建「图库」页面"></a>创建「图库」页面</h2><h3 id="创建页面-1"><a href="#创建页面-1" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>gallery</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: gallery</div><div class="line">date:</div><div class="line">layout: gallery</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「图库」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h3 id="添加数据-1"><a href="#添加数据-1" class="headerlink" title="添加数据"></a>添加数据</h3><p>同样在在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>gallery.yml</code> 的文件。</p>
<p>单个图片的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	full_link: http://example.com/full-image.png</div><div class="line">	thumb_link: http://example.com/thumb-image.png</div><div class="line">	descr: &quot;这是一个描述&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>添加多张图片，只需要根据上面的格式重复填写即可。</p>
</blockquote>
<ul>
<li>将 <code>Name</code> 改为图片名字，例如 <code>Material</code>。</li>
<li><code>http://example.com/full-image.png</code> 为完整图片的地址。</li>
<li><code>http://example.com/thumb-image.png</code> 为图片缩略图的地址，如果没有缩略图也可使用完整图片的地址。</li>
<li><code>这是一个描述</code> 为图片描述。</li>
</ul>
<h2 id="创建「标签云」页面"><a href="#创建「标签云」页面" class="headerlink" title="创建「标签云」页面"></a>创建「标签云」页面</h2><h3 id="创建页面-2"><a href="#创建页面-2" class="headerlink" title="创建页面"></a>创建页面</h3><p>在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>tags</code>（只是建议，可根据自己喜好修改）的文件夹。</p>
<p>然后在文件内创建一个名为 <code>index.md</code> 的 Markdown 文件。</p>
<p>在 <code>index.md</code> 文件内写入如下内容即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date:</div><div class="line">layout: tags</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p><code>title</code> 可修改，<code>layout</code> 不可修改。</p>
</blockquote>
<p>如果想添加「标签云」页面的入口，请参考 <a href="https://material.viosey.com/intro/#pages" target="_blank" rel="external">独立页面</a>。</p>
<h2 id="创建「私有」页面"><a href="#创建「私有」页面" class="headerlink" title="创建「私有」页面"></a>创建「私有」页面</h2><p>如果某篇文章不想显示在站点中，只需要在 <code>front-matter</code> 中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">layout: private</div></pre></td></tr></table></figure>
<h2 id="添加自定义代码"><a href="#添加自定义代码" class="headerlink" title="添加自定义代码"></a>添加自定义代码</h2><p>如果想要在站点添加自定义 <code>font-face</code> 或者统计代码（例如 <code>Google Analytics</code>）。</p>
<p>需要在 hexo 目录下的 <code>source</code> 文件夹内创建一个名为 <code>_data</code>（禁止改名）的文件夹。</p>
<p>然后在文件内创建一个名为 head.yml 的文件。</p>
<p>单个代码格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Name:</div><div class="line">	&quot;put your code here&quot;</div></pre></td></tr></table></figure>
<p>代码将显示在 <code>` 之前，</code>Name` 将作为注释显示在代码上方。</p>
<h2 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h2><p><a href="https://material.google.com/style/color.html#color-color-palette" target="_blank" rel="external">Color palette</a></p>
<h2 id="Material-图标"><a href="#Material-图标" class="headerlink" title="Material 图标"></a>Material 图标</h2><p>用于自定义例如 <code>dropdown: icon</code> 的图标。</p>
<p><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a></p>
<h2 id="代码高亮样式"><a href="#代码高亮样式" class="headerlink" title="代码高亮样式"></a>代码高亮样式</h2><p>从 <code>1.3.0</code> 版本开始，您可以使用 <code>hexo-prism-plugin</code> 进行代码染色，具体文档请参阅<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="external">Hexo-Prism-Plugin 插件文档</a></p>
<p>在 <strong>主题配置文件</strong> 中定位到 <code>Integrated Services</code> 即可进行第三方服务的配置。</p>
<h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><h3 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h3><p>Material 内置了一套 多说 的 Material Design 样式。</p>
<p>使用 <a href="https://duoshuo.com/" target="_blank" rel="external">多说</a>，仅需在 <strong>主题配置文件</strong> 中填写 <code>comment: use:</code> 字段，值设置为 <code>&quot;duoshuo&quot;</code>。</p>
<p>然后在 <code>comment: shortname:</code> 填入你的多说 shortname</p>
<blockquote>
<p>主题的多说评论使用两种 <code>tread key</code>，使用方式参考：<a href="https://material.vss.im/intro/#comment" target="_blank" rel="external">comment</a>。<br>默认为文章的相对路径。<br>另一种为 id，需要在 <code>front-matter</code> 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; id: id_number</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<p>如果是从其他博客系统迁移过来，需要和多说后台的 Thread_Key 保持一致。</p>
<h3 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h3><p>使用 <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a>，仅需在 <strong>主题配置文件</strong> 中填写 <code>comment: use:</code> 字段，值设置为 <code>&quot;disqus&quot;</code> 或者 <code>&quot;disqus_click&quot;</code>。</p>
<p>然后在 <code>comment: shortname:</code> 填入你的 Disqus shortname</p>
<hr>
<p>需要注意的是此处的 <code>shortname</code> 不是你的登录的 id，是你的评论二级域名去掉 <code>.duoshuo.com</code> 或 <code>.disqus.com</code> 部分</p>
<blockquote>
<p>例如：多说域名 <code>example.duoshuo.com</code> / Disqus 域名 <code>example.disqus.com</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; shortname: example</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><p>阅读 <a href="https://material.viosey.com/intro/#comment" target="_blank" rel="external">Intro-comment</a> 搜索系统配置介绍。</p>
<h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>调用 Google 搜索引擎对您的站点进行搜索。</p>
<p>在 <strong>主题配置文件</strong> 中修改 <code>search: use</code> 的值为 <code>google</code> 即可。</p>
<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>使用本地搜索需要安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> 插件。<br>然后在 <code>站点配置</code> 文件中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">	path: search.xml</div><div class="line">	field: post</div></pre></td></tr></table></figure>
<h3 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h3><p>注册 <a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a>，然后在 <strong>主题配置文件</strong> 中修改 <code>search: use</code> 的值为 <code>swiftype</code>，并填入你的 <code>swiftype_key</code>。</p>
<blockquote>
<p>在你的 Swiftype Install Code 中，有这么一行代码 <code>_st(&#39;install&#39;,&#39;*****&#39;,&#39;2.0.0&#39;);</code></p>
<p><code>*****</code> 即为 <code>swiftype_key</code></p>
</blockquote>
<h2 id="浏览统计"><a href="#浏览统计" class="headerlink" title="浏览统计"></a>浏览统计</h2><h3 id="Leancloud"><a href="#Leancloud" class="headerlink" title="Leancloud"></a>Leancloud</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>打开 LeanCloud 官网，进入<a href="https://leancloud.cn/login.html#/signup" target="_blank" rel="external">注册页面</a>注册。完成邮箱激活后，点击头像，进入控制台页面，如下：</p>
<p><img src="https://qiniu.viosey.com/img/leancloud-config-1.png" alt="img"></p>
<h4 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h4><p>创建一个新应用 (默认类型为JavaScript SDK)，点击应用进入；</p>
<p>创建名称为 <code>Counter</code> 的 Class<br>注意：<code>ACL 权限</code> 必须为 <code>无限制</code><br><img src="https://qiniu.viosey.com/img/leancloud-config-2.png" alt="img"><br><img src="https://qiniu.viosey.com/img/leancloud-config-3.png" alt="img"></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>编辑 <code>主题配置文件</code> ，修改 <code>leancloud</code> 条目<br>将 <code>enable</code> 改为 <code>true</code>，再填入 <code>app_id</code> 与 <code>app_key</code>。</p>
<blockquote>
<p>在 <code>应用-&gt;设置-&gt;应用 Key</code> 可看到 <code>APP ID</code> 与 <code>APP Key</code>，</p>
</blockquote>
<h4 id="Web-安全性"><a href="#Web-安全性" class="headerlink" title="Web 安全性"></a>Web 安全性</h4><p>为了保证应用的统计计数功能仅应用于自己的博客系统，你可以在 <code>应用-&gt;设置-&gt;安全中心</code> 的Web安全域名中加入自己的博客域名，以保证数据的调用安全。</p>
<h3 id="不蒜子"><a href="#不蒜子" class="headerlink" title="不蒜子"></a>不蒜子</h3><p>使用 不蒜子 浏览次数统计，仅需在 <strong>主题配置文件</strong> 中将 <code>busuanzi: enable:</code> 的值设置为 <code>true</code>。</p>
<p>其中：</p>
<ul>
<li><code>all_site_uv</code> 可统计全站的独立访客人数，即可在 <code>blog_info</code> 模块的 <code>Menu</code> 菜单中看到。</li>
<li><code>post_pv</code> 统计每篇文章的页面浏览次数，在文章页的 <code>分享按钮</code> 菜单中可看到。</li>
<li><code>busuanzi_pure_mini_js</code> 调用不蒜子统计 js 文件，可将改文件放到自己的 CDN 然后修改值。</li>
</ul>
<h2 id="捐赠是什么？"><a href="#捐赠是什么？" class="headerlink" title="捐赠是什么？"></a>捐赠是什么？</h2><p>捐赠是国外用来支持开发者和资源贡献者的一种常见的方式。这些开发者不通过加入广告或者进行第三方推广获得收入，仅通过使用的用户自己主动捐赠来表达对开发者的感谢。</p>
<h2 id="为什么要捐赠？"><a href="#为什么要捐赠？" class="headerlink" title="为什么要捐赠？"></a>为什么要捐赠？</h2><p>我（viosey）把开发 Material 主题作为我的业余爱好，同时我对此乐此不疲。但是，这毕竟让我付出了时间成本、设备成本，同时为了 Material 文档和 Demo 的稳定访问也使用了 CDN。为了平衡宽带，服务器，CDN 的使用费用，因此，我希望使用捐赠的方式来平衡以上活动之中的投入。</p>
<p>所以如果您觉得我制作的 主题、我写的教程、我维护的项目或者提供的其它资源对你有帮助，您可以对我进行捐赠。捐赠是自愿的，非强制性的，捐赠多少也都没关系；您的支持就是对我最大的支持！</p>
<h2 id="捐赠的作用？"><a href="#捐赠的作用？" class="headerlink" title="捐赠的作用？"></a>捐赠的作用？</h2><p>当一个非盈利项目仅仅依靠兴趣的支撑，很难确定它还能走多远。所有的捐赠都将用于提升我的环境配置，维持网站的运行和提高我的积极性。</p>
<h2 id="捐赠的渠道？"><a href="#捐赠的渠道？" class="headerlink" title="捐赠的渠道？"></a>捐赠的渠道？</h2><p><a href="https://www.paypal.me/viosey" target="_blank" rel="external">PayPal</a></p>
<p><strong>支付宝：</strong><br><img src="https://material.viosey.com/images/donate/AliPayQR.png" alt="img"></p>
<p><strong>微信支付：</strong><br><img src="https://material.viosey.com/images/donate/WeChanQR.png" alt="img"></p>
<p><strong>比特币：</strong><br><img src="https://material.viosey.com/images/donate/BTCQR.png" alt="img"></p>
<h2 id="捐赠者名单"><a href="#捐赠者名单" class="headerlink" title="捐赠者名单"></a>捐赠者名单</h2><p>十分感谢以下捐赠者给予的打赏：</p>
<ul>
<li>$ 20.00 SGD — Sun Ximeng</li>
<li>￥ 10.00 CNY — 佚名 (微信捐赠）</li>
<li>￥ 5.00 CNY — 神楽坂立音</li>
<li>￥ 5.00 CNY — Before_summ</li>
</ul>
<h2 id="捐赠前要考虑什么-？"><a href="#捐赠前要考虑什么-？" class="headerlink" title="捐赠前要考虑什么 ？"></a>捐赠前要考虑什么 ？</h2><p>这个渠道的存在并不意味着你必须捐赠。你也可以继续使用而不做任何事。</p>
<p>你的捐赠意味着你对我过去所做的表示感谢，而不是表达对未来的期望。但你的捐赠会提高我的积极性和设备配置让我努力把手头上的事做的更好。</p>
<p>我会维护一份名单以感谢所有的捐赠者。正如我所说，捐赠是一个向我表示感谢的方式。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[升级Hexo出现ERROR Deployer not found: git 解决方案]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/26/%E5%8D%87%E7%BA%A7Hexo%E5%87%BA%E7%8E%B0ERROR-Deployer-not-found-git/</url>
      <content type="html"><![CDATA[<p>执行以下代码即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>重新deploy即可。</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac下查找端口是否占用及关闭占用端口进程]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/26/mac%E4%B8%8B%E6%9F%A5%E6%89%BE%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E5%8D%A0%E7%94%A8%E5%8F%8A%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>如何查找某个端口是否被占用:</p>
<p>我们查找下 4000 端口当前被谁占用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexdeMacBook-Air:Hexo_Material apple$ lsof -i:4000</div></pre></td></tr></table></figure>
<p>结果显示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">COMMAND  PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</div><div class="line">node    1341 apple   28u  IPv4 0x72e37ef4542a1f31      0t0  TCP *:terabase (LISTEN)</div><div class="line">node    1341 apple   35u  IPv4 0x72e37ef454cfc449      0t0  TCP localhost:terabase-&gt;localhost:53866 (CLOSE_WAIT)</div><div class="line">node    1341 apple   36u  IPv4 0x72e37ef44b50d259      0t0  TCP localhost:terabase-&gt;localhost:53867 (CLOSE_WAIT)</div><div class="line">node    1341 apple   37u  IPv4 0x72e37ef44b87e259      0t0  TCP localhost:terabase-&gt;localhost:53868 (CLOSE_WAIT)</div><div class="line">node    1341 apple   38u  IPv4 0x72e37ef447e55f31      0t0  TCP localhost:terabase-&gt;localhost:53869 (CLOSE_WAIT)</div><div class="line">node    1341 apple   39u  IPv4 0x72e37ef448b52b51      0t0  TCP localhost:terabase-&gt;localhost:53870 (CLOSE_WAIT)</div></pre></td></tr></table></figure>
<p>可以看到一个node进程占用了 4000 端口.</p>
<p>如何关闭此进程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlexdeMacBook-Air:Hexo_Material apple$ kill -9 1341</div></pre></td></tr></table></figure>
<p>ok,这样就结束了占用 4000 端口的进程.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo主题Material的使用]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/26/Material%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>安装Hexo后，运行以下命令在目标中初始化Hexo ``。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>一旦初始化，这里是你的项目文件夹将是什么样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h2 id="安装「Material」"><a href="#安装「Material」" class="headerlink" title="安装「Material」"></a>安装「Material」</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件放置于站点目录的 <code>themes</code> 目录下，然后修改下配置文件即可。<br>具体到 Material 来说，有 <code>Github</code> 和 <code>NPM</code> 两种方式。</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><blockquote>
<p>可以选择 克隆 或者 下载 <a href="https://github.com/viosey/hexo-theme-material/releases" target="_blank" rel="external">稳定的发布版本</a>。</p>
</blockquote>
<p>为了方便之后的更新，建议使用 <strong>克隆</strong> 的方式。克隆命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site/themes</div><div class="line">$ git clone https://github.com/viosey/hexo-theme-material.git material</div></pre></td></tr></table></figure>
<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-material</div></pre></td></tr></table></figure>
<p>该方式会把 Material 主题下载到 <code>hexo</code> 目录下的 <code>node_modules</code> 文件夹中。<br>找到 <code>hexo-material</code> 文件夹，然后把文件复制到 <code>themes</code> 目录中的 <code>Material</code> 主题文件夹里。</p>
<h2 id="启用「Material」"><a href="#启用「Material」" class="headerlink" title="启用「Material」"></a>启用「Material」</h2><p>克隆完成后，修改主题文件夹名称，将其改为 <code>material</code> 。<br>然后打开 <strong>站点配置文件</strong>，找到 <code>theme</code> 字段，并将其值更改为 <code>material</code> 。</p>
<blockquote>
<p>文件夹名称可自由修改，并不是唯一的，只需 <code>theme</code> 字段与之对应即可。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code>，并访问 <code>http://localhost:4000</code>，确保站点正确运行。</p>
<h2 id="更新「Material」"><a href="#更新「Material」" class="headerlink" title="更新「Material」"></a>更新「Material」</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>即可拉取最新版本。</p>
<h3 id="NPM-1"><a href="#NPM-1" class="headerlink" title="NPM"></a>NPM</h3><p>NPM 更新有两种方式：</p>
<h4 id="npm-update"><a href="#npm-update" class="headerlink" title="npm-update"></a>npm-update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update hexo-material</div></pre></td></tr></table></figure>
<p>然后将文件复制到 <code>Material</code> 主题文件夹中。</p>
<h4 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h4><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="external">npm-check</a> 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。</p>
<p>安装 npm-check：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g npm-check</div></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm-check hexo-material</div></pre></td></tr></table></figure>
<p>使用空格键可以选择需要处理的包，回车直接进行处理。</p>
<h2 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h2><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p>编辑 <strong>站点配置文件</strong>，将 <code>language</code> 设置成你所需要的语言。<br>可用的语言如下：</p>
<ul>
<li>العَرَبِيَّة (ar)</li>
<li>English (en)</li>
<li>Español (es)</li>
<li>Français (fr)</li>
<li>Deutsche (de)</li>
<li>日本語 (ja)</li>
<li>Malay (ms)</li>
<li>简体中文 (zh-CN)</li>
<li>繁體中文 (zh-TW)</li>
</ul>
<blockquote>
<p>例如：选用繁體中文，则配置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; language: zh-TW</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>编辑 <strong>站点配置文件</strong>，<code>url</code> 填写主域名，<code>root</code> 填写 子目录/根域名</p>
<blockquote>
<p>例如：站点域名为 <code>http://example.com/hexo</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; url: http://example.com</div><div class="line">&gt; root: /hexo</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>若你的站点没有运行在子目录中，则 <code>root</code> 填写为 <code>/</code>。</p>
<h3 id="作者名称"><a href="#作者名称" class="headerlink" title="作者名称"></a>作者名称</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述设置"><a href="#站点描述设置" class="headerlink" title="站点描述设置"></a>站点描述设置</h3><p>编辑 <strong>站点配置文件</strong>，设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>，配置方式如插件 <code>README.md</code> 所示。<br>然后在 <a href="https://material.viosey.com/intro/#url" target="_blank" rel="external">url: rss</a> 中添加生成的 feed 路径。</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[新产品开发过程（一）]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/25/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- 定义</div><div class="line">- 阶段回顾法</div><div class="line">- 阶段关卡发</div><div class="line">- 瀑布式开发法</div><div class="line">- 敏捷式开发法</div><div class="line">- 精益生产开发法</div><div class="line">- 设计思考</div><div class="line">- 过程拥有者</div></pre></td></tr></table></figure>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><h5 id="过程定义："><a href="#过程定义：" class="headerlink" title="-过程定义："></a>-过程定义：</h5><p>新产品开发过程</p>
<ol>
<li>一组严谨定义的任务与步骤，用以描述一家公司将初期构想各自转换成可以销售的产品与或服务的正规方法。</li>
<li>新产品开发词汇表。<strong><em>（存疑）</em></strong></li>
</ol>
<p>步骤、活动、决策、目标的组合</p>
<p>如果执行得当将会产生出组织需要的新产品</p>
<h5 id="为什么需要过程"><a href="#为什么需要过程" class="headerlink" title="-为什么需要过程"></a>-为什么需要过程</h5><p>10项能赢的重要成功因素</p>
<ol>
<li>独特优越的产品</li>
<li>强力的市场导向</li>
<li>更多前期的研究</li>
<li>在开发前敏锐而提早的产品定义</li>
<li>正确的组织架构 —— 团队合作</li>
<li>创新而又支持性的环境</li>
<li>领导阶层支持</li>
<li>创建一个漏斗而非隧道</li>
<li>将产品管理视为过程</li>
<li>给予产品开发足够的资源</li>
</ol>
<h5 id="前期多做研究是否意味上市时间落后？"><a href="#前期多做研究是否意味上市时间落后？" class="headerlink" title="- 前期多做研究是否意味上市时间落后？"></a>- 前期多做研究是否意味上市时间落后？</h5><p>​    在前期话费较多时间和金钱可以大幅改善成功的机会 - 对此有明显的证据</p>
<p>​    更多的黄钻被工作会导致更好更敏捷的产品和项目定义 - 这会加速开发阶段（较少不断地浪费时间）</p>
<p>​    完成前期准备工作可以预先考虑到产品问题和设计改更 - 这些产品设计变更可以在这过程早起完成，而不是等产品上市才做</p>
<h5 id="各种过程的演化"><a href="#各种过程的演化" class="headerlink" title="-各种过程的演化"></a>-各种过程的演化</h5><p>​    大多数公司修改新产品开发过程以符合所需</p>
<p>​    任何种类的新产品开发过程都比没有任何过程要有生产力</p>
<p>​    其他一致的系统有：</p>
<ul>
<li>阶段回顾</li>
<li>阶段关卡</li>
</ul>
<h4 id="阶段回顾法"><a href="#阶段回顾法" class="headerlink" title="阶段回顾法"></a>阶段回顾法</h4><h5 id="阶段回顾法-1"><a href="#阶段回顾法-1" class="headerlink" title="阶段回顾法"></a>阶段回顾法</h5><p>​    在阶段性的产品开发过程中，首先，一项功能完成一组任务，然后将产生的信息持续不断地传递给其他功能，在逐次地完成西一组任务并将所有信息传递给下一功能。</p>
<p>在这种产品开发过程中，非常缺乏多功能的团队合作。</p>
<p>也称为接力过程</p>
<p>大多数公司已从这种流程转移至使用多功能软对的阶段关卡发</p>
<p><br></p>
<p>阶段一：识别机会、选择</p>
<p>阶段二：产生概念</p>
<p>阶段三：概念项目评量</p>
<p>阶段四：开发</p>
<p>阶段五：上市</p>
<h5 id="模糊的的前端"><a href="#模糊的的前端" class="headerlink" title="模糊的的前端"></a>模糊的的前端</h5><p>阶段1~3成为模糊的前端</p>
<p>当产品概念仍然很模糊的时候，产品呢开发的刚起步时期会很混乱</p>
<p>在更正式的产品开发过程之前，一般包括三项任务</p>
<ul>
<li>策略规则</li>
<li>概念产生</li>
<li>预做技术评量</li>
</ul>
<p>这些活动通常杂乱无章，不可预期，毫无组织</p>
<p>比较起来，后来的新产品开发过程典型的有组织、可预期以及有条理，具有一组规定的活动，应回答的问题以及该做的决定</p>
<h4 id="阶段关卡法"><a href="#阶段关卡法" class="headerlink" title="阶段关卡法"></a>阶段关卡法</h4><p>阶段关卡过程是为了将一种新产品的项目从想法逐渐转变成上市产品的一种概念</p>
<p>阶段关卡法讲所要付出的努力以管理决策关卡区分成不同的阶段</p>
<p>跨功能团队在管理层批准进行下一阶段的产品开发之前，必须成功地完成每一阶段所规定的一组跨功能任务</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7nanvqd8g30fu02tmx8.gif" alt=""></p>
<h5 id="阶段-1-2"><a href="#阶段-1-2" class="headerlink" title="阶段(1/2)"></a>阶段(1/2)</h5><p>阶段是跨功能的（其中没有研究和开发或营销阶段）以及为了提升上市的速度，每一项活动是并行的</p>
<p>每一阶段的成本都高于前一阶段，结果是渐进的承诺。一旦不确定性降低，可以提高支出，风险也可管控（As uncertainties decrease, expenditures are allowed to rise and risk is managed.）</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7naxr3brg30ai02tjra.gif" alt=""></p>
<h5 id="阶段-2-2"><a href="#阶段-2-2" class="headerlink" title="阶段(2/2)"></a>阶段(2/2)</h5><p>活动：团队必须根据项目计划进行工作</p>
<p>集成分析：所有功能性活动结果的团队集成分析可以藉由跨功能互动推衍</p>
<p>集成物：代表集成分析的结果</p>
<p>活动 + 分析 = 交付物</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7nbb7jyog3080030q2t.gif" alt=""></p>
<h5 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h5><p>交付物：关卡查验的输入 - 项目领导者和团队交付至会议的东西</p>
<p>标准：为了能做出继续/终止以及优先序的决策，项目在接受评判时所需的条件</p>
<p>输出：关卡查验的结果。关卡必须清楚地表达结果，须包括：一项决策（继续、终止、暂停、循环）以及下一步怎么走（核准的项目计划，日期以及下一关卡所同意的交付物）</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd7nbh2dvtg3080030wed.gif" alt=""></p>
<h5 id="关卡通过标准"><a href="#关卡通过标准" class="headerlink" title="关卡通过标准"></a>关卡通过标准</h5><h6 id="必须符合"><a href="#必须符合" class="headerlink" title="必须符合"></a>必须符合</h6><p>​    有是非题，一个NO表示终止的决定，检查清单是用来表示必须符合条目最平常的格式</p>
<h6 id="应该符合"><a href="#应该符合" class="headerlink" title="应该符合"></a>应该符合</h6><p>​    有高度渴望的项目特性，但是对问题回答NO并不会终止该项目；确切的地说是对这些问题加以评分并决定项目的分数，评分模型将‘应该符合’的问题处理得很好</p>
<h5 id="关卡会议"><a href="#关卡会议" class="headerlink" title="关卡会议"></a>关卡会议</h5><p>把关者（守门人）包括技术和商业人民</p>
<p>可以透过鄙视来对比评量标准以审核关于项目的想法</p>
<p>这一份必须符合标准的清单会以“是”、“否”来给分，并且所有的答案必须是“是”；只要有一个“否”便会终止此项目</p>
<p>当高层主管在关卡会议批准团队的行动计划，表示他们也愿意拨出资源：金钱，人力以及给予项目领导者和团队时间</p>
<h5 id="阶段0：探索发现-Discovery"><a href="#阶段0：探索发现-Discovery" class="headerlink" title="阶段0：探索发现 Discovery"></a>阶段0：探索发现 Discovery</h5><p>设计前置工作一发现并揭露机会以及产生想法（点子）</p>
<p>关键活动</p>
<pre><code>1. 想法的捕捉和处理系统
2. 在顾客产业中策略性分裂
3. 产生剧本
4. 顾客声音的研究
5. 和领先用户一同工作
6. 趋势导向的技术开发
</code></pre><h5 id="探索发现Discovery（阶段0）（1-2）"><a href="#探索发现Discovery（阶段0）（1-2）" class="headerlink" title="探索发现Discovery（阶段0）（1/2）"></a>探索发现Discovery（阶段0）（1/2）</h5><p>这是任何产品开发的第一部分，无论是否为阶段关卡模型都会使用</p>
<p>开发团队决定哪些项目是公司想要的并有能力追求的</p>
<p>对公司而言，在这阶段参与想法产生活动，例如头脑风暴或其他团队思考阶段，是很普通的</p>
<p>一旦点子产生团队选定一个他们想要进行的项目，此项目通过由组织决策选的第一关卡</p>
<h5 id="探索发现Discovery（阶段0）（2-2）"><a href="#探索发现Discovery（阶段0）（2-2）" class="headerlink" title="探索发现Discovery（阶段0）（2/2）"></a>探索发现Discovery（阶段0）（2/2）</h5><p>当寻找产品点子时，为了能启发商业机会，组织能去看看外面的世界是有益的</p>
<p>与顾客沟通以了解他们如何使用产品后，对于点子产生会有很大的突破。特别是和领先用户沟通可以对开发者提供极大的反馈，领先用户是最有可能对陈品感到热情的顾客</p>
<p>除了和领先用户沟通，和供货商沟通也许会有帮助。了解所有商业种类如何运用原料或许可以据此发现之前尚未被开发的可能性</p>
<h5 id="阶段0：主要输出"><a href="#阶段0：主要输出" class="headerlink" title="阶段0：主要输出"></a>阶段0：主要输出</h5><h6 id="机会概念"><a href="#机会概念" class="headerlink" title="机会概念"></a>机会概念</h6><p>一家公司的技能和资源，或顾客问题。技术驱动或者市场驱动或者两者都是</p>
<h6 id="产品创新章程"><a href="#产品创新章程" class="headerlink" title="产品创新章程"></a>产品创新章程</h6><p>组织努力的中心是将新产品推向市场，这包括项目开始的原因、目标、目的，指导方针以及项目的范围，章程要包括市场喜好，顾客需求，以及潜在销售和利润的假设。</p>
<h5 id="关卡-1：筛选点子"><a href="#关卡-1：筛选点子" class="headerlink" title="关卡 1：筛选点子"></a>关卡 1：筛选点子</h5><p>筛选点子是讲资源投入项目的第一项选择，项目就此诞生</p>
<p>假设在发现阶段获得很多点子，接着的任务便是筛选并排列出值得话费时间和金钱的点子</p>
<p>关卡1是一般性筛选，奖项木透过少数关键的“必须符合”以及“应该符合”的标准作判断</p>
<p>财务标准并非典型第一步筛选的一部分</p>
<blockquote>
<p>以下晚点更新</p>
</blockquote>
<h5 id="关卡-1-评估标准（1-2）"><a href="#关卡-1-评估标准（1-2）" class="headerlink" title="关卡 1 评估标准（1/2）"></a>关卡 1 评估标准（1/2）</h5><h5 id="关卡-1-评估标准（2-2）"><a href="#关卡-1-评估标准（2-2）" class="headerlink" title="关卡 1 评估标准（2/2）"></a>关卡 1 评估标准（2/2）</h5><h5 id="阶段1：定义范围"><a href="#阶段1：定义范围" class="headerlink" title="阶段1：定义范围"></a>阶段1：定义范围</h5><h5 id="阶段1：定义范围-1"><a href="#阶段1：定义范围-1" class="headerlink" title="阶段1：定义范围"></a>阶段1：定义范围</h5><h5 id="关卡2：二次筛选"><a href="#关卡2：二次筛选" class="headerlink" title="关卡2：二次筛选"></a>关卡2：二次筛选</h5><h5 id="关卡2：评估标准"><a href="#关卡2：评估标准" class="headerlink" title="关卡2：评估标准"></a>关卡2：评估标准</h5><h5 id="阶段2：建立商业论证"><a href="#阶段2：建立商业论证" class="headerlink" title="阶段2：建立商业论证"></a>阶段2：建立商业论证</h5><h5 id="主要输出"><a href="#主要输出" class="headerlink" title="主要输出"></a>主要输出</h5><h5 id="关卡3：开始开发"><a href="#关卡3：开始开发" class="headerlink" title="关卡3：开始开发"></a>关卡3：开始开发</h5><h5 id="关卡3：必须满足的评估标准"><a href="#关卡3：必须满足的评估标准" class="headerlink" title="关卡3：必须满足的评估标准"></a>关卡3：必须满足的评估标准</h5><h5 id="关卡3：应该满足的评估标准（1-2）"><a href="#关卡3：应该满足的评估标准（1-2）" class="headerlink" title="关卡3：应该满足的评估标准（1/2）"></a>关卡3：应该满足的评估标准（1/2）</h5><h5 id="关卡3：应该满足的评估标准（2-2）"><a href="#关卡3：应该满足的评估标准（2-2）" class="headerlink" title="关卡3：应该满足的评估标准（2/2）"></a>关卡3：应该满足的评估标准（2/2）</h5><h5 id="阶段3：开发"><a href="#阶段3：开发" class="headerlink" title="阶段3：开发"></a>阶段3：开发</h5><h5 id="关卡4：开始测试"><a href="#关卡4：开始测试" class="headerlink" title="关卡4：开始测试"></a>关卡4：开始测试</h5><h5 id="阶段4：测试与验证"><a href="#阶段4：测试与验证" class="headerlink" title="阶段4：测试与验证"></a>阶段4：测试与验证</h5><h5 id="阶段4：主要活动与输出"><a href="#阶段4：主要活动与输出" class="headerlink" title="阶段4：主要活动与输出"></a>阶段4：主要活动与输出</h5><h5 id="测试与验证（阶段4）"><a href="#测试与验证（阶段4）" class="headerlink" title="测试与验证（阶段4）"></a>测试与验证（阶段4）</h5><h5 id="关卡5：上市"><a href="#关卡5：上市" class="headerlink" title="关卡5：上市"></a>关卡5：上市</h5><h5 id="阶段5：上市"><a href="#阶段5：上市" class="headerlink" title="阶段5：上市"></a>阶段5：上市</h5><h5 id="产品上市（阶段5）"><a href="#产品上市（阶段5）" class="headerlink" title="产品上市（阶段5）"></a>产品上市（阶段5）</h5><h5 id="决策"><a href="#决策" class="headerlink" title="决策"></a>决策</h5><h5 id="过程例外"><a href="#过程例外" class="headerlink" title="过程例外"></a>过程例外</h5><h5 id="先产品开发是每个人的责任"><a href="#先产品开发是每个人的责任" class="headerlink" title="先产品开发是每个人的责任"></a>先产品开发是每个人的责任</h5><h4 id="瀑布式开发法"><a href="#瀑布式开发法" class="headerlink" title="瀑布式开发法"></a>瀑布式开发法</h4><blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> npdp </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[支持NFC的手机（2016）]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/24/%E6%94%AF%E6%8C%81NFC%E7%9A%84%E6%89%8B%E6%9C%BA%EF%BC%882016%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><p>华为Mate 9(64GB/全网通)<br>华为Mate S臻逸版(128GB/双4G)<br>华为Mate S压感屏版(128GB/电信4G)<br>华为Mate S臻享版(64GB/移动4G)<br>华为Mate S臻享版(32GB/电信4G)<br>华为Mate 8(64GB/全网通)<br>华为Mate 8(32GB/全网通)<br>华为Mate 8(64GB/电信4G)<br>华为Mate 8(32GB/电信4G)<br>华为Mate 8(32GB/移动4G)<br>华为Mate S臻享版(64GB/电信4G)<br>华为Mate S臻享版(64GB/双4G)<br>华为Nexus 7(移动4G)<br>华为Mate 7标准版(16GB/移动4G)</p>
<h4 id="荣耀"><a href="#荣耀" class="headerlink" title="荣耀"></a>荣耀</h4><p>荣耀V9标准版(64GB/全网通)<br>荣耀V9尊享版(128GB/全网通)<br>荣耀V9高配版(64GB/全网通)<br>荣耀8吴亦凡定制版(64GB/全网通)<br>荣耀8(32GB/双4G)<br>荣耀8高配版(32GB/全网通)<br>荣耀8高配版(64GB/全网通)<br>荣耀7超女定制版(64GB/全网通)<br>荣耀8(32GB/全网通)<br>荣耀V8(32GB/全网通)<br>荣耀畅玩4C 增强版(16GB/电信4G)<br>荣耀畅玩5X Plus(64GB/移动4G)<br>荣耀7(16GB/双4G)<br>荣耀7(16GB/电信4G)<br>荣耀7(64GB/全网通)<br>荣耀畅玩4C 标准版(8GB/电信4G)<br>荣耀6(32GB/移动4G)<br>荣耀6(16GB/移动4G)<br>荣耀6(16GB/联通4G)</p>
<h4 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h4><p>小米MIX(128GB/全网通)<br>小米5S(64GB/全网通)<br>小米5(32GB/全网通)<br>小米5S Plus(64GB/全网通)<br>小米5S(32GB/全网通)<br>小米5高配版(64GB/全网通)<br>小米5S Plus(128GB/全网通)<br>小米5S(128GB/全网通)<br>小米5尊享版(128GB/全网通)<br>小米Max(32GB/全网通)<br>小米MIX尊享版(256GB/全网通)<br>小米5尊享3D玻璃版(128GB/全网通)</p>
<h4 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h4><p>三星GALAXY S7 Edge皇帝版(128GB/全网通)<br>三星GALAXY C9 Pro(64GB/全网通)<br>三星GALAXY S7 Edge奥运典藏版(32GB/全网通)<br>三星GALAXY S7 Edge蝙蝠侠特别版(32GB/全网通)<br>三星2016版GALAXY J7(16GB/电信4G)<br>三星GALAXY S7 Edge(64GB/全网通)<br>三星GALAXY Note 5(64GB/全网通)<br>三星2016版Galaxy A5(16GB/移动4G)<br>三星GALAXY S7移动定制(32GB/移动4G)<br>三星GALAXY A9高配版(32GB/全网通)<br>三星2016版GALAXY J7(16GB/双4G)<br>三星2016版GALAXY J5(16GB/双4G)<br>三星2016版Galaxy A5(16GB/全网通)</p>
<p>三星GALAXY Note 7(64GB/全网通)<br>三星GALAXY A8升级版(32GB/移动4G)<br>三星SM-A310(16GB/全网通)<br>三星SM-A510(16GB/移动4G)<br>三星GALAXY S7 Edge(32GB/全网通)<br>三星Galaxy S6 Edge+(64GB/全网通)<br>三星Galaxy S6 Edge+(32GB/全网通)<br>三星GALAXY A8(32GB/全网通)<br>三星GALAXY S6 Mini(16GB/移动4G)<br>三星Project Zero 2(移动4G)<br>三星G430(移动4G)<br>三星GALAXY S6 Edge(64GB/全网通)<br>三星GALAXY S7(32GB/全网通)<br>三星GALAXY S6(32GB/电信4G)<br>三星GALAXY A8(16GB/全网通)<br>三星2016版Galaxy A9(32GB/全网通)</p>
<p>三星Galaxy S6 Active(移动4G)<br>三星GALAXY J3(8GB/电信4G)<br>三星GALAXY J5(16GB/移动4G)<br>三星GALAXY J7(16GB/移动4G)<br>三星GALAXY S6(32GB/移动4G)<br>三星GALAXY S6 Edge(32GB/全网通)<br>三星GALAXY Note 5(32GB/全网通)<br>三星W2015(16GB/电信4G)<br>三星GALAXY Note 4公开版(16GB/双4G)<br>三星Galaxy Note Edge(64GB/双4G)<br>三星GALAXY Note 4(16GB/联通4G)<br>三星GALAXY Note 4 N9109W(16GB/电信4G)<br>三星GALAXY S5 G9009W(16GB/电信4G)<br>三星GALAXY S6(32GB/全网通)<br>三星GALAXY S5 G9008W(16GB/移动4G)<br>三星GALAXY S5 G9008V(16GB/移动4G)</p>
<p>三星GALAXY S5 G9009D(16GB/电信3G)<br>三星GALAXY Note 4(16GB/移动4G)<br>三星GALAXY S5 G9006V(16GB/联通4G)<br>三星N9006 Galaxy Note 3(64GB/联通3G)<br>三星GALAXY S4 粉色版<br>三星GALAXY S4 棕色版<br>三星GALAXY S4 I9500(64GB/联通3G)</p>
<h4 id="OPPO"><a href="#OPPO" class="headerlink" title="OPPO"></a>OPPO</h4><p>OPPO A37(16GB/全网通)<br>OPPO Find 9<br>OPPO N3(32GB/移动4G)<br>OPPO N1 Mini(16GB/移动4G)<br>OPPO N3(32GB/双4G)<br>OPPO N1 Mini(16GB/联通4G)</p>
<h4 id="vivo"><a href="#vivo" class="headerlink" title="vivo"></a>vivo</h4><p>vivo Xplay 5美国队长定制版(128GB/全网通)<br>vivo Xplay 5旗舰版(128GB/全网通)<br>vivo X5Pro V(16GB/电信4G)<br>vivo X5Pro D 3G运存版(16GB/双4G)<br>vivo Xplay3S X520A(32GB/双4G)</p>
<h4 id="LG"><a href="#LG" class="headerlink" title="LG"></a>LG</h4><p>LG X300(16GB/双4G)<br>LG G4 DUAL皮质版(32G/移动4G)<br>LG V20(64GB/双4G)<br>LG G5 Lite(32GB/移动4G)<br>LG H740<br>LG G4s(8GB/移动4G)<br>LG V10(64GB/双4G)<br>LG G4国际版(32GB/双4G)<br>LG G4 Stylus(4G版)<br>LG VW820(移动4G)<br>LG G3 Beat D729(8GB/电信4G)<br>LG G4(32GB/电信4G)<br>LG G3 D859(32GB/电信3G)<br>LG G3 D858(32GB/移动4G)<br>LG G2 D820(16GB/电信3G)<br>LG G2(16GB/联通3G)<br>LG G2(32GB/联通3G)</p>
]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
            <tag> NFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[献给写作者的markdown新手指南]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/22/%E5%85%88%E7%BB%99%E5%86%99%E4%BD%9C%E8%80%85%E7%9A%84markdown%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h4 id="Hello-world！"><a href="#Hello-world！" class="headerlink" title="Hello world！"></a>Hello world！</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些你听到的前端名词]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/22/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%90%AC%E5%88%B0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%90%8D%E8%AF%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>那些你听到的前端名词</p>
</blockquote>
<h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><blockquote>
<p>Node.js是JavaScript在服务器端的一个运行环境，也是一个工具库，用来和服务器端其他软件互动。它的JavaScript解释器，采用了Google公司的V8引擎。</p>
</blockquote>
<p>nodejs是由<a href="https://github.com/ry" target="_blank" rel="external">Ryan Dahl</a>写的。他做nodejs的初衷是为了做一个高性能是web服务器。<br>为了实现高性能服务器，实现要点是：</p>
<ul>
<li>事件驱动</li>
<li>非阻塞I / O（异步I / O）</li>
</ul>
<h4 id="nodejs的特点"><a href="#nodejs的特点" class="headerlink" title="nodejs的特点"></a>nodejs的特点</h4><ul>
<li>异步I / O</li>
<li>事件与回调函数</li>
<li>单线程</li>
</ul>
<h4 id="nodejs优缺点"><a href="#nodejs优缺点" class="headerlink" title="nodejs优缺点"></a>nodejs优缺点</h4><p>优点</p>
<ul>
<li>高并发（最重要的优点）</li>
<li>适合I / O密集型应用</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul>
<li>不适合CPU密集型应用; CPU密集型应用给节点带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I / O无法发起<br>解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I / O调用的发起</li>
<li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃<br>解决方案：Nnigx反向代理，负载均衡，开多个进程，绑定多个端口;开多个进程监听同一个端口，使用集群模块;也可以使用forever或pm2模块</li>
<li>开源组件库质量参差不齐，更新快，向下不兼容</li>
</ul>
<h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><blockquote>
<p>Vue.js（读音 /vjuː/, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用<a href="http://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="external">单文件组件</a>和 <a href="http://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="external">Vue 生态系统支持的库</a>开发的复杂单页应用。</p>
</blockquote>
<h4 id="Vue-js-主要是干啥的？"><a href="#Vue-js-主要是干啥的？" class="headerlink" title="Vue.js 主要是干啥的？"></a>Vue.js 主要是干啥的？</h4><p>​    它是一个 MVVM 前端框架<br>​    Model / View / ViewModel<br>​    我们不需要撰写任何 DOM 操作代码：被绑定增强的 HTML 模板是底层数据状态的声明式的映射，    数据不过是普通 JavaScript 对象。我们的视图完全由数据驱动。</p>
<h4 id="为什么要用Vue-js"><a href="#为什么要用Vue-js" class="headerlink" title="为什么要用Vue.js"></a>为什么要用Vue.js</h4><pre><code>1.  清晰简单的API让业务代码更好的组织
2.  解决了前端交互复杂而带来的性能问题
3.  健全、颜值高的官⽅⽂档
4.  完整的开发生态链
</code></pre><h4 id="哪些公司在用Vue-js"><a href="#哪些公司在用Vue-js" class="headerlink" title="哪些公司在用Vue.js"></a>哪些公司在用Vue.js</h4><p>​    Google，Facebook，Airbnb，微博 小米 阿里巴巴，百度，饿了么，58</p>
<h3 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h3><blockquote>
<p>待整理</p>
</blockquote>
<h3 id="Angular-js"><a href="#Angular-js" class="headerlink" title="Angular.js"></a>Angular.js</h3><blockquote>
<p>待整理</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端app内置浏览器优化]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/21/%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>未总结完，待续</p>
</blockquote>
<h5 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h5><p>Blink内核与Webkit内核</p>
<p>Blink内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blink内核是由谷歌开发，chromium/chrome浏览器的内核，实际上也是由webkit衍生而来。</div></pre></td></tr></table></figure>
<p>Webkit内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webkit是通用内核，适合各种各样的平台，chromium只是其中一个。开源，有专门团队维护。苹果的safari浏览器脱自webkit内核，话语权中。后来Google chromium的理念与webkit有分歧，谷歌自立门户，开始Blink。</div></pre></td></tr></table></figure>
<h5 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安卓的好像是UC的，ios的应该是Safar</div></pre></td></tr></table></figure>
<p>安卓app替换webview</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">低于android 4.4 的webview 是蹩脚的Android WebKit浏览器内核（android版本越低性能就越差,android 4.4以上已经使用了Chromium ）</div></pre></td></tr></table></figure>
<h5 id="几款web引擎"><a href="#几款web引擎" class="headerlink" title="几款web引擎"></a>几款web引擎</h5><ol>
<li>Crosswalk</li>
<li>Tencent X5</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 移动端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo与github搭建个人博客(二)]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/21/Hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>介绍本地Hexo博客网站与Github叠加</p>
</blockquote>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效）。</p>
<p>注意事项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 注册的邮箱一定要验证，否则不会成功；</div><div class="line">2. 仓库名字必须是：username.github.io，其中username是你的用户名；</div><div class="line">3. 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</div></pre></td></tr></table></figure>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><blockquote>
<p>此部分以后在介绍</p>
</blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h3><p>首先，<code>ssh key</code>必须要配置好</p>
<p>然后，配置<code>_config.yml</code>中有关deploy的部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:wanghaonanlpc/wanghaonanlpc.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>此时直接执行<code>hexo d</code>的话一般会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Deployer not found: github 或者 Deployer not found: git</div></pre></td></tr></table></figure>
<p>原因是还需要安装一个插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>
<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p>
<h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #部署到GitHub</div><div class="line">hexo help  # 查看帮助</div><div class="line">hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure>
<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s -g #生成并本地预览</div><div class="line">hexo d -g #生成并上传</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此已经可以完成Hexo与Github搭建个人博客。</p>
<blockquote>
<p>相关文章<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#绑定域名" target="_blank" rel="external">小茗同学的博客园</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo与github搭建个人博客(一)]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/21/Hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>介绍Hexo</p>
</blockquote>
<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p>Hexo是一个快速，简单和强大的博客框架。你写的帖子在<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>（或其他语言）和Hexo生成静态文件与美丽的主题在几秒钟内。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>它只需要几分钟来设置Hexo。如果你遇到一个问题，在这里找不到解决方案，请<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">提交一个GitHub问题</a>，我会尽力解决它。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>安装Hexo非常容易。但是，你需要先安装几个其他的东西：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果你的电脑已经有这些，恭喜你！只需用npm安装Hexo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>如果没有，请按照以下说明安装所有要求。</p>
<blockquote>
<p><strong>对于Mac用户</strong>编译时可能会遇到一些问题。请先从App Store安装Xcode。安装Xcode后，打开Xcode并转到<strong>首选项 - &gt;下载 - &gt;命令行工具 - &gt;安装</strong>以安装命令行工具。</p>
</blockquote>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul>
<li>Windows：下载并安装<a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a>。</li>
<li>苹果：用它安装<a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">自制</a>，<a href="http://www.macports.org/" target="_blank" rel="external">MacPorts的</a>或<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a>。</li>
<li>Linux（Ubuntu，Debian）： <code>sudo apt-get install git-core</code></li>
<li>Linux（Fedora，Red Hat，CentOS）： <code>sudo yum install git-core</code></li>
</ul>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>安装Node.js的最好方法是使用<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>。</p>
<p>卷曲：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | 嘘</div></pre></td></tr></table></figure>
<p>Wget：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | 嘘</div></pre></td></tr></table></figure>
<p>安装nvm后，重新启动终端并运行以下命令以安装Node.js.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install stable</div></pre></td></tr></table></figure>
<p>或者，下载并运行<a href="http://nodejs.org/" target="_blank" rel="external">安装程序</a>。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>一旦所有要求都安装完毕，您可以使用npm安装Hexo。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Once Hexo is installed, run the following commands to initialise Hexo in the target <folder>.</folder></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>Once initialised, here’s what your project folder will look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<h2 id="组态"><a href="#组态" class="headerlink" title="组态"></a>组态</h2><p>**</p>
<p>您可以<code>_config.yml</code>在<a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config" target="_blank" rel="external">备用配置文件</a>中或其中修改站点设置。</p>
<h3 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>您网站的标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>您网站的字幕</td>
</tr>
<tr>
<td><code>description</code></td>
<td>您网站的描述</td>
</tr>
<tr>
<td><code>author</code></td>
<td>你的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>您网站的语言。使用<a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" target="_blank" rel="external">2个字母ISO-639-1代码</a>。默认为<code>en</code>。</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>您网站的时区。Hexo默认情况下使用计算机上的设置。您可以在<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">这里</a>找到可用的时区列表。一些实例是<code>America/New_York</code>，<code>Japan</code>，和<code>UTC</code>。</td>
</tr>
</tbody>
</table>
<h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>您网站的网址</td>
<td></td>
</tr>
<tr>
<td><code>root</code></td>
<td>您网站的根目录</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>文章的<a href="https://hexo.io/docs/permalinks.html" target="_blank" rel="external">永久链接</a>格式</td>
<td><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td><code>permalink_default</code></td>
<td>固定链接中每个段的默认值</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>网站在子目录</strong>如果您的网站位于<code>http://example.org/blog</code>设置<code>url</code>为<code>http://example.org/blog</code>并设置<code>root</code>为的子目录（如）中<code>/blog/</code>。</p>
</blockquote>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>source_dir</code></td>
<td>源文件夹。您的内容存储在哪里</td>
<td><code>source</code></td>
</tr>
<tr>
<td><code>public_dir</code></td>
<td>公共文件夹。将生成静态站点的位置</td>
<td><code>public</code></td>
</tr>
<tr>
<td><code>tag_dir</code></td>
<td>标记目录</td>
<td><code>tags</code></td>
</tr>
<tr>
<td><code>archive_dir</code></td>
<td>存档目录</td>
<td><code>archives</code></td>
</tr>
<tr>
<td><code>category_dir</code></td>
<td>类别目录</td>
<td><code>categories</code></td>
</tr>
<tr>
<td><code>code_dir</code></td>
<td>包括代码目录</td>
<td><code>downloads/code</code></td>
</tr>
<tr>
<td><code>i18n_dir</code></td>
<td>i18n目录</td>
<td><code>:lang</code></td>
</tr>
<tr>
<td><code>skip_render</code></td>
<td>不要渲染的路径。您可以使用<a href="https://github.com/isaacs/minimatch" target="_blank" rel="external">glob表达式</a>进行路径匹配</td>
</tr>
</tbody>
</table>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>new_post_name</code></td>
<td>新帖子的文件名格式</td>
<td><code>:title.md</code></td>
</tr>
<tr>
<td><code>default_layout</code></td>
<td>默认布局</td>
<td><code>post</code></td>
</tr>
<tr>
<td><code>titlecase</code></td>
<td>将标题转换为标题大小写？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>external_link</code></td>
<td>在新标签页中打开外部链接？</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>filename_case</code></td>
<td>将文件名转换为<code>1</code>小写; <code>2</code>大写</td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>render_drafts</code></td>
<td>显示草稿？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>post_asset_folder</code></td>
<td>启用<a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="external">资产文件夹</a>？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>relative_link</code></td>
<td>相对于根文件夹创建链接？</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>future</code></td>
<td>显示未来帖子？</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>代码块设置</td>
</tr>
</tbody>
</table>
<h3 id="类别和标签"><a href="#类别和标签" class="headerlink" title="类别和标签"></a>类别和标签</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>default_category</code></td>
<td>默认类别</td>
<td><code>uncategorized</code></td>
</tr>
<tr>
<td><code>category_map</code></td>
<td>类别lug。</td>
<td></td>
</tr>
<tr>
<td><code>tag_map</code></td>
<td>标签lug。</td>
</tr>
</tbody>
</table>
<h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期/时间格式"></a>日期/时间格式</h3><p>Hexo使用<a href="http://momentjs.com/" target="_blank" rel="external">Moment.js</a>处理日期。</p>
<table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>date_format</code></td>
<td>日期格式</td>
<td><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td><code>time_format</code></td>
<td>时间格式</td>
<td><code>HH:mm:ss</code></td>
</tr>
</tbody>
</table>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
<th>默认</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>per_page</code></td>
<td>单个页面上显示的帖子数量。<code>0</code>禁用分页</td>
<td><code>10</code></td>
</tr>
<tr>
<td><code>pagination_dir</code></td>
<td>分页目录</td>
<td><code>page</code></td>
</tr>
</tbody>
</table>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>theme</code></td>
<td>主题名称。<code>false</code>禁用主题</td>
</tr>
<tr>
<td><code>deploy</code></td>
<td>部署设置</td>
</tr>
</tbody>
</table>
<h3 id="使用备用配置"><a href="#使用备用配置" class="headerlink" title="使用备用配置"></a>使用备用配置</h3><p>可以通过将<code>--config</code>标志添加<code>hexo</code>到备用YAML或JSON配置文件的路径或多个YAML或JSON文件的逗号分隔列表（无空格）的路径来指定自定义配置文件路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">＃use&apos;custom.yml&apos;代替&apos;_config.yml&apos;</div><div class="line">$ hexo server --config custom.yml</div><div class="line"></div><div class="line">＃use&apos;custom.yml&apos;＆&apos;custom2.json&apos;，优先&apos;custom2.json&apos;</div><div class="line">$ hexo server --config custom.yml，custom2.json</div></pre></td></tr></table></figure>
<p>使用多个文件组合所有配置文件并将合并的设置保存到<code>_multiconfig.yml</code>。后面的值优先。它适用于任意数量的具有任意深度对象的JSON和YAML文件。请注意，<strong>列表中不允许有空格</strong>。</p>
<p>例如，在上面的例子<code>foo: bar</code>中<code>custom.yml</code>，如果是，但是<code>&quot;foo&quot;: &quot;dinosaur&quot;</code>在<code>custom2.json</code>，<code>_multiconfig.yml</code>将包含<code>foo: dinosaur</code>。**</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="在里面"><a href="#在里面" class="headerlink" title="在里面"></a>在里面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [文件夹]</div></pre></td></tr></table></figure>
<p>初始化网站。如果没有<code>folder</code>提供，Hexo将在当前目录中设置网站。</p>
<h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>创建新文章。如果没有<code>layout</code>提供，Hexo将使用<code>default_layout</code>from <a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">_config.yml</a>。如果<code>title</code>包含空格，请用引号将其括起来。</p>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo生成</div></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-d</code>， <code>--deploy</code></td>
<td>一代完成后部署</td>
</tr>
<tr>
<td><code>-w</code>， <code>--watch</code></td>
<td>观察文件更改</td>
</tr>
</tbody>
</table>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<p>发布草稿。</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>启动本地服务器。默认情况下，这是<code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-p</code>， <code>--port</code></td>
<td>覆盖默认端口</td>
</tr>
<tr>
<td><code>-s</code>， <code>--static</code></td>
<td>仅提供静态文件</td>
</tr>
<tr>
<td><code>-l</code>， <code>--log</code></td>
<td>启用记录器。覆盖记录器格式。</td>
</tr>
</tbody>
</table>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>部署您的网站。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-g</code>， <code>--generate</code></td>
<td>部署前生成</td>
</tr>
</tbody>
</table>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>
<p>渲染文件。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-o</code>， <code>--output</code></td>
<td>输出目的地</td>
</tr>
</tbody>
</table>
<h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo migrate &lt; type &gt;</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/docs/migration.html" target="_blank" rel="external">迁移</a>来自其他博客系统的内容。</p>
<h3 id="清洁"><a href="#清洁" class="headerlink" title="清洁"></a>清洁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo清洁</div></pre></td></tr></table></figure>
<p>清除缓存文件（<code>db.json</code>）和生成的文件（<code>public</code>）。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo list &lt; type &gt;</div></pre></td></tr></table></figure>
<p>列出所有路线。</p>
<h3 id="版"><a href="#版" class="headerlink" title="版"></a>版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div></pre></td></tr></table></figure>
<p>显示版本信息。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --safe</div></pre></td></tr></table></figure>
<p>禁用加载插件和脚本。如果您在安装新插件后遇到问题，请尝试此操作。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --debug</div></pre></td></tr></table></figure>
<p>将详细消息记录到终端和日志<code>debug.log</code>。如果您在Hexo遇到任何问题，请尝试此操作。如果您看到错误，请<a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="external">提出一个GitHub问题</a>。</p>
<h3 id="静音模式"><a href="#静音模式" class="headerlink" title="静音模式"></a>静音模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --silent</div></pre></td></tr></table></figure>
<p>静音输出到终端。</p>
<h3 id="自定义配置文件路径"><a href="#自定义配置文件路径" class="headerlink" title="自定义配置文件路径"></a>自定义配置文件路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --config custom.yml</div></pre></td></tr></table></figure>
<p>使用自定义配置文件（而不是<code>_config.yml</code>）。还接受JSON或YAML配置文件的逗号分隔列表（无空格），这些文件将文件合并为一个<code>_multiconfig.yml</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --config custom.yml，custom2.json</div></pre></td></tr></table></figure>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure>
<p>显示草稿帖子（存储在<code>source/_drafts</code>文件夹中）。</p>
<h3 id="自定义CWD"><a href="#自定义CWD" class="headerlink" title="自定义CWD"></a>自定义CWD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --cwd / path / to / cwd</div></pre></td></tr></table></figure>
<p>自定义当前工作目录的路径。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>到此已经使用Hexo创建了自己的个人博客。<a href="https://hexo.io/themes/" target="_blank" rel="external">Click this!</a>可以选择自己的喜欢的主题进行配置。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://wanghaonanlpc.github.io/2017/02/21/hello-world%202/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[VirtualAPK: 滴滴 Android 插件化的实践之路]]></title>
      <url>http://wanghaonanlpc.github.io/2016/12/27/VirtualAPK-%E6%BB%B4%E6%BB%B4-Android-%E6%8F%92%E4%BB%B6%E5%8C%96%E7%9A%84%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>在Android插件化技术日新月异的今天，开发并落地一款插件化框架到底是简单还是困难，这个问题不同人会有不同的答案。但是我相信，完成一个插件化框架的demo并不是多难的事，但是要开发一款完善的插件化框架却不是一件容易的事，尤其在国内，各大Rom厂商都对Android系统做了一定程度的定制，这进一步加剧了Android本身的碎片化问题。</p>
<p>滴滴出行在插件化上的探索起步较晚，由于滴滴业务发展较快，业务迭代占据了大量的时间，这使得我们在2016年才开始研究这方面的技术。经过半年的开发、测试、适配和线上验证，目前我们推出了一款比较完善的插件化框架：VirtualAPK。之所以现在推出来，是因为VirtualAPK在我们内部已经得到了很好的验证，我们在迭代过程中不断地做机型适配和细节特性的支持，目前已经达到一个非常稳定的状况，足以支撑滴滴部分乃至全部业务的动态发版需求。目前滴滴出行最新版本（v5.0.4）上面，小巴和接送机业务均为插件，大家可以去体验。</p>
<h1 id="插件化的现状"><a href="#插件化的现状" class="headerlink" title="插件化的现状"></a>插件化的现状</h1><hr>
<p>到目前为止，业界已经有很多优秀的开源项目，比如早期的基于静态代理思想的DynamicLoadApk，随后的基于占坑思想的DynamicApk、Small，还有360手机助手的DroidPlugin。他们都是优秀的开源项目，他们很大程度上促进了国内插件化技术的发展。</p>
<p>尽管有如此多的优秀框架存在，但是兼容性问题仍然是制约插件化发展的一个难题。一款插件化框架，也许可以在一款手机上完美运行，但是在数以千万的设备上却总是容易存在这样那样的兼容性问题。我相信上线过插件化的工程师应该深有体会。滴滴为什么还要自研一款新的插件化框架？因为我们需要一款功能完备的、兼容性优秀的、适用于滴滴业务的插件化框架，目前市面上的开源不能满足我们的需求，所以我们必须重新造轮子，于是VirtualAPK诞生了。</p>
<h1 id="VirtualAPK的诞生"><a href="#VirtualAPK的诞生" class="headerlink" title="VirtualAPK的诞生"></a>VirtualAPK的诞生</h1><hr>
<p>VirtualAPK是滴滴出行自研的一款优秀的插件化框架，主要有如下几个特性。</p>
<h3 id="功能完备"><a href="#功能完备" class="headerlink" title="功能完备"></a>功能完备</h3><ul>
<li><p>支持几乎所有的Android特性；</p>
</li>
<li><p>四大组件方面<br><strong>四大组件均不需要在宿主manifest中预注册，每个组件都有完整的生命周期。</strong> </p>
</li>
<li><ol>
<li>Activity：支持显示和隐式调用，支持Activity的theme和LaunchMode，支持透明主题；</li>
<li>Service：支持显示和隐式调用，支持Service的start、stop、bind和unbind，并支持跨进程bind插件中的Service；</li>
<li>Receiver：支持静态注册和动态注册的Receiver；</li>
<li>ContentProvider：支持provider的所有操作，包括CRUD和call方法等，支持跨进程访问插件中的Provider。</li>
</ol>
</li>
<li><p>自定义View：支持自定义View，支持自定义属性和style，支持动画；</p>
</li>
<li><p>PendingIntent：支持PendingIntent以及和其相关的Alarm、Notification和AppWidget；</p>
</li>
<li><p>支持插件Application以及插件manifest中的meta-data；</p>
</li>
<li><p>支持插件中的so。</p>
</li>
</ul>
<h3 id="优秀的兼容性"><a href="#优秀的兼容性" class="headerlink" title="优秀的兼容性"></a>优秀的兼容性</h3><ul>
<li>兼容市面上几乎所有的Android手机，这一点已经在滴滴出行客户端中得到验证；</li>
<li>资源方面适配小米、Vivo、Nubia等，对未知机型采用自适应适配方案；</li>
<li>极少的Binder Hook，目前仅仅hook了两个Binder：AMS和IContentProvider，Hook过程做了充分的兼容性适配；</li>
<li>插件运行逻辑和宿主隔离，确保框架的任何问题都不会影响宿主的正常运行。</li>
</ul>
<h3 id="入侵性极低"><a href="#入侵性极低" class="headerlink" title="入侵性极低"></a>入侵性极低</h3><ul>
<li>插件开发等同于原生开发，四大组件无需继承特定的基类；</li>
<li>精简的插件包，插件可以依赖宿主中的代码和资源，也可以不依赖；</li>
<li>插件的构建过程简单，通过Gradle插件来完成插件的构建，整个过程对开发者透明。</li>
</ul>
<h1 id="VirtualAPK的工作过程"><a href="#VirtualAPK的工作过程" class="headerlink" title="VirtualAPK的工作过程"></a>VirtualAPK的工作过程</h1><hr>
<p>VirtualAPK对插件没有额外的约束，原生的apk即可作为插件。插件工程编译生成apk后，即可通过宿主App加载，每个插件apk被加载后，都会在宿主中创建一个单独的LoadedPlugin对象。如下图所示，通过这些LoadedPlugin对象，VirtualAPK就可以管理插件并赋予插件新的意义，使其可以像手机中安装过的App一样运行。 </p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fda1lpr2e2j30hs0950tg.jpg" alt=""></p>
<h3 id="VirtualAPK的运行形态"><a href="#VirtualAPK的运行形态" class="headerlink" title="VirtualAPK的运行形态"></a>VirtualAPK的运行形态</h3><p>我们计划赋予VirtualAPK两种工作形态，耦合形态和独立形态。目前VirtualAPK对耦合形态已经有了很好的支持，我们接下来将计划支持独立形态。<br><strong>耦合形态</strong><br>插件对宿主可以有代码或者资源的依赖，也可以没有依赖。这种模式下，插件中的类不能和宿主重复，资源id也不能和宿主冲突。这是VirtualAPK的默认形态，也是适用于大多数业务的形态。<br><strong>独立形态</strong><br>插件对宿主没有代码或者资源的依赖。这种模式下，插件和宿主没有任何关系，所以插件中的类和资源均可以和宿主重复。这种形态的主要作用是用于运行一些第三方apk。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>第一步： 初始化插件引擎</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fda1m1lpb7j30hs03y3yr.jpg" alt=""></p>
<p>第二步：加载插件</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fda1m64k9yj30hs031q33.jpg" alt=""></p>
<p>我们对上述加载过程进行了一些封装，通过如下方式即可异步地去加载一个插件。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fda1mdawowj30hs07674z.jpg" alt=""></p>
<p><strong>当插件入口被调用后，插件的后续逻辑均不需要宿主干预，均走原生的Android流程。</strong><br>比如，在插件内部，如下代码将正确执行：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fda1mjo6tzj30hs09gab9.jpg" alt=""></p>
<h1 id="探究原理"><a href="#探究原理" class="headerlink" title="探究原理"></a>探究原理</h1><p>### </p>
<hr>
<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul>
<li><strong>合并宿主和插件的ClassLoader</strong><br>需要注意的是，插件中的类不可以和宿主重复</li>
<li><strong>合并插件和宿主的资源</strong><br>重设插件资源的packageId，将插件资源和宿主资源合并</li>
<li><strong>去除插件包对宿主的引用</strong><br>构建时通过Gradle插件去除插件对宿主的代码以及资源的引用</li>
</ul>
<h3 id="四大组件的实现原理"><a href="#四大组件的实现原理" class="headerlink" title="四大组件的实现原理"></a>四大组件的实现原理</h3><p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fda1mpm6gyj30ca0akq39.jpg" alt=""></p>
<ul>
<li><strong>Activity</strong><br>采用宿主manifest中占坑的方式来绕过系统校验，然后再加载真正的activity；</li>
<li><strong>Service</strong><br>动态代理AMS，拦截service相关的请求，将其中转给一个虚拟空间（Matrix）去处理，Matrix会接管系统的所有操作；</li>
<li><strong>Receiver</strong><br>将插件中静态注册的receiver重新注册一遍；</li>
<li><strong>ContentProvider</strong><br>动态代理IContentProvider，拦截provider相关的请求，将其中转给一个虚拟空间（Matrix）去处理，Matrix会接管系统的所有操作。</li>
</ul>
<p>如下是VirtualAPK的整体结构图。<br><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fda1muac67j30hs0afwf6.jpg" alt=""></p>
<h1 id="填坑之路"><a href="#填坑之路" class="headerlink" title="填坑之路"></a>填坑之路</h1><hr>
<p>在实践中我们遇到了很多很多的问题，比如机型适配、API版本适配、Binder hook的稳定性保证等问题，这里拿一个典型的资源适配问题来说明。</p>
<p>其实这是一个很无奈的问题，由于国内各大Rom厂商喜欢深度定制Android系统，所以就出现了这种适配问题。<br>正常情况下我们通过如下代码去创建插件的Resources对象：</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fda1mz3wwnj30hs01djrf.jpg" alt=""><br>然后在Vivo手机上，竟然出现了如下的类型转换错误，看起来是Vivo自己派生了Resources的子类。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fda1n39pxuj30hs09f768.jpg" alt=""><br>于是反编译了下Vivo的framework代码，果不其然，在如下代码中进行了类型转换，所以在加载插件资源的时候就报错了。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fda1n94nfvj30hs054mxr.jpg" alt=""><br>为了解决这个问题，我们分析了VivoResources的代码实现，然后在创建插件资源的时候，采用了如下的代码。</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fda1ndesp9j30hs04faao.jpg" alt=""></p>
<p>除了Vivo以外，有类似问题的还有MiUI、Nubia以及其它不知名的机型。而且在Vivo手机上，除了类型转换错误的问题，还有其他很坑的问题。</p>
<p>事实上我们还处理了很多其他的坑，这里无法一一说明，所以说如何保证插件化的稳定性是一件很有技术挑战的事情。</p>
<h1 id="一些暂时不支持的特性"><a href="#一些暂时不支持的特性" class="headerlink" title="一些暂时不支持的特性"></a>一些暂时不支持的特性</h1><hr>
<p>由于种种原因，VirtualAPK目前未能支持所有的Android的特性，如下是已知的几点。</p>
<ul>
<li>不支持Activity的部分属性，比如process、configChanges等；</li>
<li>暂不支持overridePendingTransition(int enterAnim, int exitAnim)这种形式的转场动画；</li>
<li>插件中弹通知，不能使用插件中的资源，比如图片。</li>
</ul>
<h1 id="开源计划"><a href="#开源计划" class="headerlink" title="开源计划"></a>开源计划</h1><hr>
<p>我们的目标是打造一款功能完备的插件化框架，使得各个业务线都能以插件的形式集成，从而实现Android App的热更新能力。</p>
<p>目前VirtualAPK还有一些特性需要进一步完善，待完善后，将会有开源计划。我们期望VirtualAPK开源后，可以让其他App能够无缝集成，无需考虑细节实现和兼容性问题即可轻松拥有热更新能力。</p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VirtualAPK：滴滴 Android 插件化的实践之路]]></title>
      <url>http://wanghaonanlpc.github.io/2016/12/27/VirtualAPK%EF%BC%9A%E6%BB%B4%E6%BB%B4-Android-%E6%8F%92%E4%BB%B6%E5%8C%96%E7%9A%84%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Android插件化技术日新月异的今天，开发并落地一款插件化框架到底是简单还是困难，这个问题不同人会有不同的答案。但是我相信，完成一个插件化框架的demo并不是多难的事，但是要开发一款完善的插件化框架却不是一件容易的事，尤其在国内，各大Rom厂商都对Android系统做了一定程度的定制，这进一步加剧了Android本身的碎片化问题。</p>
<p>滴滴出行在插件化上的探索起步较晚，由于滴滴业务发展较快，业务迭代占据了大量的时间，这使得我们在2016年才开始研究这方面的技术。经过半年的开发、测试、适配和线上验证，目前我们推出了一款比较完善的插件化框架：VirtualAPK。之所以现在推出来，是因为VirtualAPK在我们内部已经得到了很好的验证，我们在迭代过程中不断地做机型适配和细节特性的支持，目前已经达到一个非常稳定的状况，足以支撑滴滴部分乃至全部业务的动态发版需求。目前滴滴出行最新版本（v5.0.4）上面，小巴和接送机业务均为插件，大家可以去体验。</p>
<h1 id="插件化的现状"><a href="#插件化的现状" class="headerlink" title="插件化的现状"></a>插件化的现状</h1><p>到目前为止，业界已经有很多优秀的开源项目，比如早期的基于静态代理思想的DynamicLoadApk，随后的基于占坑思想的DynamicApk、Small，还有360手机助手的DroidPlugin。他们都是优秀的开源项目，他们很大程度上促进了国内插件化技术的发展。</p>
<p>尽管有如此多的优秀框架存在，但是兼容性问题仍然是制约插件化发展的一个难题。一款插件化框架，也许可以在一款手机上完美运行，但是在数以千万的设备上却总是容易存在这样那样的兼容性问题。我相信上线过插件化的工程师应该深有体会。滴滴为什么还要自研一款新的插件化框架？因为我们需要一款功能完备的、兼容性优秀的、适用于滴滴业务的插件化框架，目前市面上的开源不能满足我们的需求，所以我们必须重新造轮子，于是VirtualAPK诞生了。</p>
<h1 id="VirtualAPK的诞生"><a href="#VirtualAPK的诞生" class="headerlink" title="VirtualAPK的诞生"></a>VirtualAPK的诞生</h1><p>VirtualAPK是滴滴出行自研的一款优秀的插件化框架，主要有如下几个特性。</p>
<h3 id="功能完备"><a href="#功能完备" class="headerlink" title="功能完备"></a>功能完备</h3><ul>
<li><p>支持几乎所有的Android特性；</p>
</li>
<li><p>四大组件方面<br><strong>四大组件均不需要在宿主manifest中预注册，每个组件都有完整的生命周期。</strong> </p>
</li>
<li><ol>
<li>Activity：支持显示和隐式调用，支持Activity的theme和LaunchMode，支持透明主题；</li>
<li>Service：支持显示和隐式调用，支持Service的start、stop、bind和unbind，并支持跨进程bind插件中的Service；</li>
<li>Receiver：支持静态注册和动态注册的Receiver；</li>
<li>ContentProvider：支持provider的所有操作，包括CRUD和call方法等，支持跨进程访问插件中的Provider。</li>
</ol>
</li>
<li><p>自定义View：支持自定义View，支持自定义属性和style，支持动画；</p>
</li>
<li><p>PendingIntent：支持PendingIntent以及和其相关的Alarm、Notification和AppWidget；</p>
</li>
<li><p>支持插件Application以及插件manifest中的meta-data；</p>
</li>
<li><p>支持插件中的so。</p>
</li>
</ul>
<h3 id="优秀的兼容性"><a href="#优秀的兼容性" class="headerlink" title="优秀的兼容性"></a>优秀的兼容性</h3><ul>
<li>兼容市面上几乎所有的Android手机，这一点已经在滴滴出行客户端中得到验证；</li>
<li>资源方面适配小米、Vivo、Nubia等，对未知机型采用自适应适配方案；</li>
<li>极少的Binder Hook，目前仅仅hook了两个Binder：AMS和IContentProvider，Hook过程做了充分的兼容性适配；</li>
<li>插件运行逻辑和宿主隔离，确保框架的任何问题都不会影响宿主的正常运行。</li>
</ul>
<h3 id="入侵性极低"><a href="#入侵性极低" class="headerlink" title="入侵性极低"></a>入侵性极低</h3><ul>
<li>插件开发等同于原生开发，四大组件无需继承特定的基类；</li>
<li>精简的插件包，插件可以依赖宿主中的代码和资源，也可以不依赖；</li>
<li>插件的构建过程简单，通过Gradle插件来完成插件的构建，整个过程对开发者透明。</li>
</ul>
<h1 id="VirtualAPK的工作过程"><a href="#VirtualAPK的工作过程" class="headerlink" title="VirtualAPK的工作过程"></a>VirtualAPK的工作过程</h1><hr>
<p>VirtualAPK对插件没有额外的约束，原生的apk即可作为插件。插件工程编译生成apk后，即可通过宿主App加载，每个插件apk被加载后，都会在宿主中创建一个单独的LoadedPlugin对象。如下图所示，通过这些LoadedPlugin对象，VirtualAPK就可以管理插件并赋予插件新的意义，使其可以像手机中安装过的App一样运行。 </p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd8g0n3x7ej30hs0950tg.jpg" alt=""></p>
<h3 id="VirtualAPK的运行形态"><a href="#VirtualAPK的运行形态" class="headerlink" title="VirtualAPK的运行形态"></a>VirtualAPK的运行形态</h3><p>我们计划赋予VirtualAPK两种工作形态，耦合形态和独立形态。目前VirtualAPK对耦合形态已经有了很好的支持，我们接下来将计划支持独立形态。<br><strong>耦合形态</strong><br>插件对宿主可以有代码或者资源的依赖，也可以没有依赖。这种模式下，插件中的类不能和宿主重复，资源id也不能和宿主冲突。这是VirtualAPK的默认形态，也是适用于大多数业务的形态。<br><strong>独立形态</strong><br>插件对宿主没有代码或者资源的依赖。这种模式下，插件和宿主没有任何关系，所以插件中的类和资源均可以和宿主重复。这种形态的主要作用是用于运行一些第三方apk。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>第一步： 初始化插件引擎</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd8g0uu0kjj30hs03y3yr.jpg" alt=""></p>
<p>第二步：加载插件</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fd8g13o04mj30hs031q33.jpg" alt=""></p>
<p>我们对上述加载过程进行了一些封装，通过如下方式即可异步地去加载一个插件。</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd8g191wqoj30hs07674z.jpg" alt=""></p>
<p><strong>当插件入口被调用后，插件的后续逻辑均不需要宿主干预，均走原生的Android流程。</strong><br>比如，在插件内部，如下代码将正确执行：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd8g1jsot3j30hs09gab9.jpg" alt=""></p>
<h1 id="探究原理"><a href="#探究原理" class="headerlink" title="探究原理"></a>探究原理</h1><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul>
<li><strong>合并宿主和插件的ClassLoader</strong><br>需要注意的是，插件中的类不可以和宿主重复</li>
<li><strong>合并插件和宿主的资源</strong><br>重设插件资源的packageId，将插件资源和宿主资源合并</li>
<li><strong>去除插件包对宿主的引用</strong><br>构建时通过Gradle插件去除插件对宿主的代码以及资源的引用</li>
</ul>
<h3 id="四大组件的实现原理"><a href="#四大组件的实现原理" class="headerlink" title="四大组件的实现原理"></a>四大组件的实现原理</h3><p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd8g1y57iaj30ca0akq39.jpg" alt=""></p>
<ul>
<li><strong>Activity</strong><br>采用宿主manifest中占坑的方式来绕过系统校验，然后再加载真正的activity；</li>
<li><strong>Service</strong><br>动态代理AMS，拦截service相关的请求，将其中转给一个虚拟空间（Matrix）去处理，Matrix会接管系统的所有操作；</li>
<li><strong>Receiver</strong><br>将插件中静态注册的receiver重新注册一遍；</li>
<li><strong>ContentProvider</strong><br>动态代理IContentProvider，拦截provider相关的请求，将其中转给一个虚拟空间（Matrix）去处理，Matrix会接管系统的所有操作。</li>
</ul>
<p>如下是VirtualAPK的整体结构图。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fd8g2ahan3j30hs0afwf6.jpg" alt=""></p>
<h1 id="填坑之路"><a href="#填坑之路" class="headerlink" title="填坑之路"></a>填坑之路</h1><p>在实践中我们遇到了很多很多的问题，比如机型适配、API版本适配、Binder hook的稳定性保证等问题，这里拿一个典型的资源适配问题来说明。</p>
<p>其实这是一个很无奈的问题，由于国内各大Rom厂商喜欢深度定制Android系统，所以就出现了这种适配问题。<br>正常情况下我们通过如下代码去创建插件的Resources对象：</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fd8g2p2atzj30hs01djrf.jpg" alt=""><br>然后在Vivo手机上，竟然出现了如下的类型转换错误，看起来是Vivo自己派生了Resources的子类。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd8g2wd9qqj30hs09f768.jpg" alt=""><br>于是反编译了下Vivo的framework代码，果不其然，在如下代码中进行了类型转换，所以在加载插件资源的时候就报错了。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fd8g35jicrj30hs054mxr.jpg" alt=""><br>为了解决这个问题，我们分析了VivoResources的代码实现，然后在创建插件资源的时候，采用了如下的代码。</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd8g3b1tcdj30hs04faao.jpg" alt=""></p>
<p>除了Vivo以外，有类似问题的还有MiUI、Nubia以及其它不知名的机型。而且在Vivo手机上，除了类型转换错误的问题，还有其他很坑的问题。</p>
<p>事实上我们还处理了很多其他的坑，这里无法一一说明，所以说如何保证插件化的稳定性是一件很有技术挑战的事情。</p>
<h1 id="一些暂时不支持的特性"><a href="#一些暂时不支持的特性" class="headerlink" title="一些暂时不支持的特性"></a>一些暂时不支持的特性</h1><hr>
<p>由于种种原因，VirtualAPK目前未能支持所有的Android的特性，如下是已知的几点。</p>
<ul>
<li>不支持Activity的部分属性，比如process、configChanges等；</li>
<li>暂不支持overridePendingTransition(int enterAnim, int exitAnim)这种形式的转场动画；</li>
<li>插件中弹通知，不能使用插件中的资源，比如图片。</li>
</ul>
<h1 id="开源计划"><a href="#开源计划" class="headerlink" title="开源计划"></a>开源计划</h1><hr>
<p>我们的目标是打造一款功能完备的插件化框架，使得各个业务线都能以插件的形式集成，从而实现Android App的热更新能力。</p>
<p>目前VirtualAPK还有一些特性需要进一步完善，待完善后，将会有开源计划。我们期望VirtualAPK开源后，可以让其他App能够无缝集成，无需考虑细节实现和兼容性问题即可轻松拥有热更新能力。</p>
<p>请关注滴滴 App 开发技术微信公众号 <strong>DDApp</strong>，我们会在上面发布 VirtualAPK的最新进展，也将会把滴滴 iOS 和 Android 开发的干货技术文章分享给大家：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fd8g3iq999j30by0by0tk.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 安卓 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[支持NFC的手机总结]]></title>
      <url>http://wanghaonanlpc.github.io/2016/05/24/%E6%94%AF%E6%8C%81NFC%E7%9A%84%E6%89%8B%E6%9C%BA%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>截止2016年5月</p>
<h5 id="三星"><a href="#三星" class="headerlink" title="三星"></a>三星</h5><p>Galaxy S7 Edge、Galaxy S7、Galaxy S6 edge+、Galaxy S6 edge、Galaxy S6、Galaxy A9及高配版、Galaxy A8、Galaxy A7(2016)、Galaxy A5(2016)、GalaxyJ7(2016)、Galaxy J7、Galaxy J5(2016)、Galaxy J5、Galaxy J3 Pro、Galaxy J3、Galaxy Note5、Galaxy Note3 N9006、Galaxy Note3 N9008V、Galaxy Note3 N9008S（UICC,eSE）、Galaxy C5、Galaxy GRAND Prime、Galaxy MEGA2、Galaxy ALPHA G8508S、Galaxy CORE Lite 4G、Galaxy CORE Advance、W2016、W2015、领世旗舰III G9198、</p>
<h5 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h5><p>小米5（这些统统都没有：小米Max、小米4S、小米4C、红米Note3、红米3S、红米3、更早的机型不想提了。）</p>
<h5 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h5><p>荣耀6高配版、荣耀6plus双4G版、荣耀V8全网通版、Mate7、Mate8、Mate 9、MateS</p>
<h5 id="魅族"><a href="#魅族" class="headerlink" title="魅族"></a>魅族</h5><p>魅族PRO 5（NXP PN65T NFC 芯片）</p>
<h5 id="OPPO"><a href="#OPPO" class="headerlink" title="OPPO"></a>OPPO</h5><p>OPPO Find7、OPPO Find5、OPPO N3、OPPO N1、OPPO A37、OPPO 3007、OPPO 3005</p>
<h5 id="vivo"><a href="#vivo" class="headerlink" title="vivo"></a>vivo</h5><p>vivo Xplay 3S、vivo Xplay、vivo X5Pro电信版</p>
<h5 id="努比亚"><a href="#努比亚" class="headerlink" title="努比亚"></a>努比亚</h5><p>nubia Z9、nubia Z9 Max、nubia Z7 Max、nubia Z5 Mini、nubia Z5S LET版</p>
<h5 id="酷派"><a href="#酷派" class="headerlink" title="酷派"></a>酷派</h5><p>酷派铂顿、锋尚3、锋尚2电信版、锋尚移动版、锋尚电信版、锋尚Air移动版、锋尚Air电信版、锋尚pro电信版、锋尚MAX尊享版、锋尚MAX极速版</p>
<h5 id="索尼"><a href="#索尼" class="headerlink" title="索尼"></a>索尼</h5><p>索尼Xperia Z5 双卡双待版、索尼Xperia Z5 尊享版、索尼Xperia Z3+Dual双卡双待版、索尼Xperia Z1、索尼MT27i、索尼LT26i</p>
<h5 id="HTC"><a href="#HTC" class="headerlink" title="HTC"></a>HTC</h5><p>HTC 10 lifestyle、HTC 10、New HTC One、HTC One E9+、HTC One M9、HTC One (M8)、HTC Desire 626</p>
<h5 id="锤子"><a href="#锤子" class="headerlink" title="锤子"></a>锤子</h5><p>Smartisan T2、Smartisan T1、坚果</p>
<h5 id="摩托罗拉"><a href="#摩托罗拉" class="headerlink" title="摩托罗拉"></a>摩托罗拉</h5><p>Moto x极、Moto X Style</p>
<h5 id="中兴"><a href="#中兴" class="headerlink" title="中兴"></a>中兴</h5><p>中兴天机 7、AXON天机</p>
<h5 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h5><p>Nexus系列</p>
<h5 id="LG"><a href="#LG" class="headerlink" title="LG"></a>LG</h5><p>LG G5、LG G4、LG G3 Beat、LG G3、LG G2、LG V10、LG AKA</p>
<h5 id="一加"><a href="#一加" class="headerlink" title="一加"></a>一加</h5><p>一加手机3、一加手机1</p>
<h5 id="金立"><a href="#金立" class="headerlink" title="金立"></a>金立</h5><p>风华3（GN709L）</p>
<h5 id="联想"><a href="#联想" class="headerlink" title="联想"></a>联想</h5><p>乐檬X3</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit 2.0：Android上最好的HTTP客户端库的最大更新]]></title>
      <url>http://wanghaonanlpc.github.io/2016/03/01/Retrofit-2-0%EF%BC%9AAndroid%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84HTTP%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BA%93%E7%9A%84%E6%9C%80%E5%A4%A7%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>Retrofit是Android最受欢迎的HTTP客户端库之一，由于其简单性和与其他应用程序相比的出色性能。</p>
<p>无论如何，它的弱点是没有任何直接的方法取消正在进行的交易Retrofit 1.x. 如果你想这样做，你必须在Thread上调用它，并手动杀死这是很难管理。</p>
<p>广场在几年前承诺，这个功能将在Retrofit 2.0上可用，但几年过去了，仍然没有更新的消息。</p>
<p>直到上周，Retrofit 2.0才刚刚通过了它的Release Candidate阶段到Beta 1，并已向所有人公开发布。在尝试之后，我必须说，我对它的新模式及其新功能印象深刻。好的方法有很多变化。我将在本文中描述这些。让我们开始吧 ！</p>
<h2 id="相同旧包与新版本"><a href="#相同旧包与新版本" class="headerlink" title="相同旧包与新版本"></a>相同旧包与新版本</h2><p>如果要将Retrofit 2.0导入到项目中，请将此行添加到您的<code>build.gradle</code>in <code>dependencies</code> 部分。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.0.0-beta4&apos;</div></pre></td></tr></table></figure>
<p>同步您的gradle文件，您现在可以使用Retrofit 2.0 =）</p>
<p>正如你所看到的，Retrofit 2的包名与以前的版本不一样。现在  <code>com.squareup.retrofit2</code>。</p>
<h2 id="新服务声明。不再有同步和异步。"><a href="#新服务声明。不再有同步和异步。" class="headerlink" title="新服务声明。不再有同步和异步。"></a>新服务声明。不再有同步和异步。</h2><p>关于Retrofit 1.9中的服务接口声明，如果要声明一个同步函数，则必须声明如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/* Synchronous in Retrofit 1.9 */</div><div class="line"></div><div class="line">public interface APIService &#123;</div><div class="line"></div><div class="line">    @POST(&quot;/list&quot;)</div><div class="line">    Repo loadRepo();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你必须声明一个异步的，像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/* Asynchronous in Retrofit 1.9 */</div><div class="line"></div><div class="line">public interface APIService &#123;</div><div class="line"></div><div class="line">    @POST(&quot;/list&quot;)</div><div class="line">    void loadRepo(Callback&lt;Repo&gt; cb);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但在<strong>Retrofit 2.0上</strong>，它更简单，因为你可以只声明一个模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import retrofit.Call;</div><div class="line"></div><div class="line">/* Retrofit 2.0 */</div><div class="line"></div><div class="line">public interface APIService &#123;</div><div class="line"></div><div class="line">    @POST(&quot;/list&quot;)</div><div class="line">    Call&lt;Repo&gt; loadRepo();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用已创建服务的方式也会更改为与<a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a>相同的模式。要调用是作为同步请求，只是调用  <code>execute</code> 或调用  <code>enqueue</code> 来做异步请求。</p>
<p><strong>同步请求</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Synchronous Call in Retrofit 2.0</div><div class="line"></div><div class="line">Call&lt;Repo&gt; call = service.loadRepo();</div><div class="line">Repo repo = call.execute();</div></pre></td></tr></table></figure>
<p>上面的源代码将阻塞线程，所以你<em>不能</em>在Android上的主线程调用它，否则你会面对<code>NetworkOnMainThreadException</code>。如果你想调用<code>execute</code>方法，你必须在后台线程上做。</p>
<p><strong>异步请求</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// Asynchronous Call in Retrofit 2.0</div><div class="line"></div><div class="line">Call&lt;Repo&gt; call = service.loadRepo();</div><div class="line">call.enqueue(new Callback&lt;Repo&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onResponse(Response&lt;Repo&gt; response) &#123;</div><div class="line">        // Get result Repo from response.body()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onFailure(Throwable t) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码将在后台线程中发出一个请求，并将一个结果作为一个对象，你可以从响应中提取<code>response.body()</code>方法。请注意，这些调用方法：  <code>onResponse</code>并将<code>onFailure</code> 在<strong>主线程中</strong>调用。</p>
<p>我建议你使用<code>enqueue</code>。它适合Android操作系统的行为最好。</p>
<h2 id="持续交易取消"><a href="#持续交易取消" class="headerlink" title="持续交易取消"></a>持续交易取消</h2><p>服务模式改变的背后的原因  <code>Call</code> 是使得正在进行的事务能够被取消。要这样做，只是简单地调用 <code>call.cancel()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call.cancel();</div></pre></td></tr></table></figure>
<p>该交易将在不久后被取消。容易，是吗？= D</p>
<h2 id="新服务创建。转换器现在被排除在Retrofit之外。"><a href="#新服务创建。转换器现在被排除在Retrofit之外。" class="headerlink" title="新服务创建。转换器现在被排除在Retrofit之外。"></a>新服务创建。转换器现在被排除在Retrofit之外。</h2><p>在Retrofit 1.9中，GsonConverter包含在包中，并且在<code>RestAdapter</code>创建时自动启动。因此，来自服务器的json结果将被自动解析为定义的数据访问对象（DAO）。</p>
<p>但在Retrofit 2.0中，Converter <strong>*不再*</strong>包含在包中了。你需要自己插入一个Converter或Retrofit将只能接受String结果。因此，Retrofit 2.0不再依赖于Gson了。</p>
<p>如果你想接受json结果并将其解析成DAO，你必须召唤Gson Converter作为一个单独的依赖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit:converter-gson:2.0.0-beta2&apos;</div></pre></td></tr></table></figure>
<p>并插入通过  <code>addConverterFactory</code>。请注意，<code>RestAdapter</code>现在也被重命名为<code>Retrofit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .baseUrl(&quot;http://api.nuuneoi.com/base/&quot;)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build();</div><div class="line"></div><div class="line">service = retrofit.create(APIService.class);</div></pre></td></tr></table></figure>
<p>这里是Square提供的官方转换器模块的列表。选择一个最适合您的要求。</p>
<p><strong>Gson：</strong> com.squareup.retrofit：converter-gson<br><strong>Jackson：</strong> com.squareup.retrofit：converter-jackson<br><strong>Moshi：</strong> com.squareup.retrofit：converter-moshi<br><strong>Protobuf：</strong> com.squareup.retrofit：converter-protobuf<br><strong>Wire：</strong> com.squareup。 retrofit：converter-wire<br><strong>简单的XML：</strong> com.squareup.retrofit：converter-simplexml</p>
<p>您还可以通过实现Converter.Factory接口自己创建自定义<a href="https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java" target="_blank" rel="external">转换</a>器。</p>
<p>我支持这种新模式。它使Retrofit更清楚它实际上做了什么。</p>
<h2 id="自定义Gson对象"><a href="#自定义Gson对象" class="headerlink" title="自定义Gson对象"></a>自定义Gson对象</h2><p>如果你需要调整json中的某些格式，例如，日期格式。你可以通过创建一个Gson对象并传递给它 <code>GsonConverterFactory.create()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Gson gson = new GsonBuilder()</div><div class="line">        .setDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZ&quot;)</div><div class="line">        .create();</div><div class="line"></div><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .baseUrl(&quot;http://api.nuuneoi.com/base/&quot;)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create(gson))</div><div class="line">        .build();</div><div class="line"></div><div class="line">service = retrofit.create(APIService.class);</div></pre></td></tr></table></figure>
<p>完成。</p>
<h2 id="新的URL解析概念。与相同"><a href="#新的URL解析概念。与相同" class="headerlink" title="新的URL解析概念。与相同"></a>新的URL解析概念。与<a href="">相同</a></h2><p>Retrofit 2.0带有新的URL解析概念。基本URL和@Url不只是简单地组合在一起，而是以相同的方式解决相同的方式  <code>[</code>](…) 。请查看下面的示例以了解澄清。</p>
<p><img src="https://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice1.png" alt="img"></p>
<p><img src="https://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice2.png" alt="img"></p>
<p><img src="https://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice3.png" alt="img"></p>
<p>这是我对Retrofit 2.0中的新URL声明模式的建议：</p>
<ul>
<li><p><strong>基本URL</strong>：始终以/</p>
</li>
<li><p><strong>@Url</strong>：不要  开始/</p>
</li>
</ul>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public interface APIService &#123;</div><div class="line"></div><div class="line">    @POST(&quot;user/list&quot;)</div><div class="line">    Call&lt;Users&gt; loadUsers();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public void doSomething() &#123;</div><div class="line">    Retrofit retrofit = new Retrofit.Builder()</div><div class="line">            .baseUrl(&quot;http://api.nuuneoi.com/base/&quot;)</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .build();</div><div class="line"></div><div class="line">    APIService service = retrofit.create(APIService.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>loadUsers</code>从上面的代码将从<strong><a href="http://api.nuuneoi.com/base/user/list" target="_blank" rel="external">http://api.nuuneoi.com/base/user/list</a></strong>获取数据 <em>**</em></p>
<p>此外，我们还可以<code>@Url</code> 在Retrofit 2.0 中声明完整的网址  ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface APIService &#123;</div><div class="line"></div><div class="line">    @POST(&quot;http://api.nuuneoi.com/special/user/list&quot;)</div><div class="line">    Call&lt;Users&gt; loadSpecialUsers();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这种情况，将忽略基本URL。</p>
<p>您将看到URL解析有重大更改。它与以前的版本完全不同。如果你想将你的代码移动到Retrofit 2.0，不要忘记修复这些URL部分代码。</p>
<h2 id="OkHttp现在是必需的"><a href="#OkHttp现在是必需的" class="headerlink" title="OkHttp现在是必需的"></a>OkHttp现在是必需的</h2><p>OkHttp在Retrofit 1.9中设置为可选。如果你想让Retrofit使用OkHttp作为HTTP连接接口，你必须自己手动包含okhttp  作为依赖。</p>
<p>但是在Retrofit 2.0中，OkHttp现在是必需的，并且被自动设置为依赖。下面的代码从Retrofit 2.0的pom文件中捕获。你不需要做任何事情。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">  &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;</div><div class="line">  &lt;/dependency&gt;</div><div class="line"></div><div class="line">  ...</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<p>OkHttp自动用作Retrofit 2.0中的HTTP接口，目的是启用OkHttp的  <code>Call</code> 模式，如上所述。</p>
<h2 id="onResponse仍然被称为eventhough有响应的问题"><a href="#onResponse仍然被称为eventhough有响应的问题" class="headerlink" title="onResponse仍然被称为eventhough有响应的问题"></a>onResponse仍然被称为eventhough有响应的问题</h2><p>在Retrofit 1.9中，如果获取的响应无法解析到定义的对象中，<code>failure</code>将被调用。但是在Retrofit 2.0中，无论响应是否能够解析，<code>onResponse</code>都将被调用。但是在结果不能解析到对象的情况下，<code>response.body()</code>将返回为null。不要忘记处理的情况。</p>
<p>如果响应有任何问题，例如404未找到。<code>onResponse</code>也将被调用。您可以从中检索错误正文<code>response.errorBody().string()</code>。</p>
<p><img src="https://inthecheesefactory.com/uploads/source/blog/retrofit2/response.jpg" alt="img"></p>
<p>响应/故障逻辑与Retrofit 1.9完全不同。如果您决定移动到Retrofit 2.0，请小心处理所有情况。</p>
<h2 id="缺少INTERNET权限导致SecurityException抛出"><a href="#缺少INTERNET权限导致SecurityException抛出" class="headerlink" title="缺少INTERNET权限导致SecurityException抛出"></a>缺少INTERNET权限导致SecurityException抛出</h2><p>在Retrofit 1.9中，如果您忘记向您的<code>AndroidManifest.xml</code>文件中添加INTERNET权限。异步请求将立即落入<code>failure</code>具有<strong>PERMISSION DENIED</strong>  错误消息的回调方法中  。没有异常抛出。</p>
<p>但在Retrofit 2.0中，当你调用  <code>call.enqueue</code>或  <code>call.execute</code>，  <code>SecurityException</code> 将立即抛出，如果你不处理的情况下try-catch可能会导致崩溃。</p>
<p><img src="https://inthecheesefactory.com/uploads/source/blog/retrofit2/sec.png" alt="img"></p>
<p>当你手动调用时，行为就像是一样  <code>HttpURLConnection</code>。无论如何这个问题不是一个大问题，因为当INTERNET权限被添加到AndroidManifest.xml中，没有什么可以关注了。</p>
<h2 id="使用OkHttp中的拦截器"><a href="#使用OkHttp中的拦截器" class="headerlink" title="使用OkHttp中的拦截器"></a>使用OkHttp中的拦截器</h2><p>在Retrofit 1.9你可以使用  <code>RequestInterceptor</code> 拦截一个请求，但它已经从Retrofit 2.0删除，因为HTTP连接层已经移动到OkHttp。</p>
<p>因此，我们现在必须<code>Interceptor</code> 从  <strong>OkHttp</strong>切换到   。首先，你必须创建一个<code>OkHttpClient</code>具有拦截器的对象，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = new OkHttpClient();</div><div class="line">client.interceptors().add(new Interceptor() &#123;</div><div class="line">    @Override</div><div class="line">    public Response intercept(Chain chain) throws IOException &#123;</div><div class="line">        Response response = chain.proceed(chain.request());</div><div class="line"></div><div class="line">        // Do anything with response here</div><div class="line"></div><div class="line">        return response;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>并把创建的传递给<code>client</code>Retrofit的Builder链。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .baseUrl(&quot;http://api.nuuneoi.com/base/&quot;)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .client(client)</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>就这样。</p>
<p>要了解OkHttp拦截器可以做什么的更多信息，请浏览到  <a href="https://github.com/square/okhttp/wiki/Interceptors" target="_blank" rel="external">OkHttp拦截器</a>。</p>
<h2 id="证书钉住"><a href="#证书钉住" class="headerlink" title="证书钉住"></a>证书钉住</h2><p>与拦截器相同，如果要对连接应用证书固定，则需要创建OkHttp客户端实例。这里是示例代码片段。首先，使用证书固定信息定义一个OkHttp客户端实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = new OkHttpClient.Builder()</div><div class="line">        .certificatePinner(new CertificatePinner.Builder()</div><div class="line">                .add(&quot;publicobject.com&quot;, &quot;sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=&quot;)</div><div class="line">                .add(&quot;publicobject.com&quot;, &quot;sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=&quot;)</div><div class="line">                .add(&quot;publicobject.com&quot;, &quot;sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=&quot;)</div><div class="line">                .add(&quot;publicobject.com&quot;, &quot;sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=&quot;)</div><div class="line">                .build())</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>分配在Retrofit构建器链中创建的OkHttp客户端。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .baseUrl(&quot;http://api.nuuneoi.com/base/&quot;)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .client(client)</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>有关sha1哈希证书固定的更多信息… Google会帮助很多，只是简单的搜索它如何实现那条数据。</p>
<h2 id="RxJava与CallAdapter集成"><a href="#RxJava与CallAdapter集成" class="headerlink" title="RxJava与CallAdapter集成"></a>RxJava与CallAdapter集成</h2><p>除了声明与<code>Call</code> 模式的接口，我们也可以声明我们自己的类型，例如，  <code>MyCall</code>。机械师被称为“ <code>CallAdapter</code>”，它在Retrofit 2.0上可用</p>
<p>Retrofit团队提供了一些即用的CallAdapter模块。最流行的模块之一可能是CallAdapter为<strong>RxJava</strong>，将返回为<code>Observable</code>。要使用它，必须包括两个模块作为项目的依赖项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit:adapter-rxjava:2.0.0-beta2&apos;</div><div class="line">compile &apos;io.reactivex:rxandroid:1.0.1&apos;</div></pre></td></tr></table></figure>
<p>同步Gradle并<code>addCallAdapterFactory</code> 在Retrofit Builder链中添加  如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .baseUrl(&quot;http://api.nuuneoi.com/base/&quot;)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>您的服务界面现在可以返回为  <code>Observable</code>！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface APIService &#123;</div><div class="line"></div><div class="line">    @POST(&quot;list&quot;)</div><div class="line">    Call&lt;DessertItemCollectionDao&gt; loadDessertList();</div><div class="line"></div><div class="line">    @POST(&quot;list&quot;)</div><div class="line">    Observable&lt;DessertItemCollectionDao&gt; loadDessertListRx();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以使用完全相同的RxJava方式。另外，如果你想让代码里面的订阅部分调用主线程，<code>observeOn(AndroidSchedulers.mainThread())</code> 需要添加到链中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Observable&lt;DessertItemCollectionDao&gt; observable = service.loadDessertListRx();</div><div class="line"></div><div class="line">observable.subscribeOn(Schedulers.io())</div><div class="line">    .observeOn(AndroidSchedulers.mainThread())</div><div class="line">    .unsubscribeOn(Schedulers.io())</div><div class="line">    .subscribe(new Subscriber&lt;DessertItemCollectionDao&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public void onCompleted() &#123;</div><div class="line">            Toast.makeText(getApplicationContext(),</div><div class="line">                    &quot;Completed&quot;,</div><div class="line">                    Toast.LENGTH_SHORT)</div><div class="line">                .show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onError(Throwable e) &#123;</div><div class="line">            Toast.makeText(getApplicationContext(),</div><div class="line">                    e.getMessage(),</div><div class="line">                    Toast.LENGTH_SHORT)</div><div class="line">                .show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onNext(DessertItemCollectionDao dessertItemCollectionDao) &#123;</div><div class="line">            Toast.makeText(getApplicationContext(),</div><div class="line">                    dessertItemCollectionDao.getData().get(0).getName(),</div><div class="line">                    Toast.LENGTH_SHORT)</div><div class="line">                .show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>完成！我相信RxJava风扇非常满意这个变化= D</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>还有一些其他更改，您可以检查官方<a href="https://github.com/square/retrofit/blob/master/CHANGELOG.md" target="_blank" rel="external">更改日志</a>  的更多详细信息。无论如何，我相信我已经涵盖了本文中的主要问题。</p>
<p>你可能很好奇，是时候搬到Retrofit 2.0了吗？因为它仍然处于beta阶段，所以你可能想留在1.9首先除了你是一个早期采纳者像我一样，Retrofit 2.0工作相当伟大，没有发现任何错误，基于我自己的实验。</p>
<p>请注意，Retrofit 1.9官方文档已从Square github网站删除。我建议你现在开始学习Retrofit 2.0，并考虑在不久的将来迁移到最新版本。= D</p>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用github pages服务搭建博客]]></title>
      <url>http://wanghaonanlpc.github.io/2016/02/21/%E4%BD%BF%E7%94%A8github%20pages%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github pages服务搭建博客的好处有：</p>
<ol>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
</ol>
<a id="more"></a>
<ol>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
<li>等等；</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> hello </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to Hux Blog]]></title>
      <url>http://wanghaonanlpc.github.io/2014/01/29/hello-2015/</url>
      <content type="html"><![CDATA[<blockquote>
<p>“Yeah It’s on. ”</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hux 的 Blog 就这么开通了。</p>
<p><a href="#build">跳过废话，直接看技术实现 </a></p>
<p>2015 年，Hux 总算有个地方可以好好写点东西了。</p>
<p>作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。</p>
<p>在玩了一段时间知乎之后，答题的快感又激起了我开博客的冲动。之前的<a href="http://huangxuan.me/portfolio" target="_blank" rel="external">个人网站</a>是作品集形式的（现在集成进来了），并不适合用来写博文，一不做二不休，花一天搞一个吧！</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><p id="build"></p></h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>接下来说说搭建这个博客的技术细节。  </p>
<p>正好之前就有关注过 <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> + <a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> 快速 Building Blog 的技术方案，非常轻松时尚。</p>
<p>其优点非常明显：</p>
<ul>
<li><strong>Markdown</strong> 带来的优雅写作体验</li>
<li>非常熟悉的 Git workflow ，<strong>Git Commit 即 Blog Post</strong></li>
<li>利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机<ul>
<li>如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了</li>
</ul>
</li>
<li>Jekyll 的自定制非常容易，基本就是个模版引擎</li>
</ul>
<p>本来觉得最大的缺点可能是 GitHub 在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy) 迁移了一个<a href="http://huxpro.gitcafe.io" target="_blank" rel="external">镜像</a>出来，结果还是巨慢。</p>
<p>哥哥可是个前端好嘛！ 果断开 Chrome DevTool 查了下网络请求，原来是 <strong>pending 在了 Google Fonts</strong> 上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。<br>忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback ），果然一下就正常了，而且 GitHub 和 GitCafe 对比并没有感受到明显的速度差异，虽然 github 的 ping 值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。</p>
<hr>
<p>配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手</p>
<p>大的 Jekyll 主题上直接 fork 了 Clean Blog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）</p>
<p>本地调试环境需要 <code>gem install jekyll</code>，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功</p>
<p>Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），<strong>不过其实我一直觉得 Bootstrap 在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS 框架差多了……</strong>所以为了体验，也补了不少 CSS 进去</p>
<p>最后就进入了耗时反而最长的<strong>做图、写字</strong>阶段，也算是进入了<strong>写博客</strong>的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。</p>
<p>第二天考虑中文字体的渲染，fork 了 <a href="http://www.typeisbeautiful.com/" target="_blank" rel="external">Type is Beautiful</a> 的 <code>font</code> CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回顾这个博客的诞生，纯粹是出于个人兴趣。在知乎相关问题上回答并获得一定的 star 后，我决定把这个博客主题当作一个小小的开源项目来维护。</p>
<p>在经历 v1.0 - v1.5 的蜕变后，这个博客主题愈发完整，不但增加了诸多 UI 层的优化（opinionated）；在代码层面，更加丰富的配置项也使得这个主题拥有了更好的灵活性与可拓展性。而作为一个开源项目，我也积极的为其完善文档与解决 issue。</p>
<p>如果你恰好逛到了这里，希望你也能喜欢这个博客主题。</p>
<p>—— Hux 后记于 2015.10</p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
